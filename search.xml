<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A Django Project</title>
      <link href="/2025/06/16/Django-Project/Django-Project/"/>
      <url>/2025/06/16/Django-Project/Django-Project/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-begin-a-project"><a href="#How-to-begin-a-project" class="headerlink" title="How to begin a project?"></a>How to begin a project?</h1><p>We learned Django basic usage before. The most important thing is how to begin a Django project based on the knowledge we just learned?</p><p><strong>The answer is that we need a godfather.</strong></p><p>The godfather helps us build a Django project from the begin to the end. </p><h1 id="Frontend-with-Bootstrap"><a href="#Frontend-with-Bootstrap" class="headerlink" title="Frontend with Bootstrap"></a>Frontend with Bootstrap</h1><p>After we start a Django project, we start an app <code>blog</code> in the project. </p><p>To begin with, what we have to create is a surface, the frontend. </p><p>blog&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;blog&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>project&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;blog.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>blog&#x2F;views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>setting.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [BASE_DIR / <span class="string">&#x27;templates&#x27;</span>]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment"># import static folder</span></span><br><span class="line">            <span class="string">&#x27;builtins&#x27;</span>: [<span class="string">&#x27;django.templatetags.static&#x27;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    BASE_DIR / <span class="string">&#x27;static&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>templates&#x2F;index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>知了博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap5/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap5/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/base.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>templates&#x2F;index.html</p><p>templates&#x2F;blog_detail.html</p><p>templates&#x2F;login.html</p><p>templates&#x2F;register.html</p><h2 id="Extends-html"><a href="#Extends-html" class="headerlink" title="Extends html"></a>Extends html</h2><p>After we wrote the HTML file above, we found that there are too much repetitive code. </p><p>In the Django, we can reduce these repetitive code by using the inherit method. </p><ol><li><p>base.html</p><p>We define the HTML code that every html file needs in the <code>base.html</code>, such as the head, header and so on. </p><p>Then, we use <code>&#123;% block name %&#125;&#123;% endblock %&#125;</code>  as a placeholder to be replaced by other HTML files that inherit the <code>base.html</code>. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap5/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;bootstrap5/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/base.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% block head %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;p-3 text-bg-dark mb-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-flex align-items-center mb-2 mb-lg-0 text-white text-decoration-none&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;bi me-2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40&quot;</span> <span class="attr">height</span>=<span class="string">&quot;32&quot;</span> <span class="attr">role</span>=<span class="string">&quot;img&quot;</span> <span class="attr">ar</span> <span class="attr">ia-label</span>=<span class="string">&quot;Bootstrap&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;images/Tom.jpg&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40`&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-white&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-white&quot;</span>&gt;</span>Beautyleg<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-white&quot;</span>&gt;</span>尤密<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-white&quot;</span>&gt;</span>FAQ s<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-link px-2 text-white&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3&quot;</span> <span class="attr">role</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control form-control-dark text-bg-dark&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search...&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">aria-label</span>=<span class="string">&quot;Search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-light me-2&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>Sign-up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;container bg-white p-3 rounded&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% block main %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>blog_detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;详情&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ms-2&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ms-2&quot;</span>&gt;</span>2025年6月16日<span class="tag">&lt;/<span class="name">span</span>&gt;</span>发布</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;py-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            【名称】:</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            【大小】:</span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            【时长】:</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>下载地址<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mt-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入评论&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end mt-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;登录&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 330px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-auto&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-check mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;form-check-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;flexCheckDefault&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;form-check-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;flexCheckDefault&quot;</span>&gt;</span></span><br><span class="line">                    记住我</span><br><span class="line">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary w-100&quot;</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>register.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;注册&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 330px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-auto&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;邮箱&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;验证码&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">aria-label</span>=<span class="string">&quot;Recipient’s username&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&quot;button-addon2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-outline-secondary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> &quot;&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mb-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary w-100&quot;</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Backend-with-Mysql"><a href="#Backend-with-Mysql" class="headerlink" title="Backend with Mysql"></a>Backend with Mysql</h1><p>Connect to database:</p><ol><li>INSTALL_APPS</li><li>DATABASES</li></ol><p>settings.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;blog&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;zlauth&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;read_default_file&#x27;</span>: <span class="string">&#x27;my.cnf&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">database = smwl</span><br><span class="line">user = root</span><br><span class="line">password = 123456</span><br><span class="line">default-character-set = utf8</span><br></pre></td></tr></table></figure><p>The models which you can deem as a data structure define the tables of database. </p><p>To migrate the models into database, we just type two raw code in the terminal. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p> Now, we can use models to operate our database. </p><p>zlauto&#x2F;views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># store the captcha in database</span></span><br><span class="line">CaptchaModel.objects.update_or_create(email=email, defaults=&#123;<span class="string">&quot;captcha&quot;</span>: captcha&#125;)</span><br></pre></td></tr></table></figure><h1 id="Frontend-to-Backend-with-Ajax"><a href="#Frontend-to-Backend-with-Ajax" class="headerlink" title="Frontend to Backend with Ajax"></a>Frontend to Backend with Ajax</h1>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 tutorial</title>
      <link href="/2025/02/26/vue/vue/"/>
      <url>/2025/02/26/vue/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1><p><strong>单文件组件</strong> (也被称为 <code>*.vue</code> 文件，英文 Single-File Components，缩写为 <strong>SFC</strong>)</p><p>Vue 的单文件组件会将一个组件的逻辑 (JavaScript)，模板 (HTML) 和样式 (CSS) 封装在同一个文件里。</p><h1 id="创建一个-Vue-应用"><a href="#创建一个-Vue-应用" class="headerlink" title="创建一个 Vue 应用"></a>创建一个 Vue 应用</h1><p>这一指令将会安装并执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure><p>创建完成后, 安装依赖并启动服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;your-project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="响应性"><a href="#响应性" class="headerlink" title="响应性"></a>响应性</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h3><p>当一个组件首次渲染时，Vue 会<strong>追踪</strong>在渲染过程中使用的每一个 ref。然后，当一个 ref 被修改时，它会<strong>触发</strong>追踪它的组件的一次重新渲染。</p><p>Ref 可以持有任何类型的值，包括深层嵌套的对象、数组或者 JavaScript 内置的数据结构。Ref 会使它的值具有深层响应性。这意味着即使改变嵌套对象或数组时，变化也会被检测到。</p><p>也可以通过 shallow ref来放弃深层响应性。对于浅层 ref，只有 <code>.value</code> 的访问会被追踪。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">nested</span>: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mutateDeeply</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 以下都会按照期望工作</span></span><br><span class="line">  obj.<span class="property">value</span>.<span class="property">nested</span>.<span class="property">count</span>++</span><br><span class="line">  obj.<span class="property">value</span>.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="string">&#x27;baz&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h3><p>还有另一种声明响应式状态的方式，即使用 <code>reactive()</code> API。<strong>与将内部值包装在特殊对象中的 ref 不同，<code>reactive()</code> 将使对象本身具有响应性。</strong></p><p>当访问嵌套对象时，它们也会被 <code>reactive()</code> 包装。当 ref 的值是一个对象时，<code>ref()</code> 也会在内部调用它。与浅层 ref 类似，这里也有一个 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> API 可以选择退出深层响应性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure><p><strong>有限的值类型</strong>：它只能用于对象类型 (对象、数组和如 <code>Map</code>、<code>Set</code> 这样的集合类型)。它不能持有如 <code>string</code>、<code>number</code> 或 <code>boolean</code> 这样的原始类型。</p><h2 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h2><p>想要响应式地绑定一个 attribute，应该使用 <code>v-bind</code> 指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="attr">bind</span>:id=<span class="string">&quot;dynamicId&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>因为 <code>v-bind</code> 非常常用，我们提供了特定的简写语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :id=<span class="string">&quot;dynamicId&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>我们在App.vue中设置字符串Hello world, 并输出到页面上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const message=ref(&quot;Hello World&quot;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="使用变量-函数"><a href="#使用变量-函数" class="headerlink" title="使用变量, 函数"></a>使用变量, 函数</h2><p>在<code>script</code>标签中, 我们定义了message变量和reverseMessage函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> message=<span class="title function_">ref</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverseMessage</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">//在script中，需要用.value访问变量message的值，split是把字符串拆成一个个字符的字符数组</span></span><br><span class="line">  message.<span class="property">value</span>=message.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>template</code>标签中，可以直接访问&#x2F;调用它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在template中不需要用.value来访问message的值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@click监听响应点击事件，成功监听则调用函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;message += &#x27;!&#x27;&quot;</span>&gt;</span>Append&quot;!&quot;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>Reverse Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么会这么顺利就能获取到变量和函数呢？</p><p><strong>原因是我们在script中加上了setup，把变量和函数都暴露在外了</strong></p><h2 id="使用v-if-v-for条件判断和循环"><a href="#使用v-if-v-for条件判断和循环" class="headerlink" title="使用v-if, v-for条件判断和循环"></a>使用v-if, v-for条件判断和循环</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = <span class="title function_">ref</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>Toggle List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;list.push(list.length + 1)&quot;</span>&gt;</span>Push Number<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;list.pop()&quot;</span>&gt;</span>Pop Number<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;list.reverse()&quot;</span>&gt;</span>Reverse List<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;show &amp;&amp; list.length&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item of list&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;list.length&quot;</span>&gt;</span>List is not empty, but hidden.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>List is empty.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h2><p><code>computed()</code> 方法期望接收一个 getter 函数，返回值为一个<strong>计算属性 ref</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个计算属性 ref</span></span><br><span class="line"><span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateBooksMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的，然而，不同之处在于<strong>计算属性值会基于其响应式依赖被缓存</strong>。一个计算属性仅会在其响应式依赖更新时才重新计算。这意味着只要 <code>author.books</code> 不改变，无论多少次访问 <code>publishedBooksMessage</code> 都会立即返回先前的计算结果，而不用重复执行 getter 函数。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成一个层层嵌套的树状结构：</p><p><img src="/./images/image-20250227191108093.png" alt="image-20250227191108093"></p><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p><code>.component()</code> 方法，让组件在当前 Vue 应用中全局可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(</span><br><span class="line">  <span class="comment">// 注册的名字</span></span><br><span class="line">  <span class="string">&#x27;MyComponent&#x27;</span>,</span><br><span class="line">  <span class="comment">// 组件的实现</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>相比之下，局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</p><p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，导入的组件可以直接在模板中使用，无需注册：(如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用 <code>components</code> 选项来显式注册)</p><p>父组件可以在模板中渲染另一个组件作为子组件。要使用子组件，我们需要先导入它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br></pre></td></tr></table></figure><p>然后可以在template中渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ChildComp</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- render child component --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ChildComp</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>请注意：<strong>局部注册的组件在后代组件中<em>不</em>可用</strong>。在这个例子中，<code>ComponentA</code> 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p><h2 id="props-slots子组件接受数据"><a href="#props-slots子组件接受数据" class="headerlink" title="props, slots子组件接受数据"></a>props, slots子组件接受数据</h2><p>子组件可以通过 <strong>props</strong> 从父组件接受动态数据。首先，需要声明它所接受的 props：</p><p><code>defineProps()</code> 是一个编译时宏，并不需要导入。一旦声明，<code>msg</code> prop 就可以在子组件的模板中使用。</p><p>ChildComp.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg || &#x27;No props passed yet&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from parent&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ChildComp</span> <span class="attr">:msg</span>=<span class="string">&quot;greeting&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>除了通过 props 传递数据外，父组件还可以通过<strong>插槽</strong> (slots) 将模板片段传递给子组件：</p><p>在子组件中，可以使用 <code>&lt;slot&gt;</code> 元素作为插槽出口 (slot outlet) 渲染父组件中的插槽内容 (slot content)</p><p>ChildComp.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>Fallback content<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;from parent&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ChildComp</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">ChildComp</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="emit父组件接受数据"><a href="#emit父组件接受数据" class="headerlink" title="emit父组件接受数据"></a>emit父组件接受数据</h2><p><code>emit()</code> 的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。</p><p>ChildComp.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;response&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="title function_">emit</span>(<span class="string">&#x27;response&#x27;</span>, <span class="string">&#x27;hello from child&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>父组件可以使用 <code>v-on</code> 监听子组件触发的事件——这里的处理函数接收了子组件触发事件时的额外参数并将它赋值给了本地状态：</p><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> childMsg = <span class="title function_">ref</span>(<span class="string">&#x27;No child msg yet&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">ChildComp</span> @<span class="attr">response</span>=<span class="string">&quot;(msg) =&gt; childMsg = msg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; childMsg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js tutorial</title>
      <link href="/2025/02/26/JavaScript/js%20tutorial/"/>
      <url>/2025/02/26/JavaScript/js%20tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="What-can-JavaScript-do"><a href="#What-can-JavaScript-do" class="headerlink" title="What can JavaScript do?"></a>What can JavaScript do?</h1><p>JavaScript can change HTML elements content. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can change HTML content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;&#x27;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript can change HTML elements attributes.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;myImage&#x27;).src=&#x27;pic_bulbon.gif&#x27;&quot;</span>&gt;</span>Turn on the light<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;myImage&quot;</span> <span class="attr">src</span>=<span class="string">&quot;pic_bulboff.gif&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript can show and hide HTML elements. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can hide HTML elements.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;demo&#x27;).style.display=&#x27;none&#x27;&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>Hello JavaScript!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;demo&#x27;).style.display=&#x27;block&#x27;&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript can change CSS style. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can change the style of an HTML element.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;document.getElementById(&#x27;demo&#x27;).style.fontSize=&#x27;35px&#x27;&quot;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-Insert"><a href="#JavaScript-Insert" class="headerlink" title="JavaScript Insert"></a>JavaScript Insert</h1><ol><li><p>internal element <code>&lt;head&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;Paragraph changed.&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>internal element <code>&lt;body&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Demo JavaScript in Body<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>A Paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Try it<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;Paragraph changed.&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>external URL</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://www.w3schools.com/js/myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>external file</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css tutorial</title>
      <link href="/2025/02/26/css/css/"/>
      <url>/2025/02/26/css/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-rule"><a href="#CSS-rule" class="headerlink" title="CSS rule"></a>CSS rule</h1><p>A CSS rule consists of a selector and a declaration block. </p><p><img src="/./images/image-20250226184041400.png" alt="image-20250226184041400"></p><h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><ol><li><p>element selector</p><p>The element selector selects elements based on the element name.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">color: white;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now all the h1 will be center-aligned, with while color.</p></li><li><p>id selector</p><p>The id selector uses the id attribute of an element to select an element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#para1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;para1&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This paragraph is not affected by the style.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>class selector</p><p>The class selector selects elements with a special class attribute.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>Red and center-aligned heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>Red and center-aligned paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span><span class="selector-class">.large</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">300%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>This heading will not be affected<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>This paragraph will be red and center-aligned.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;center large&quot;</span>&gt;</span>This paragraph will be red, center-aligned, and in a large font-size.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Insert-CSS"><a href="#Insert-CSS" class="headerlink" title="Insert CSS"></a>Insert CSS</h1><p>There are three ways of inserting css.</p><ul><li><p>external css</p><p>Each HTML page must include a reference to the external style sheet file inside  the <code>&lt;link&gt;</code> element, inside the head section.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a title.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a Heading 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Internal css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a title.<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">font-family</span>: verdana;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a Heading 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Inline css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;text-align:center;&quot;</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><h1 id="CSS-Box-Model"><a href="#CSS-Box-Model" class="headerlink" title="CSS Box Model"></a>CSS Box Model</h1><p>All HTML elements can be considered as boxes.</p><p>The CSS box model is essentially a box that wraps around every HTML element.  It consists of: content, padding, borders and margins. The image below illustrates the box model:</p><p><img src="/./images/image-20250226192309091.png" alt="image-20250226192309091"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: lightgrey;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">15px</span> solid green;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Demonstrating the Box Model<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The CSS box model is essentially a box that wraps around every HTML element. It consists of: borders, padding, margins, and the actual content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This text is the content of the box. We have added a 50px padding, 20px margin and a 15px green border. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Basic</title>
      <link href="/2025/02/24/Django%20Basic/Django%20Basic/"/>
      <url>/2025/02/24/Django%20Basic/Django%20Basic/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-build-a-website"><a href="#How-to-build-a-website" class="headerlink" title="How to build a website"></a>How to build a website</h1><p>A website contains three parts which are a web server, a web application(Django), and a database. </p><p>When user enters a URL in browser, a request is sent to the web server. Then, the server accepts the request and takes it to the web application through WSGI port. After web application dealing the request with database, the results are sent to the web server by WSGI port. Finally, the sever packages the results into a response and return it to user’s browser. </p><p><img src="/./images/image-20250227224013203.png" alt="image-20250227224013203"></p><p>Website development is subordinated to software engineering. The process of development is:</p><p>Requirement Analysis -&gt; Design -&gt; Coding -&gt; Test -&gt; Maintenance</p><ol><li><p>Requirement Analysis</p><p>Just show the functions in your website. </p><ul><li>videos list</li><li>videos detail </li><li>search</li><li>payment online(Alipay)</li><li>Register&#x2F;login</li></ul></li><li><p>Design</p><p>What your website actually looks like?</p><ul><li>Navigation bar and search button above the page</li><li>videos list, video detail </li><li>Register and login all in one page</li><li>Database Mongo, Mysql</li></ul></li></ol><h1 id="MTV"><a href="#MTV" class="headerlink" title="MTV"></a>MTV</h1><p>We separate the interaction of Django into model, template, and view.</p><ol><li><p>Model</p><p>The model is the data operating center, which provides adding, updating, deleting and searching data function from database. </p></li><li><p>Template</p><p>The template defines how to display the data. </p></li><li><p>View</p><p>The view serves as a middleman responsible for delivering the data from the model to the template.</p><p>In Django, the view is a python function or class which accepts a web request and respond a web page. </p><p><strong>All data flow from user to database should go through views</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_django</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;&lt;html&gt;&lt;body&gt;Hello Django&lt;/body&gt;&lt;/html&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><p>We often update our html code, but we do not often change our python code. For convenience, we separate the view into python file and html file using template system.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_django</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;hello.html&#x27;</span>, &#123;<span class="string">&#x27;value&#x27;</span>:<span class="string">&#x27;Hello Django&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>hello.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello Django<span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/./images/image-20250604172900543.png" alt="image-20250604165402905"></p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><ol><li><p>Model</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(forms.Form):</span><br><span class="line">    name=forms.CharField()</span><br><span class="line">    password=forms.CharField()</span><br></pre></td></tr></table></figure></li><li><p>Template</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>View</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = LoginForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">            form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;<span class="string">&#x27;form&#x27;</span>:form&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><ol><li><p>create basic Django project structure</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite my_bbs</span><br></pre></td></tr></table></figure><p>Now we can enter our directory to run our project</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my_bbs</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></li><li><p>start our apps</p><p>We should create some apps to implement different features in our website. \</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd smwl</span><br><span class="line">python manage.py startapp videos</span><br><span class="line">python manage.py startapp index</span><br><span class="line">python manage.py startapp user</span><br></pre></td></tr></table></figure><p>Then we can see three folders.</p><ul><li><code>index</code> – home page</li><li><code>commodity</code> – videos list page and videos detail page</li><li><code>shopper</code>– user center page, register&#x2F;login page, and online payment</li></ul><p>Now, we continue create three folders.</p><ul><li><code>media</code> – video preview</li><li><code>templates</code> – HTML files</li><li><code>static</code> – css, javascript files</li></ul><p>Another thing is these three apps we just created should add them in <code>setting.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">    &#x27;videos&#x27;,</span><br><span class="line">    &#x27;index&#x27;,</span><br><span class="line">    &#x27;user&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>And one more thing is the <code>templates</code> folder is the shared resources for all apps. We have to add the templates path in <code>settings.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span><br><span class="line">        &#x27;DIRS&#x27;: [BASE_DIR / &#x27;templates&#x27;],</span><br><span class="line">        &#x27;APP_DIRS&#x27;: True,</span><br><span class="line">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="line">            &#x27;context_processors&#x27;: [</span><br><span class="line">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="line">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="line">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="line">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &#x27;django.middleware.security.SecurityMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,</span><br><span class="line">    # 添加中间件</span><br><span class="line">    &#x27;django.middleware.locale.LocaleMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.common.CommonMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,</span><br><span class="line">    &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>mysql database setting</p><p><code>setting.py</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &#x27;default&#x27;: &#123;</span><br><span class="line">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;,</span><br><span class="line">        &#x27;NAME&#x27;: &#x27;smwl&#x27;,</span><br><span class="line">        &#x27;USER&#x27;: &#x27;root&#x27;,</span><br><span class="line">        &#x27;PASSWORD&#x27;: &#x27;123456&#x27;,</span><br><span class="line">        &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class="line">        &#x27;PORT&#x27;: &#x27;3306&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>create a database name babys</p><p>enter command: <code>python manage.py migrate</code>, which will create built-in tables in Django.</p><p><img src="/./images/image-20250228011814425.png" alt="image-20250228011814425"></p></li><li><p>static resource</p><p>settings.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &#x27;static/&#x27;</span><br><span class="line">STATICFILES_DIRS = [BASE_DIR / &#x27;static&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>media resource</p><p>setting.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MEDIA_URL = &#x27;/media/&#x27;</span><br><span class="line">MEDIA_ROOT = BASE_DIR / &#x27;media&#x27;</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, re_path</span><br><span class="line">from django.views.static import serve</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    # media resources</span><br><span class="line">    re_path(&#x27;media/(?P&lt;path&gt;.*)&#x27;, serve,</span><br><span class="line">            &#123;&#x27;document_root&#x27;: settings.MEDIA_ROOT&#125;, name=&#x27;media&#x27;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>Route is AKA Uniform Resource Locator(URL). The <code>urls.py</code> defines all URLs. As the project’s functionality expands, the number of  route definitions in the <code>urls.py</code> of the project folder will continue to grow, making it increasingly difficult to manage. </p><p>In order to distinguish URLs of different apps, we are supposed to define a route for every app in <code>urls.py</code> of project folder. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include((<span class="string">&#x27;index.urls&#x27;</span>, <span class="string">&#x27;index&#x27;</span>), namespace=<span class="string">&#x27;index&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;commodity/&#x27;</span>, include((<span class="string">&#x27;commodity.urls&#x27;</span>, <span class="string">&#x27;commodity&#x27;</span>), namespace=<span class="string">&#x27;commodity&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;shopper/&#x27;</span>, include((<span class="string">&#x27;shopper.urls&#x27;</span>, <span class="string">&#x27;shopper&#x27;</span>), namespace=<span class="string">&#x27;shopper&#x27;</span>)),</span><br><span class="line">    <span class="comment"># media resources</span></span><br><span class="line">    re_path(<span class="string">&#x27;media/(?P&lt;path&gt;.*)&#x27;</span>, serve,</span><br><span class="line">            &#123;<span class="string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="string">&#x27;media&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>path(&#39;commodity/&#39;, include((&#39;commodity.urls&#39;, &#39;commodity&#39;), namespace=&#39;commodity&#39;)),</code></p><p>This code means that we set a URL pattern, 127.0.0.1:8000&#x2F;commodity. The <code>include(&#39;commodity.urls&#39;, &#39;commodity&#39;)</code> means take the URL we just create to be managed by <code>commodity.urls</code> in the commodity folder. The <code>namespace=&#39;commodity&#39;</code> assigns a namespace to this app, allowing us to reference its URLs uniquely in templates and views.</p><p>Therefore, we have to create <code>urls.py</code> file in commodity folder. Similarly, create <code>urls.py</code> file in index and shopper folders respectively. </p><p>In <code>urls.py</code> of commodity app, </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;.html&#x27;</span>, commodityView, name=<span class="string">&#x27;commodity&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;/detail.&lt;int:id&gt;.html&#x27;</span>, detailView, name=<span class="string">&#x27;detail&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>path(&#39;.html&#39;, commodityView, name=&#39;commodity&#39;),</code></p><p>This code set a real URL, 127.0.0.1:8000&#x2F;commodity. When user request the URL, Django take the request to be managed by <code>detailView</code> , a view function. The <code>name=&#39;commodity&#39;</code> names the URL. </p><p>Similarly, </p><p>In <code>urls.py</code> of index app, </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, indexView, name=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>In <code>urls.py</code> of shopper app, </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> *</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;.html&#x27;</span>, shopperView, name=<span class="string">&#x27;shopper&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;/login.html&#x27;</span>, loginView, name=<span class="string">&#x27;login&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;/logout.html&#x27;</span>, logoutView, name=<span class="string">&#x27;logout&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;/shopcart.html&#x27;</span>, shopcartView, name=<span class="string">&#x27;shopcart&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>login mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE django_bbs;</span><br></pre></td></tr></table></figure><p>create an account, whose name is ‘work’ and password is ‘Djangobbs’.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER work IDENTIFIED BY &#x27;Djangobbs&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON django_bbs .* TO &#x27;work&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>The migrate command makes model sync to our database</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>Now, we can see that the admin, auth and others table are created in our django_bbs.</p><p><img src="/./images/image-20250605074130626.png" alt="image-20250605074130626"></p><h1 id="Back-end-Management"><a href="#Back-end-Management" class="headerlink" title="Back-end Management"></a>Back-end Management</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser --username=admin --email=admin@email.com</span><br></pre></td></tr></table></figure><p>Now we can open url <code>http://127.0.0.1:8000/admin/</code> to login back-end management system.</p><h1 id="App"><a href="#App" class="headerlink" title="App"></a>App</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp post</span><br></pre></td></tr></table></figure><p>Now we data an app directory in root directory. </p><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>Model is a python class to deal the data with database including:</p><ol><li>inherit <code>django.db.models.Mode</code></li><li>inner class <code>Meta</code></li><li>Field Type attributes</li><li><code>__str__</code> method</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseModel</span>(models.Model):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-created_time&#x27;</span>]</span><br><span class="line">    created_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>, help_text=<span class="string">u&#x27;创建时间&#x27;</span>)</span><br><span class="line">    last_modified = models.DateTimeField(auto_now=<span class="literal">True</span>, help_text=<span class="string">u&#x27;修改时间&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Topic</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">255</span>, unique=<span class="literal">True</span>, help_text=<span class="string">u&#x27;话题标题&#x27;</span>)</span><br><span class="line">    content = models.TextField(help_text=<span class="string">u&#x27;话题内容&#x27;</span>)</span><br><span class="line">    is_online = models.BooleanField(default=<span class="literal">True</span>, help_text=<span class="string">u&#x27;话题是否在线&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(to=User, to_field=<span class="string">&#x27;id&#x27;</span>, on_delete=models.CASCADE, help_text=<span class="string">u&#x27;关联用户表&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%d: %s&#x27;</span> % (<span class="variable language_">self</span>.<span class="built_in">id</span>, <span class="variable language_">self</span>.title[<span class="number">0</span>:<span class="number">20</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Comment</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    content = models.CharField(max_length=<span class="number">255</span>, help_text=<span class="string">u&#x27;话题评论&#x27;</span>)</span><br><span class="line">    topic = models.ForeignKey(to=Topic, to_field=<span class="string">&#x27;id&#x27;</span>, on_delete=models.CASCADE, help_text=<span class="string">u&#x27;关联话题表&#x27;</span>)</span><br><span class="line">    up = models.IntegerField(default=<span class="number">0</span>, help_text=<span class="string">u&#x27;支持&#x27;</span>)</span><br><span class="line">    down = models.IntegerField(default=<span class="number">0</span>, help_text=<span class="string">u&#x27;反对&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%d: %s&#x27;</span> % (<span class="variable language_">self</span>.<span class="built_in">id</span>, <span class="variable language_">self</span>.content[<span class="number">0</span>:<span class="number">20</span>])</span><br></pre></td></tr></table></figure><p>migrate them to database</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &#x27;post.apps.PostConfig&#x27;,</span><br><span class="line">    &#x27;django.contrib.admin&#x27;,</span><br><span class="line">    &#x27;django.contrib.auth&#x27;,</span><br><span class="line">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="line">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="line">    &#x27;django.contrib.messages&#x27;,</span><br><span class="line">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations post</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>The post_topic and post_comment were created in database.</p><p>After we define our models, we can use it to create objects!!!</p><p>Firstly, we need an User object to create a Topic object. Secondly, we use the Topic object to create Comment object. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line"># use save() method to create model object</span><br><span class="line">&gt;&gt;&gt; from post.models import Topic, Comment</span><br><span class="line">&gt;&gt;&gt; from django.contrib.auth.models import User</span><br><span class="line">&gt;&gt;&gt; user=User.objects.get(username=&#x27;admin&#x27;)</span><br><span class="line">&gt;&gt;&gt; topic=Topic(title=&#x27;first topic&#x27;, content=&#x27;This is the first topic!&#x27;, user=user)</span><br><span class="line">&gt;&gt;&gt; topic.save()</span><br><span class="line">&gt;&gt;&gt; comment=Comment(content=&#x27;very good!&#x27;, topic=topic, up=88, down=32)</span><br><span class="line">&gt;&gt;&gt; comment.save()</span><br><span class="line"># use create() method to create model object</span><br><span class="line">&gt;&gt;&gt; user=User.objects.get(username=&#x27;admin&#x27;)</span><br><span class="line">&gt;&gt;&gt; topic_2=Topic.objects.create(title=&#x27;second topic&#x27;, content=&quot;This is the second topic!&#x27;, user=user)</span><br><span class="line">&gt;&gt;&gt; topic_2=Topic.objects.create(title=&#x27;second topic&#x27;, content=&#x27;This is the second topic!&#x27;, user=user)</span><br><span class="line">&gt;&gt;&gt; Comment.object.create(content=&#x27;good!&#x27;, topic=topic_2, up=30, down=17)</span><br><span class="line">&gt;&gt;&gt; Comment.objects.create(content=&#x27;good!&#x27;, topic=topic_2, up=30, down=17)</span><br><span class="line">&lt;Comment: 3: good!&gt;</span><br></pre></td></tr></table></figure><p>Now, we can see the data in the database!</p><p>ORM（Object-Relational Mapping) have lots of method like this to operate the database. </p><p>But life is short, we need a more simple way to interact with our models. This is Back-end Management. </p><h2 id="Register-to-back-end"><a href="#Register-to-back-end" class="headerlink" title="Register to back-end"></a>Register to back-end</h2><p>admin.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> post.models <span class="keyword">import</span> Topic, Comment</span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line">admin.site.register([Topic, Comment])</span><br></pre></td></tr></table></figure><p>As you can see, these two models add into our back-end management.</p><p><img src="/./images/image-20250605173333006.png" alt="image-20250605173333006"></p><p>Now we can change our database by UI. </p><h1 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h1><h2 id="Function-views"><a href="#Function-views" class="headerlink" title="Function views"></a>Function views</h2><p>In Django, each URL pattern is mapped to corresponding view function, which receives the request and return a response.</p><p>my_bbs&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> post <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;post/hello&#x27;</span>, views.hello_django_bbs)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>In path() method, the first parameter is the URL and the second parameter is the view function.</p><p>post&#x2F;views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_django_bbs</span>(<span class="params">request</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;Hello Django BBS!&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250606161422363.png" alt="image-20250606161422363"></p><p>As you can see, we can access the <code>http://127.0.0.1:8000/post/hello</code> URL sending a request. After that, we will see the response. </p><h2 id="Including-another-URLconf"><a href="#Including-another-URLconf" class="headerlink" title="Including another URLconf"></a>Including another URLconf</h2><p>post&#x2F;urls.py (we need to create it firstly)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> post <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.hello_django_bbs)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>my_bbs&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;post/&#x27;</span>, include(<span class="string">&#x27;post.urls&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Now, the URL starting with <code>post/</code>  will be handled by the URlconf of the post app.</p><p>This URL mapping method is responsible for routing different requests to their corresponding apps.</p><h2 id="Class-based-views"><a href="#Class-based-views" class="headerlink" title="Class-based views"></a>Class-based views</h2><p>Before our view is a function, actually views can be represented as a class. </p><p>post&#x2F;views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    html = <span class="string">&#x27;&lt;h1&gt;(%s) Hello Django BBS!&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="variable language_">self</span>.html % <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="variable language_">self</span>.html % <span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @method_decorator(<span class="params">csrf_exempt</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(FirstView, <span class="variable language_">self</span>).dispatch(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> post <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> post.views <span class="keyword">import</span> FirstView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;hello/&#x27;</span>, views.hello_django_bbs),</span><br><span class="line">    path(<span class="string">&#x27;hello_class/&#x27;</span>, FirstView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Dynamic-URL"><a href="#Dynamic-URL" class="headerlink" title="Dynamic URL"></a>Dynamic URL</h2><p>We already know that the view can accept a URL as a parameter. Moreover, the view can accept other parameters. </p><p>view.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dynamic_hello</span>(<span class="params">request, year, month, day</span>):</span><br><span class="line">    html = <span class="string">&quot;&lt;h1&gt;(%s) Hello Django BBS!&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html % (<span class="string">&#x27;%s-%s-%s&#x27;</span> % (year, month, day)))</span><br></pre></td></tr></table></figure><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;dynamic/&lt;int:year&gt;/&lt;int:month&gt;/&lt;int:day&gt;&#x27;</span>, views.dynamic_hello),</span><br></pre></td></tr></table></figure><p>Our view can take 3 parameters!</p><p><img src="/./images/image-20250607060457060.png" alt="image-20250607060457060"></p><h2 id="Interact-with-models"><a href="#Interact-with-models" class="headerlink" title="Interact with models"></a>Interact with models</h2><p>Don’t forget that the purpose of views is to handle to data from user to models. Now, we do some exercises.</p><p>We define the data returning form in the <code>post_service.py</code> firstly. </p><p>post_service.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_topic_base_info</span>(<span class="params">topic</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: topic.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: topic.title,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: topic.user.username,</span><br><span class="line">        <span class="string">&#x27;created_time&#x27;</span>: topic.created_time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>post&#x2F;views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> post.models <span class="keyword">import</span> Topic</span><br><span class="line"><span class="keyword">from</span> post.post_service <span class="keyword">import</span> build_topic_base_info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic_list_view</span>(<span class="params">request</span>):</span><br><span class="line">    topic_qs = Topic.objects.<span class="built_in">all</span>()</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: topic_qs.count(),</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>: [build_topic_base_info(topic) <span class="keyword">for</span> topic <span class="keyword">in</span> topic_qs]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(result)</span><br></pre></td></tr></table></figure><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;topic_list/&#x27;</span>, views.topic_list_view),</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250607063918427.png" alt="image-20250607063918427"></p><p>This view shows the number of topic objects, and the info of every topic object in a list. </p><p>Besides, try to read two models.</p><p>post_service.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_comment_info</span>(<span class="params">comment</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: comment.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: comment.content,</span><br><span class="line">        <span class="string">&#x27;up&#x27;</span>: comment.up,</span><br><span class="line">        <span class="string">&#x27;down&#x27;</span>: comment.down,</span><br><span class="line">        <span class="string">&#x27;created_time&#x27;</span>: comment.created_time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;last_modified_time&#x27;</span>: comment.last_modified.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> post.models <span class="keyword">import</span> Comment</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_topic_detail_info</span>(<span class="params">topic</span>):</span><br><span class="line">    comment_qs = Comment.objects.<span class="built_in">filter</span>(topic=topic)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: topic.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: topic.title,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>: topic.content,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: topic.user.username,</span><br><span class="line">        <span class="string">&#x27;created_time&#x27;</span>: topic.created_time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;last_modified&#x27;</span>: topic.last_modified.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;comments&#x27;</span>: [build_comment_info(comment) <span class="keyword">for</span> comment <span class="keyword">in</span> comment_qs]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> post.post_service <span class="keyword">import</span> build_topic_detail_info</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic_detail_view</span>(<span class="params">request, topic_id</span>):</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = build_topic_detail_info(Topic.objects.get(pk=topic_id))</span><br><span class="line">    <span class="keyword">except</span> Topic.DoesNotExist:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(result)</span><br></pre></td></tr></table></figure><p>Now we can send two parameters in URL to view function.</p><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;topic/&lt;int:topic_id&gt;/&#x27;</span>, views.topic_detail_view),</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250608053103668.png" alt="image-20250608053103668"></p><h2 id="Shortcuts"><a href="#Shortcuts" class="headerlink" title="Shortcuts"></a>Shortcuts</h2><p>The <code>render()</code> using dictionary and model responses a HttpResponse object. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> post.models <span class="keyword">import</span> Topic</span><br><span class="line"><span class="keyword">from</span> post.post_service <span class="keyword">import</span> build_topic_base_info</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic_list_view</span>(<span class="params">request</span>):</span><br><span class="line">    topic_qs = Topic.objects.<span class="built_in">all</span>()</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: topic_qs.count(),</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>: [build_topic_base_info(topic) <span class="keyword">for</span> topic <span class="keyword">in</span> topic_qs]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;post/topic_list.html&#x27;</span>, result)</span><br></pre></td></tr></table></figure><p>The <code>render()</code>  function combines the <code>result</code> dictionary and <code>post/topic_list.html</code> template to generate an final html page.</p><h1 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h1><p>Templates are just a form of a HTML page, just like models are a form of database tables.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django.template import Template</span><br><span class="line">&gt;&gt;&gt; from django.template import Context</span><br><span class="line">&gt;&gt;&gt; t = Template(&quot;This is &#123;&#123; project &#125;&#125;, &#123;&#123; True.real &#125;&#125;&quot;)</span><br><span class="line">&gt;&gt;&gt; c = Context(&#123; &#x27;project&#x27;: &#x27;Django BBS&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; t.render(c)</span><br><span class="line">&#x27;This is Django BBS, 1&#x27;</span><br></pre></td></tr></table></figure><p>As you can see the render function just uses the key’s value in context object to replace the <code>&#123;&#123; key &#125;&#125;</code> in the template object. </p><p>But in order to separate the HTML and the view function, we put the template in the <code>templates/post</code> directory. </p><p>views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template.loader <span class="keyword">import</span> get_template</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_django_bbs</span>(<span class="params">request</span>):</span><br><span class="line">    t = get_template(<span class="string">&#x27;post/hello_django_bbs.html&#x27;</span>)</span><br><span class="line">    html = t.render(&#123;<span class="string">&#x27;project&#x27;</span>: <span class="string">&#x27;Django BBS&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>hello_django_bbs.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; project &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="TemplateView"><a href="#TemplateView" class="headerlink" title="TemplateView"></a>TemplateView</h2><p>To keep it simple, we make our view inherit class <code>TemplateView</code>, which will find templates in directory <code>post/templates/</code> by default. </p><p>The definition of <code>TemplateView</code>  is:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateView</span>(TemplateResponseMixin, ContentMixin, View)</span><br></pre></td></tr></table></figure><p>As we can see, it inherits <code>TemplateResponseMixin</code> and <code>ContentMixin</code> classes. </p><p><code>ContentMixin</code> defines a method <code>get_context_data</code> returning a dictionary object rendering the template. We usually rewrite this method. </p><p><code>TemplateResponseMixin</code> defines a <code>template_name</code> attribute specifying the path of the template. </p><p>views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(<span class="title class_ inherited__">TemplateView</span>):</span><br><span class="line">    <span class="comment"># show our template path. (post/templates/post/index.html)</span></span><br><span class="line">    template_name = <span class="string">&#x27;post/index.html&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_context_data</span>(<span class="params">self, **kwargs</span>):   </span><br><span class="line">        context = <span class="built_in">super</span>(IndexView, <span class="variable language_">self</span>).get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;hello&#x27;</span>] = <span class="string">&#x27;Hello Django BBS&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.IndexView.as_view()),</span><br></pre></td></tr></table></figure><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>The <code>ListView</code> class is written to show models list. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListView</span>(MutipleObjectTemplateResponseMixin, BaseListView)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultipleObjectTemplateResponseMixin</span>(<span class="title class_ inherited__">TemplateResponseMixin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Mixin for responding with a template and list of objects.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    template_name_suffix = <span class="string">&quot;_list&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_template_names</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return a list of template names to be used for the request. Must return</span></span><br><span class="line"><span class="string">        a list. May not be called if render_to_response is overridden.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            names = <span class="built_in">super</span>().get_template_names()</span><br><span class="line">        <span class="keyword">except</span> ImproperlyConfigured:</span><br><span class="line">            <span class="comment"># If template_name isn&#x27;t specified, it&#x27;s not a problem --</span></span><br><span class="line">            <span class="comment"># we just start with an empty list.</span></span><br><span class="line">            names = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If the list is a queryset, we&#x27;ll invent a template name based on the</span></span><br><span class="line">        <span class="comment"># app and model name. This name gets put at the end of the template</span></span><br><span class="line">        <span class="comment"># name list so that user-supplied names override the automatically-</span></span><br><span class="line">        <span class="comment"># generated ones.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>.object_list, <span class="string">&quot;model&quot;</span>):</span><br><span class="line">            opts = <span class="variable language_">self</span>.object_list.model._meta</span><br><span class="line">            names.append(</span><br><span class="line">                <span class="string">&quot;%s/%s%s.html&quot;</span></span><br><span class="line">                % (opts.app_label, opts.model_name, <span class="variable language_">self</span>.template_name_suffix)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> names:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">&quot;%(cls)s requires either a &#x27;template_name&#x27; attribute &quot;</span></span><br><span class="line">                <span class="string">&quot;or a get_queryset() method that returns a QuerySet.&quot;</span></span><br><span class="line">                % &#123;</span><br><span class="line">                    <span class="string">&quot;cls&quot;</span>: <span class="variable language_">self</span>.__class__.__name__,</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> names</span><br></pre></td></tr></table></figure><p>As you can see, <code>MultipleObjectTemplateResponseMixin</code> method will auto returning names, path of template. </p><p>For example, if we want to list the model <code>Topic</code>, the model name is <code>post/topic_list.html</code> by default. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseListView</span>(MultipleObjectMixin, View):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base view for displaying a list of objects.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This requires subclassing to provide a response mixin.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="variable language_">self</span>.object_list = <span class="variable language_">self</span>.get_queryset()</span><br><span class="line">        allow_empty = <span class="variable language_">self</span>.get_allow_empty()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> allow_empty:</span><br><span class="line">            <span class="comment"># When pagination is enabled and object_list is a queryset,</span></span><br><span class="line">            <span class="comment"># it&#x27;s better to do a cheap query than to load the unpaginated</span></span><br><span class="line">            <span class="comment"># queryset in memory.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.get_paginate_by(<span class="variable language_">self</span>.object_list) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">hasattr</span>(</span><br><span class="line">                <span class="variable language_">self</span>.object_list, <span class="string">&quot;exists&quot;</span></span><br><span class="line">            ):</span><br><span class="line">                is_empty = <span class="keyword">not</span> <span class="variable language_">self</span>.object_list.exists()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                is_empty = <span class="keyword">not</span> <span class="variable language_">self</span>.object_list</span><br><span class="line">            <span class="keyword">if</span> is_empty:</span><br><span class="line">                <span class="keyword">raise</span> Http404(</span><br><span class="line">                    _(<span class="string">&quot;Empty list and “%(class_name)s.allow_empty” is False.&quot;</span>)</span><br><span class="line">                    % &#123;</span><br><span class="line">                        <span class="string">&quot;class_name&quot;</span>: <span class="variable language_">self</span>.__class__.__name__,</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">        context = <span class="variable language_">self</span>.get_context_data()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.render_to_response(context)</span><br></pre></td></tr></table></figure><p><code>get_queryset()</code> is used to get the model list. </p><p><code>get_context_data()</code>  is used to return context data to render the template. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> ListView</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TopicList</span>(<span class="title class_ inherited__">ListView</span>):</span><br><span class="line">    model = Topic</span><br></pre></td></tr></table></figure><p><code>model = Topic</code> tells Django getting the <code>Topic</code> model data to render the template <code>post/templates/post/topic_list.html</code>. </p><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>To divide the URLs, Django provides the namespace concept. </p><p>Namespace divides the URLs by apps. Therefore, we need to name the app. </p><p>my_bbs&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;post/&#x27;</span>, include(<span class="string">&#x27;post.urls&#x27;</span>, namespace=<span class="string">&#x27;bbs_post&#x27;</span>))</span><br></pre></td></tr></table></figure><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app_name = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">path(<span class="string">&#x27;topic/&lt;int:topic_id&gt;/&#x27;</span>, views.topic_detail_view, name=<span class="string">&#x27;topic_detail&#x27;</span>),</span><br></pre></td></tr></table></figure><p>We set the app’s name as <code>post</code>, and the URL’s name as <code>topic_detail</code></p><p>Now we can use namespace in the template.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &#x27;post:topic_detail&#x27; topic.id %&#125;</span><br></pre></td></tr></table></figure><p>The <code>topic.id</code>  is the parameter.</p><p>topic_list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for topic in object_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;post:topic_detail&#x27; topic.id %&#125;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; topic.title &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250608224625173.png" alt="image-20250608224625173"></p><h1 id="Form-System"><a href="#Form-System" class="headerlink" title="Form System"></a>Form System</h1><p>Let’s view how the Form system work firstly.</p><p>user enter a word in form and submit it –&gt; browser sent a GET request –&gt; view function get the parameter in the request –&gt; search in database –&gt; render the templates </p><p>post&#x2F;search_topic.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/post/search_topic/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;search_topic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>This form sends a parameter called <code>title</code> in the request. The <code>search_topic</code> view gets it, searches topic objects including this <code>title</code>,  in database  renders the objects as <code>object_list</code> to the <code>post/topic_list.html</code>  template. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_topic_form</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># display the form template</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;post/search_topic.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_topic</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># get form search parameters</span></span><br><span class="line">    topic_qs = Topic.objects.<span class="built_in">filter</span>(title__contains=request.GET[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;post/topic_list.html&#x27;</span>, context=&#123;<span class="string">&#x27;object_list&#x27;</span>: topic_qs&#125;)</span><br></pre></td></tr></table></figure><p>topic_list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for topic in object_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;post:topic_detail&#x27; topic.id %&#125;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123; topic.title &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>post&#x2F;views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;search_topic_form/&#x27;</span>, views.search_topic_form),</span><br><span class="line">path(<span class="string">&#x27;search_topic/&#x27;</span>, views.search_topic),</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250609044639447.png" alt="image-20250609044639447"></p><p><img src="/./images/image-20250609045118686.png" alt="image-20250609045118686"></p><p>The following improvement avoids sending <code>NULL</code> to the view.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_topic</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.GET.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        errors = [<span class="string">&#x27;title is invalid&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;post/search_topic.html&#x27;</span>, context=&#123;<span class="string">&#x27;errors&#x27;</span>: errors&#125;)</span><br><span class="line">    <span class="comment"># get form search parameters</span></span><br><span class="line">    topic_qs = Topic.objects.<span class="built_in">filter</span>(title__contains=request.GET[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;post/topic_list.html&#x27;</span>, context=&#123;<span class="string">&#x27;object_list&#x27;</span>: topic_qs&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% if errors %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            &#123;% for error in errors %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/post/search_topic/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;search_topic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="django-Form-class"><a href="#django-Form-class" class="headerlink" title="django.Form class"></a>django.Form class</h2><p>Django provides us the <code>From</code> class, which has powerful functions:</p><ol><li><p>verify fields</p><p>Every Form object has a <code>is_valid()</code> method verifying the field whether is valid or not. If it’s True,it converts the data to correct Python type and stores them into <code>cleaned_data</code> attribute of dictionary type. (We no longer need to write html to verify the input errors)</p><p>Common field type: CharField, IntegerField, BooleanField, ChoiceField, EmailField, DataTimeField. </p></li><li><p>Auto generate HTML</p><p>Form object can auto generate HTML according fields.</p></li></ol><p>As an example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from django import forms</span><br><span class="line">&gt;&gt;&gt; class TopicSearchForm(forms.Form):</span><br><span class="line">...     title = forms.CharField(label=&#x27;Topic title&#x27;)</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; form = TopicSearchForm(&#123;&#x27;title&#x27;: &#x27;Django&#x27;&#125;)</span><br><span class="line">&gt;&gt;&gt; form.is_valid()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; print(form)</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;id_title&quot;&gt;Topic title:&lt;/label&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;Django&quot; required id=&quot;id_title&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>post&#x2F;forms.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TopicSearchForm</span>(forms.Form):</span><br><span class="line">    title = forms.CharField(label=<span class="string">&#x27;Topic title&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_topic_form</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># display the form template</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;post/search_topic.html&#x27;</span>, context=&#123;<span class="string">&#x27;form&#x27;</span>: TopicSearchForm()&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_topic</span>(<span class="params">request</span>):</span><br><span class="line">    form = TopicSearchForm(request.GET)</span><br><span class="line">    <span class="keyword">if</span> form.is_valid():</span><br><span class="line">        topic_qs = Topic.objects.<span class="built_in">filter</span>(title__contains=form.cleaned_data[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;post/topic_list.html&#x27;</span>, context=&#123;<span class="string">&#x27;object_list&#x27;</span>: topic_qs&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;post/search_topic.html&#x27;</span>, context=&#123;<span class="string">&#x27;form&#x27;</span>: form&#125;)</span><br></pre></td></tr></table></figure><p>To render the <code>&#39;post/search_topic.html&#39;</code> template, we pass an instance of <code>TopicSearchForm()</code> as <code>form</code> in the context.</p><p>post&#x2F;search_topic.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/post/search_topic/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;search_topic&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250610172826188.png" alt="image-20250610172826188"></p><h2 id="ModelForm"><a href="#ModelForm" class="headerlink" title="ModelForm"></a>ModelForm</h2><p>Usually, we need to create our forms to fill models. Django takes this into account. Django give us a model form class, which can create a form according to the model. </p><ol><li><code>ModelForm</code> needs class Meta to set the necessary meta info. </li><li>You can use the <code>is_valid()</code> to validate the field and the <code>cleaned_data</code> to get the field.</li></ol><p>models.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Topic</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">255</span>, unique=<span class="literal">True</span>, help_text=<span class="string">u&#x27;话题标题&#x27;</span>)</span><br><span class="line">    content = models.TextField(help_text=<span class="string">u&#x27;话题内容&#x27;</span>)</span><br><span class="line">    is_online = models.BooleanField(default=<span class="literal">True</span>, help_text=<span class="string">u&#x27;话题是否在线&#x27;</span>)</span><br><span class="line">    user = models.ForeignKey(to=User, to_field=<span class="string">&#x27;id&#x27;</span>, on_delete=models.CASCADE, help_text=<span class="string">u&#x27;关联用户表&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%d: %s&#x27;</span> % (<span class="variable language_">self</span>.<span class="built_in">id</span>, <span class="variable language_">self</span>.title[<span class="number">0</span>:<span class="number">20</span>])</span><br></pre></td></tr></table></figure><p>forms.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TopicModelForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Topic   <span class="comment"># the name of model</span></span><br><span class="line">        exclude = (<span class="string">&#x27;is_online&#x27;</span>, <span class="string">&#x27;user&#x27;</span>)     <span class="comment"># exclude fields in the model</span></span><br></pre></td></tr></table></figure><p>views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">topic_model_form</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        topic = TopicModelForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> topic.is_valid():</span><br><span class="line">            topic = Topic.objects.create(title=topic.cleaned_data[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">                                         content=topic.cleaned_data[<span class="string">&#x27;content&#x27;</span>],</span><br><span class="line">                                         user=request.user)</span><br><span class="line">            <span class="keyword">return</span> topic_detail_view(request, topic.<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">&#x27;post/topic_model_form.html&#x27;</span>, context=&#123;<span class="string">&#x27;form&#x27;</span>: topic&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;post/topic_model_form.html&#x27;</span>,</span><br><span class="line">                      context=&#123;<span class="string">&#x27;form&#x27;</span>: TopicModelForm()&#125;)</span><br></pre></td></tr></table></figure><p>post&#x2F;urls.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;topic_model_form/&#x27;</span>, views.topic_model_form),</span><br></pre></td></tr></table></figure><p>Let’s check out how the Django work. </p><p>We enter the <code>http://127.0.0.1:8000/post/topic_model_form/</code> into the browser. </p><p>Browser generates a GET request to the server. </p><p>The <code>topic_model_form</code> view accepts the request and render it to <code>post/topic_model_form.html</code> with <code>TopicModelForm()</code>.</p><p>Now, we can see it in our browser.</p><p><img src="/./images/image-20250612084429719.png" alt="image-20250612084429719"></p><p>We write the Title and Content and click the submit button. Browser send a POST request to the server. </p><p>The <code>topic_model_form</code> view accepts the request, creates a <code>TopicModelForm</code> instance.</p><p>If the instance is valid, view create a new <code>Topic</code> object and return to the <code>topic_detail_view(request, topic.id)</code> function to show the Topic info. </p><p><img src="/./images/image-20250612085416912.png" alt="image-20250612085416912"></p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Tutorial</title>
      <link href="/2025/02/22/djangotutorial/djangotutorial/"/>
      <url>/2025/02/22/djangotutorial/djangotutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="What-you-have-to-know-before-you-get-started"><a href="#What-you-have-to-know-before-you-get-started" class="headerlink" title="What you have to know before you get started"></a>What you have to know before you get started</h1><p>The thing you have to know before learning it is how it works.</p><p>Suppose a server is running a Django app. Firstly, Django loads the <code>setting.py</code> file to initialize configurations like database connection. Then, Django opens a port 8000 by default, waiting for http requests. </p><p>Once a request comes in (for example,  when a user enters a URL in the browser), Django looks for the URL in the <code>urls.py</code> file. If it finds a match, the request is directed to a corresponding view method in <code>views.py</code>. After the method do something (for example, through the <code>models.py</code> interacting with database) and generates results, it renders the results to a template that concludes HTML files for user interaction.</p><p><img src="/./images/image-20250224195916727.png" alt="image-20250224195916727"></p><h1 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h1><ol><li><p>安装django</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install Django</span><br></pre></td></tr></table></figure></li><li><p>创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mikdir diangotutorial</span><br><span class="line">django-admin startproject mysite djangotutorial</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250222153127059.png"></p><ul><li><code>manage.py</code>: A command-line utility that lets you interact with this Django project in various ways.</li><li><code>mysite/__init__.py</code>: An empty file that tells Python that this directory should be considered a Python package.</li><li><code>mysite/settings.py</code>: Settings&#x2F;configuration for this Django project.</li><li><code>mysite/urls.py</code>: The URL declarations for this Django project; a “table of contents” of your Django-powered site.</li><li><code>mysite/asgi.py</code>: An entry-point for ASGI-compatible web servers to serve your project</li><li><code>mysite/wsgi.py</code>: An entry-point for WSGI-compatible web servers to serve your project.</li></ul></li><li><p>创建app</p><p>We’ll create our poll app inside the <code>djangotutorial</code> folder.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250222160115223.png" alt="image-20250222160115223"></p><p>Write the views in our app</p><figure class="highlight py"><figcaption><span>polls/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure><p>We can create <code>urls.py</code> and add urls in the  app. </p><figure class="highlight py"><figcaption><span>polls/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Configure the global URLconf in the <code>mysite</code> project to include the URLconf defined in apps.</p><figure class="highlight py"><figcaption><span>mysite/urls.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&quot;polls/&quot;</span>, include(<span class="string">&quot;polls.urls&quot;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The <code>path()</code>] function expects at least two arguments: <code>route</code> and <code>view</code>.</p><p>Now, go to <code>http://localhost:8000/polls/</code> and we can see what we have just written in our app <code>views.py</code> .</p></li></ol><h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><p>Note the <a href="https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.</p><p>By default, <a href="https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> contains the following apps, all of which come with Django:</p><ul><li><a href="https://docs.djangoproject.com/en/5.1/ref/contrib/admin/#module-django.contrib.admin"><code>django.contrib.admin</code></a> – The admin site. You’ll use it shortly.</li><li><a href="https://docs.djangoproject.com/en/5.1/topics/auth/#module-django.contrib.auth"><code>django.contrib.auth</code></a> – An authentication system.</li><li><a href="https://docs.djangoproject.com/en/5.1/ref/contrib/contenttypes/#module-django.contrib.contenttypes"><code>django.contrib.contenttypes</code></a> – A framework for content types.</li><li><a href="https://docs.djangoproject.com/en/5.1/topics/http/sessions/#module-django.contrib.sessions"><code>django.contrib.sessions</code></a> – A session framework.</li><li><a href="https://docs.djangoproject.com/en/5.1/ref/contrib/messages/#module-django.contrib.messages"><code>django.contrib.messages</code></a> – A messaging framework.</li><li><a href="https://docs.djangoproject.com/en/5.1/ref/contrib/staticfiles/#module-django.contrib.staticfiles"><code>django.contrib.staticfiles</code></a> – A framework for managing static files.</li></ul><p>Some of these applications make use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>The <a href="https://docs.djangoproject.com/en/5.1/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> command looks at the <a href="https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> setting and creates any necessary database tables according to the database settings in your <code>mysite/settings.py</code> file and the database migrations shipped with the app (we’ll cover those later). You’ll see a message for each migration it applies.</p><h2 id="Creating-models"><a href="#Creating-models" class="headerlink" title="Creating models"></a>Creating models</h2><p>In our poll app, we’ll create two models: <code>Question</code> and <code>Choice</code>. </p><p>A <code>Question</code> has a question and a publication date. A <code>Choice</code> has two fields: the text of the choice and a vote tally. Each <code>Choice</code> is associated with a <code>Question</code>.</p><p>These concepts are represented by Python classes. Edit the <code>polls/models.py</code> file so it looks like this:</p><figure class="highlight py"><figcaption><span>polls/models.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Here, each model is represented by a class that subclasses <a href="https://docs.djangoproject.com/en/5.1/ref/models/instances/#django.db.models.Model"><code>django.db.models.Model</code></a>. Each model has a number of class variables, each of which represents a database field in the model.</p><p>Finally, note a relationship is defined, using <a href="https://docs.djangoproject.com/en/5.1/ref/models/fields/#django.db.models.ForeignKey"><code>ForeignKey</code></a>. That tells Django each <code>Choice</code> is related to a single <code>Question</code>. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.</p><h2 id="Activating-models"><a href="#Activating-models" class="headerlink" title="Activating models"></a>Activating models</h2><p>To include the app in our project, we need to add a reference to its configuration class in the <a href="https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> setting. The <code>PollsConfig</code> class is in the <code>polls/apps.py</code> file, so its dotted path is <code>&#39;polls.apps.PollsConfig&#39;</code>.</p><p>Edit the <code>mysite/settings.py</code> file and add that dotted path to the <a href="https://docs.djangoproject.com/en/5.1/ref/settings/#std-setting-INSTALLED_APPS"><code>INSTALLED_APPS</code></a> setting. It’ll look like this:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;polls.apps.PollsConfig&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Now Django knows to include the <code>polls</code> app. Let’s run another command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br></pre></td></tr></table></figure><p>By running <code>makemigrations</code>, you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and that you’d like the changes to be stored as a <em>migration</em>.</p><p>You can read the migration for your new model if you like; it’s the file <code>polls/migrations/0001_initial.py</code>. Don’t worry, you’re not expected to read them every time Django makes one, but they’re designed to be human-editable in case you want to manually tweak how Django changes things.</p><p> first, let’s see what SQL that migration would run. The <a href="https://docs.djangoproject.com/en/5.1/ref/django-admin/#django-admin-sqlmigrate"><code>sqlmigrate</code></a> command takes migration names and returns their SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate polls 0001</span><br></pre></td></tr></table></figure><p>Now, run <a href="https://docs.djangoproject.com/en/5.1/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> again to create those model tables in your database:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>The <a href="https://docs.djangoproject.com/en/5.1/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> command takes all the migrations that haven’t been applied</p><h2 id="Sumary-of-model-changes"><a href="#Sumary-of-model-changes" class="headerlink" title="Sumary of model changes"></a>Sumary of model changes</h2><ul><li>Change your models (in <code>models.py</code>).</li><li>Run <a href="https://docs.djangoproject.com/en/5.1/ref/django-admin/#django-admin-makemigrations"><code>python manage.py makemigrations</code></a> to create migrations for those changes</li><li>Run <a href="https://docs.djangoproject.com/en/5.1/ref/django-admin/#django-admin-migrate"><code>python manage.py migrate</code></a> to apply those changes to the database.</li></ul><h1 id="Python-shell-API"><a href="#Python-shell-API" class="headerlink" title="Python shell API"></a>Python shell API</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from polls.models import Choice, Question  # Import the model classes we just wrote.</span><br><span class="line">from django.utils import timezone</span><br><span class="line"></span><br><span class="line"># Create a new Question.</span><br><span class="line">q = Question(question_text=&quot;What&#x27;s new?&quot;, pub_date=timezone.now())</span><br><span class="line">q.save()</span><br><span class="line"></span><br><span class="line"># Access model field values via Python attributes.</span><br><span class="line">&gt;&gt;&gt; q.question_text</span><br><span class="line">&quot;What&#x27;s new?&quot;</span><br><span class="line">&gt;&gt;&gt; q.pub_date</span><br><span class="line">datetime.datetime(2025, 2, 22, 12, 30, 23, 135334, tzinfo=datetime.timezone.utc)</span><br><span class="line"></span><br><span class="line"># Change values by changing the attributes, then calling save().</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>It’s important to add <a href="https://docs.djangoproject.com/en/5.1/ref/models/instances/#django.db.models.Model.__str__"><code>__str__()</code></a> methods to your models, not only for your own convenience when dealing with the interactive prompt, but also because objects’ representations are used throughout Django’s automatically-generated admin.</p><p>Let’s fix that by editing the <code>Question</code> model (in the <code>polls/models.py</code> file) and adding a <a href="https://docs.djangoproject.com/en/5.1/ref/models/instances/#django.db.models.Model.__str__"><code>__str__()</code></a> method to both <code>Question</code> and <code>Choice</code>:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.choice_text</span><br></pre></td></tr></table></figure><h1 id="Django-Admin"><a href="#Django-Admin" class="headerlink" title="Django Admin"></a>Django Admin</h1><p>First we’ll need to create a user who can login to the admin site. Run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>Let’s start the development server and explore it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>Now, open a web browser and go to “&#x2F;admin&#x2F;” on your local domain – e.g., <a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a>. You should see the admin’s login screen:</p><p><img src="/./images/image-20250222200128774.png" alt="image-20250222200128774"></p><p>You should see a few types of editable content: groups and users. They are provided by <a href="https://docs.djangoproject.com/en/5.1/topics/auth/#module-django.contrib.auth"><code>django.contrib.auth</code></a>, the authentication framework shipped by Django.</p><p>Only one more thing to do: we need to tell the admin that <code>Question</code> objects have an admin interface. To do this, open the <code>polls/admin.py</code> file, and edit it to look like this:</p><figure class="highlight py"><figcaption><span>polls/admin.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure><h1 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h1><p>In our poll application, we’ll have the following four views:</p><ul><li>Question “index” page – displays the latest few questions.</li><li>Question “detail” page – displays a question text, with no results but with a form to vote.</li><li>Question “results” page – displays results for a particular question.</li><li>Vote action – handles voting for a particular choice in a particular question.</li></ul><p>In Django, web pages and other content are delivered by views. Each view is represented by a Python function (or method, in the case of class-based views). Django will choose a view by examining the URL that’s requested (to be precise, the part of the URL after the domain name).</p><p>To get from a URL to a view, Django uses what are known as ‘URLconfs’. A URLconf maps URL patterns to views.</p><h2 id="Writing-more-views"><a href="#Writing-more-views" class="headerlink" title="Writing more views"></a>Writing more views</h2><p>Now let’s add a few more views to <code>polls/views.py</code>. </p><figure class="highlight py"><figcaption><span>polls/views.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure><p>Wire these new views into the <code>polls.urls</code> module by adding the following <a href="https://docs.djangoproject.com/en/5.1/ref/urls/#django.urls.path"><code>path()</code></a> calls:</p><figure class="highlight py"><figcaption><span>polls/urls</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Writing-views-that-actually-do-somthing"><a href="#Writing-views-that-actually-do-somthing" class="headerlink" title="Writing views that actually do somthing"></a>Writing views that actually do somthing</h2><p>Your view can read records from a database, or not. It can use a template system such as Django’s – or a third-party Python template system – or not. It can generate a PDF file, output XML, create a ZIP file on the fly, anything you want, using whatever Python libraries you want.</p><p>All Django wants is that <a href="https://docs.djangoproject.com/en/5.1/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a>. Or an exception.</p><p>There’s a problem here, though: the page’s design is hard-coded in the view. If you want to change the way the page looks, you’ll have to edit this Python code. So let’s use Django’s template system to separate the design from Python by creating a template that the view can use.</p><p>First, create a directory called <code>templates</code> in your <code>polls</code> directory. Django will look for templates in there.</p><p>Within the <code>templates</code> directory you have just created, create another directory called <code>polls</code>, and within that create a file called <code>index.html</code>. In other words, your template should be at <code>polls/templates/polls/index.html</code>.</p><p>Put the following code in that template:</p><figure class="highlight html"><figcaption><span>polls/templates/polls/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>Now let’s update our <code>index</code> view in <code>polls/views.py</code> to use the template:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&quot;-pub_date&quot;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&quot;latest_question_list&quot;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/index.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><p>The <a href="https://docs.djangoproject.com/en/5.1/topics/http/shortcuts/#django.shortcuts.render"><code>render()</code></a> function takes the request object as its first argument, a template name as its second argument and a dictionary as its optional third argument. It returns an <a href="https://docs.djangoproject.com/en/5.1/ref/request-response/#django.http.HttpResponse"><code>HttpResponse</code></a> object of the given template rendered with the given context</p><h2 id="Raising-a-404-error"><a href="#Raising-a-404-error" class="headerlink" title="Raising a 404 error"></a>Raising a 404 error</h2><p>The new concept here: The view raises the <a href="https://docs.djangoproject.com/en/5.1/topics/http/views/#django.http.Http404"><code>Http404</code></a> exception if a question with the requested ID doesn’t exist.</p><p>Given the context variable <code>question</code>, here’s what the <code>polls/detail.html</code> template might look like:</p><figure class="highlight py"><figcaption><span>polls/templates/pols/detail.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> choice <span class="keyword">in</span> question.choice_set.<span class="built_in">all</span> %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; choice.choice_text &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>It’s a very common idiom to use <a href="https://docs.djangoproject.com/en/5.1/ref/models/querysets/#django.db.models.query.QuerySet.get"><code>get()</code></a> and raise <a href="https://docs.djangoproject.com/en/5.1/topics/http/views/#django.http.Http404"><code>Http404</code></a> if the object doesn’t exist. Django provides a shortcut. Here’s the <code>detail()</code> view, rewritten:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;polls/detail.html&quot;</span>, &#123;<span class="string">&quot;question&quot;</span>: question&#125;)</span><br></pre></td></tr></table></figure><h2 id="Namespacing-URL-names"><a href="#Namespacing-URL-names" class="headerlink" title="Namespacing URL names"></a>Namespacing URL names</h2><p>For example, the <code>polls</code> app has a <code>detail</code> view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the <code>&#123;% url %&#125;</code> template tag?</p><p>The answer is to add namespaces to your  URLconf. In the <code>polls/urls.py</code> file, go ahead and add an <code>app_name</code> to set the application namespace:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&quot;polls&quot;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/&quot;</span>, views.detail, name=<span class="string">&quot;detail&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/results/&quot;</span>, views.results, name=<span class="string">&quot;results&quot;</span>),</span><br><span class="line">    path(<span class="string">&quot;&lt;int:question_id&gt;/vote/&quot;</span>, views.vote, name=<span class="string">&quot;vote&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Now change your <code>polls/index.html</code> template from:</p><p><code>polls/templates/polls/index.html</code><a href="https://docs.djangoproject.com/en/5.1/intro/tutorial03/#id13">¶</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>to point at the namespaced detail view:</p><p><code>polls/templates/polls/index.html</code><a href="https://docs.djangoproject.com/en/5.1/intro/tutorial03/#id14">¶</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;&gt;&#123;&#123; question.question_text &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mitmproxy App爬虫</title>
      <link href="/2025/02/18/mitmproxy-App%E7%88%AC%E8%99%AB/mitmproxy-App%E7%88%AC%E8%99%AB/"/>
      <url>/2025/02/18/mitmproxy-App%E7%88%AC%E8%99%AB/mitmproxy-App%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="安装什么内容？"><a href="#安装什么内容？" class="headerlink" title="安装什么内容？"></a>安装什么内容？</h1><p>首先让pc和手机连接同一个局域网，在pc上安装好mitmproxy并安装好证书后，还要在安卓手机的设置中心也安装好证书，并设置代理(通过ipconfig命令查看主机的ip地址，)</p><p>这样我们就可以在使用mitmproxy这个代理了。</p><h1 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h1><p>在terminal开启代理，指定为8888端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmproxy -p 8888</span><br></pre></td></tr></table></figure><p>或者我们可以用mitmdump可以对接python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump -s script.py -p 8888</span><br></pre></td></tr></table></figure><p>当手机连上代理后，</p><p>此时，手机上的request和response都被代理抓取了下来，</p>]]></content>
      
      
      
        <tags>
            
            <tag> scrape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次cookies免登录</title>
      <link href="/2025/02/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1cookies%E5%85%8D%E7%99%BB%E5%BD%95/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1cookies%E5%85%8D%E7%99%BB%E5%BD%95/"/>
      <url>/2025/02/18/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1cookies%E5%85%8D%E7%99%BB%E5%BD%95/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1cookies%E5%85%8D%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="cookies的作用"><a href="#cookies的作用" class="headerlink" title="cookies的作用"></a>cookies的作用</h1><p>cookies在我们浏览器的客户端，通过cookies我们可以把我们的个人标识信息传送到服务器端，而在服务器端正好有与我们cookies相对应的session包含个人信息（登录信息，偏好信息，等等）。当我们访问服务器时（每一个requests都带有cookies），服务器会response我们的个人信息。这样我们每一次访问同一个域名网站就不用一直填写登录信息了。</p><h1 id="爬虫中cookies的应用"><a href="#爬虫中cookies的应用" class="headerlink" title="爬虫中cookies的应用"></a>爬虫中cookies的应用</h1><p>在爬虫中，我们每发送一次request都要把cookies带上（<strong>之前就是忽略了某些request的cookies导致找了很久都不知道哪里错</strong>）</p><p>在浏览器的开发者选项中，我们都能找到我们的cookies，我们只需要复制他们，并改写成字典形式，便可以传递到request中。</p><p>原始cookies</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wordpress_test_cookie=WP%20Cookie%20check; wordpress_logged_in_cd91c8e0f11847685fbe197d3c8bac39=ferrychan666%7C1739979328%7CPT785uI3CFMFA2I7B4iywbXvGTyx2qMljuG8jdH1ZEz%7C40f9b061c64a95147466bcdca8929945c64d4a721b3ed42f5ad7fc047e4c19fe; wfwaf-authcookie-a39132d534d8d730bdc775d7d7fde163=4597%7Csubscriber%7Cread%7Cc1dc51fb9d929fb773458357df0e7ab4d79af397812768cee6b9570ed54760e0; wp-settings-4597=mfold%3Df; wp-settings-time-4597=1739806529</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;wordpress_test_cookie&quot;</span>: <span class="string">&quot;WP%20Cookie%20check&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wordpress_logged_in_cd91c8e0f11847685fbe197d3c8bac39&quot;</span>: <span class="string">&quot;ferrychan666%7C1739979328%7CPT785uI3CFMFA2I7B4iywbXvGTyx2qMljuG8jdH1ZEz%7C40f9b061c64a95147466bcdca8929945c64d4a721b3ed42f5ad7fc047e4c19fe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wfwaf-authcookie-a39132d534d8d730bdc775d7d7fde163&quot;</span>: <span class="string">&quot;4597%7Csubscriber%7Cread%7Cc1dc51fb9d929fb773458357df0e7ab4d79af397812768cee6b9570ed54760e0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wp-settings-4597&quot;</span>: <span class="string">&quot;mfold%3Df&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wp-settings-time-4597&quot;</span>: <span class="string">&quot;1739806529&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="variable language_">self</span>.max_page+<span class="number">1</span>):</span><br><span class="line">        url=<span class="variable language_">self</span>.start_url+<span class="string">f&#x27;/page/<span class="subst">&#123;page&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">yield</span> Request(url=url,</span><br><span class="line">                      headers=<span class="variable language_">self</span>.headers,</span><br><span class="line">                      callback=<span class="variable language_">self</span>.parse_index,</span><br><span class="line">                      cookies=<span class="variable language_">self</span>.cookies,</span><br><span class="line">                      meta=&#123;<span class="string">&#x27;page&#x27;</span>: page&#125;</span><br><span class="line">                      )</span><br></pre></td></tr></table></figure><p>记得之后的每一次回调request，都要加上cookies</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> Request(url=detail_url,callback=<span class="variable language_">self</span>.parse_detail,cookies=<span class="variable language_">self</span>.cookies, priority=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> Request(next_url,callback=<span class="variable language_">self</span>.parse_index, cookies=<span class="variable language_">self</span>.cookies, meta=&#123;<span class="string">&#x27;page&#x27;</span>: next_page&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> scrape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy</title>
      <link href="/2025/02/16/scrapy/scrapy/"/>
      <url>/2025/02/16/scrapy/scrapy/</url>
      
        <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>下面就是scrapy的大致框架图，我们先做一个案例再慢慢介绍</p><p><img src="/./images/scrapy.png" alt="scrapy"></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>确保scrapy项目要在根目录上运行，原因是：</p><p>Scrapy 项目通常是一个 <strong>Python 包</strong>，当你在 Scrapy 项目的根目录之外运行代码时，Python 可能无法正确找到 <code>scrapytutorial</code> 这个包，导致 <strong>无法解析 <code>scrapytutorial.items</code></strong>。这是因为 Python 的 <strong>模块搜索路径 (<code>sys.path</code>)</strong> 不包含 Scrapy 项目的根目录。</p><ol><li><p>创建scrapy项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapytutorial</span><br></pre></td></tr></table></figure><p><img src="/./images/image-20250216165325480.png"></p></li><li><p>创建spider</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd scrapytutorial</span><br><span class="line">scrapy genspider quotes quotes.toscrapy.com</span><br></pre></td></tr></table></figure><p>第一个参数<code>quotes</code>是spider的名称，在spider文件夹中多了一个<code>quotes.py</code></p><p>第二个参数<code>quotes.toscrapy.com</code>是网站的域名</p><figure class="highlight python"><figcaption><span>quotes.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuotesSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;quotes&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;quotes.toscrapy.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://quotes.toscrapy.com&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="爬取步骤"><a href="#爬取步骤" class="headerlink" title="爬取步骤"></a>爬取步骤</h1><ol><li><p>定义字段内容</p><p>Item是保存爬取数据的容器，我们可以把我们想要爬取的字段定义在item.py中，比如我们要定义text, author, tags字段</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QuotesItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    text = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    tags = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>解析response</p><p>在parse方法中，response作为参数，我们可以把返回的response的内容进行解析。并把结果保存在实例化的QuotesItem对象中</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapytutorial.items <span class="keyword">import</span> QuoteItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuotesSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;quotes&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;quotes.toscrapy.com&quot;</span>]</span><br><span class="line">    start_urls = [<span class="string">&quot;https://quotes.toscrapy.com&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># select all quoters</span></span><br><span class="line">        quotes = response.css(<span class="string">&#x27;.quote&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">            item = QuoteItem()</span><br><span class="line">            <span class="comment"># acquire the content of the text class</span></span><br><span class="line">            item[<span class="string">&#x27;text&#x27;</span>]=quote.css(<span class="string">&#x27;.text::text&#x27;</span>).extract_first()</span><br><span class="line">            item[<span class="string">&#x27;author&#x27;</span>]=quote.css(<span class="string">&#x27;.author::text&#x27;</span>).extract_first()</span><br><span class="line">            item[<span class="string">&#x27;tags&#x27;</span>]=quote.css(<span class="string">&#x27;.tags .tag::text&#x27;</span>).extract()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></li><li><p>抓取下一页</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># next page</span></span><br><span class="line"><span class="built_in">next</span>=quote.css(<span class="string">&#x27;.pager .next a::attr(href)&#x27;</span>).extract_first()</span><br><span class="line">url=response.urljoin(<span class="built_in">next</span>)</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url=url,callback=<span class="variable language_">self</span>.parse)</span><br></pre></td></tr></table></figure><p><strong><code>self.parse</code> 是 Scrapy 处理响应的默认回调函数</strong>，它会在 Scrapy 访问 <code>start_urls</code> 里的网址并获取响应后自动执行。</p><p> <strong>使用 <code>yield scrapy.Request(url, callback=self.parse)</code> 可以递归爬取多个页面</strong>，例如翻页爬取数据。</p></li></ol><h1 id="执行程序"><a href="#执行程序" class="headerlink" title="执行程序"></a>执行程序</h1><p>在命令行的项目根目录下运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes</span><br></pre></td></tr></table></figure><p>爬取数据并保存</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.json</span><br><span class="line">scrapy crawl quotes -o quotes.csv</span><br><span class="line">scrapy crawl quotes -o quotes.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Item-pipeline-py"><a href="#Item-pipeline-py" class="headerlink" title="Item pipeline.py"></a>Item pipeline.py</h1><p>当Item生成后，他会自动被送到 Item pipeline 处理，功能有：</p><ol><li>清洗html数据</li><li>验证爬取数据，检查爬取字段</li><li>查重并丢弃重复内容</li><li>将爬取结果存储到数据库</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># limit length : 50</span></span><br><span class="line">        <span class="variable language_">self</span>.limit=<span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># strip the long text and drop the NULL item</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&#x27;text&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(item[<span class="string">&#x27;text&#x27;</span>]) &gt; <span class="variable language_">self</span>.limit:</span><br><span class="line">                item[<span class="string">&#x27;text&#x27;</span>] = item[<span class="string">&#x27;text&#x27;</span>][<span class="number">0</span>:<span class="variable language_">self</span>.limit].rstrip()+<span class="string">&quot;...&quot;</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> DropItem(<span class="string">&quot;Missing text&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MongoDBPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, connection_string, database</span>):</span><br><span class="line">        <span class="variable language_">self</span>.connection_string = connection_string</span><br><span class="line">        <span class="variable language_">self</span>.database = database</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we can get info from setting.py by variable crawler</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            connection_string=crawler.settings.get(<span class="string">&#x27;MongoDB_CONNECTION_STRING&#x27;</span>),</span><br><span class="line">            database=crawler.settings.get(<span class="string">&#x27;MONGODB_DATABASE&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client = pymongo.MongoClient(<span class="variable language_">self</span>.connection_string)</span><br><span class="line">        <span class="variable language_">self</span>.db = <span class="variable language_">self</span>.client[<span class="variable language_">self</span>.database]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        name=item.__class__.__name__</span><br><span class="line">        <span class="variable language_">self</span>.db[name].insert_one(<span class="built_in">dict</span>(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="variable language_">self</span>.client.close()</span><br></pre></td></tr></table></figure><h1 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h1><p>定义ITEM_PIPELINES字典，和Mongo database的内容</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapytutorial.pipelines.TextPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">&#x27;scrapytutorial.pipelines.MongoDBPipeline&#x27;</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line">MONGODB_CONNECTION_STRING = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">MONGODB_DATABASE = <span class="string">&quot;scrapytutorial&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL 配置</span></span><br><span class="line">MYSQL_HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">MYSQL_PORT = <span class="number">3306</span></span><br><span class="line">MYSQL_DB = <span class="string">&#x27;smwl_db&#x27;</span></span><br><span class="line">MYSQL_USER = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">MYSQL_PASSWORD = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 延迟请求</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">2</span>  <span class="comment"># 每两个请求之间等 2 秒</span></span><br><span class="line">CONCURRENT_REQUESTS = <span class="number">2</span>  <span class="comment"># 最大并发请求数</span></span><br></pre></td></tr></table></figure><h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><h2 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h2><ol><li><p>选择所有标签为a的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.css(<span class="string">&#x27;a&#x27;</span>).extract()</span><br></pre></td></tr></table></figure></li><li><p>属性选择</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.css(<span class="string">&#x27;a[href=&quot;image1.html&quot;]&#x27;</span>).extract()</span><br></pre></td></tr></table></figure></li><li><p>嵌套选择</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.css(<span class="string">&#x27;a[href=&quot;image1.html&quot;] img&#x27;</span>).extract()</span><br></pre></td></tr></table></figure></li><li><p>文本获取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.css(<span class="string">&#x27;a[href=&quot;image1.html&quot;]::text&#x27;</span>).extract()</span><br></pre></td></tr></table></figure></li><li><p>属性获取</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.css(<span class="string">&#x27;a[href=&quot;image1.html&quot;] img::attr(src)&#x27;</span>).extract()</span><br></pre></td></tr></table></figure></li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>我们可以用css，xpath，和正则表达式一起使用，对html进行提取，但response对象不能直接使用re方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.xpath(<span class="string">&#x27;.&#x27;</span>).re(<span class="string">&#x27;(.*)&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Spider类"><a href="#Spider类" class="headerlink" title="Spider类"></a>Spider类</h1><h2 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h2><ul><li><p>name(必须，唯一)</p><p>爬虫的名字</p></li><li><p>allowed_domain(可选)</p><p>爬虫域名，不在范围的不会爬取</p></li><li><p>start_urls</p><p>起始url列表，但没有start_requests方法时，默认从这个列表开始爬取</p></li><li><p>crawler</p><p>此属性是由from_crawler方法设置的，代表的是本Spider类对应的Crawler对象， Crawler对象中包含了很多项目组件，利用它我们可以获取项目的一些配置信息，常见的就是获取项目的设置信息，即Settings。</p></li><li><p>settings</p><p>一个Settings对象，利用它我们可以直接获取项目的全局设置变量。</p></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>当我们设置<code>start_urls</code>的时候，Spider就会默认实习一个<code>start_requests()</code>方法</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.start_urls:</span><br><span class="line">        <span class="keyword">yield</span> Request(url, dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>读取start_urls并生成Request()。这里并没有为Request指定callback**（callback就是收到response后要传到哪个方法）**，默认就是parse方法。它是一个生成器，返回的所有Request都会作为初始Request加人调度队列。</p><p>因此，如果我们想要自定义初始请求，就可以在Spider中重写start_requests方法，比如我们想自定义请求页面链接和回调方法，可以把start_requests方法修改为下面这样：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HttpbinSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;httpbin&#x27;</span></span><br><span class="line">    allowed domains = [<span class="string">&#x27;www.httpbin.org&#x27;</span>]</span><br><span class="line">    start_url = <span class="string">&#x27;https://www.httpbin.org/get&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cookies = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;germey&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;26&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span> requests(<span class="variable language_">self</span>):</span><br><span class="line">        <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            url = <span class="variable language_">self</span>.start url + <span class="string">f&#x27;?offset=<span class="subst">&#123;offset&#125;</span>&#x27;</span></span><br><span class="line">            <span class="keyword">yield</span> Request(url, headers=<span class="variable language_">self</span>.headers</span><br><span class="line">            cookies=<span class="variable language_">self</span>.cookies,</span><br><span class="line">            callback=<span class="variable language_">self</span>.parse response,</span><br><span class="line">            meta=&#123;<span class="string">&#x27;offset&#x27;</span>: offset&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_response</span>(<span class="params">self, response</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;url&#x27;</span>, response.url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;request&#x27;</span>, response.request)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;status&#x27;</span>, response.status)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;headers&#x27;</span>, response.headers)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;text&#x27;</span>, response.text)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;meta&#x27;</span>, response.meta)</span><br></pre></td></tr></table></figure><ul><li>url：我们不再依赖starturls生成url，而是声明了一个starturl，然后利用循环给URL加<br>上了Query参数，如offset&#x3D;0，拼接到<a href="https://www.httpbin.org/get%E5%90%8E%E9%9D%A2%EF%BC%8C%E8%BF%99%E6%A0%B7%E8%AF%B7%E6%B1%82%E7%9A%84%E9%93%BE%E6%8E%A5%E5%B0%B1%E5%8F%98">https://www.httpbin.org/get后面，这样请求的链接就变</a><br>成了<a href="https://www.httpbin.org/get?offset=0%E3%80%82">https://www.httpbin.org/get?offset=0。</a></li><li>headers：这里我们还声明了headers变量，为它添加了User-Agent属性并将其传递给Request<br>的headers参数进行赋值</li><li>cookies：另外我们还声明了Cookie，以一个字典的形式声明，然后传给Request的cookies参数</li><li>callback：在HttpbinSpider中，我们声明了一个parse_response方法，同时我们也将Request的<br>callback参数设置为parse_response，这样当该Request请求成功时就会回调parseresponse方<br>法进行处理</li><li>meta：meta可以用来传递额外参数，这里我们将offset的值也赋值给Request，通过response.meta<br>就能获取这个内容了，这样就实现了Request到Response的额外信息传递</li></ul><h1 id="Downloader-Middleware"><a href="#Downloader-Middleware" class="headerlink" title="Downloader Middleware"></a>Downloader Middleware</h1><p><img src="/./images/scrapy.png"></p><p>据框架图可知Downloader Middleware是第一次requests和response共同经过的道路，所以我们可以通过它来实现对requests和response的修改</p><h2 id="修改requests"><a href="#修改requests" class="headerlink" title="修改requests"></a>修改requests</h2><p>由于反爬程序会检测request里的headers里的User-Agent，所以我们需要对此进行修改，有两种方法</p><ol><li><p>直接在<code>settings.py</code>中添加上User-Agent</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent=<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:135.0) Gecko/20100101 Firefox/135.0&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>用Downloader Middleware设置随机User-Agent</p><p>在middlewares.py中添加<code>RandomUserAgentMiddleware</code>类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomUserAgentMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="variable language_">self</span>.useragents=[</span><br><span class="line"><span class="string">&#x27;Mozilla/5.0(Windows;U;MSIE9.0;WindowsNT9.0;en-US)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Mozilla/5.0(Windows NT 6.1)AppleWebKit/537.2(KHTML,1ike Gecko)Chrome/22.0.1216.0&#x27;</span></span><br><span class="line">Safari/<span class="number">537.2</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">&#x27;</span>Mozilla/<span class="number">5.0</span>(X11;Ubuntu;Linux i686;rv:<span class="number">15.0</span>)Gecko/<span class="number">20100</span>101Firefox/<span class="number">15.0</span><span class="number">.1</span><span class="string">&#x27;]</span></span><br><span class="line"><span class="string">def process_request(self，request，spider):</span></span><br><span class="line"><span class="string">request.headers[&#x27;</span>User-Agent<span class="string">&#x27;]=random.choice(self.useragents)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>在settings.py中，</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES=&#123;</span><br><span class="line"><span class="string">&quot;scrapydownloadermiddlewaredemo.middlewares.RandomUserAgentMiddleware&#x27;:543,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>利用Downloader Middleware设置代理</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyMiddleware</span>(<span class="title class_ inherited__">object</span>)：</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self,request,spider</span>):</span><br><span class="line">    request.meta[proxy<span class="string">&#x27;]=&quot;http://203.184.132.103:7890&quot;</span></span><br><span class="line"><span class="string">             </span></span><br><span class="line"><span class="string">DOWNLOADERMIDDLEWARES=&#123;</span></span><br><span class="line"><span class="string">&quot;scrapydownloadermiddlewaredemo.middlewares.RandomUserAgentMiddleware&#x27;</span>:<span class="number">543</span>,</span><br><span class="line"><span class="string">&#x27;scrapydownloadermiddlewaredemo.middlewares.ProxyMiddleware&#x27;</span>:<span class="number">544</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="Spider-Middleware"><a href="#Spider-Middleware" class="headerlink" title="Spider Middleware"></a>Spider Middleware</h1>]]></content>
      
      
      
        <tags>
            
            <tag> scrape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在终端中配置代理</title>
      <link href="/2025/02/15/%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2025/02/15/%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="使用什么端口号？"><a href="#使用什么端口号？" class="headerlink" title="使用什么端口号？"></a>使用什么端口号？</h1><p>当我们用代理软件之后，傻傻搞不清楚什么时候要用那个端口号，我们先说结论：</p><ul><li><p><strong>如果是在浏览器、终端、Python 代码</strong> → <strong>用本地 <code>127.0.0.1:7890</code>（Mixed Port）</strong></p></li><li><p><strong>如果是在 Clash&#x2F;V2Ray 里配置远程代理</strong> → <strong>用远程 <code>123.45.67.89:443</code>（代理服务器端口）</strong></p></li></ul><h1 id="为什么会这样呢？"><a href="#为什么会这样呢？" class="headerlink" title="为什么会这样呢？"></a>为什么会这样呢？</h1><p><strong>本地软件（浏览器、终端、Python 代码等）</strong> 只需要和 <strong>本地代理（Clash&#x2F;V2Ray）</strong> 通信，而不需要直接访问远程代理服务器。</p><p>Clash&#x2F;V2Ray 会在本地开启一个 <strong>Mixed Port</strong>（如 <code>127.0.0.1:7890</code>），这个端口会：<br>✅ <strong>接收 HTTP&#x2F;SOCKS5 代理请求</strong>（浏览器、Python 代码等）<br>✅ <strong>自动选择最佳的远程代理服务器</strong><br>✅ <strong>处理数据加密、分流等复杂逻辑</strong></p><h1 id="终端配置代理方法"><a href="#终端配置代理方法" class="headerlink" title="终端配置代理方法"></a>终端配置代理方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:10808(v2ray提供给本地的mixed port)</span><br><span class="line">set https_proxy=http://127.0.0.1:10808</span><br></pre></td></tr></table></figure><p>检查是否成功(用curl不用ping的原因的ping不走http协议)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://google.com</span><br></pre></td></tr></table></figure><p>删除恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=</span><br><span class="line">set https_proxy=</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript反爬虫原理</title>
      <link href="/2025/02/15/scrape/JavaScript%E5%8F%8D%E7%88%AC%E8%99%AB%E5%8E%9F%E7%90%86/"/>
      <url>/2025/02/15/scrape/JavaScript%E5%8F%8D%E7%88%AC%E8%99%AB%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="css和JS修改浏览器的DOM"><a href="#css和JS修改浏览器的DOM" class="headerlink" title="css和JS修改浏览器的DOM"></a>css和JS修改浏览器的DOM</h1><p>在我们可以浏览到的网页中，他们设置的反爬虫机制就是通过css和js修改原本html文件中的标签内容（把数据内容放到js中），使得我们无法直接从html文件中获得我们想要的数据。<strong>也就是利用了我们平常的爬虫工具中没有js解释器和css解释器这一个弊端达到了反爬的效果</strong></p><p><img src="/./images/image-20250206174331917.png" alt="image-20250206174331917"></p><p>而这个dom就是经浏览器渲染之后的标签。虽然css和js是不能修改html文件中的标签，但能修改dom。</p><p><img src="/./images/image-20250206174729047.png" alt="image-20250206174729047"></p>]]></content>
      
      
      
        <tags>
            
            <tag> scrape </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python comprehensions</title>
      <link href="/2023/03/27/Python/python%20comprehensions/"/>
      <url>/2023/03/27/Python/python%20comprehensions/</url>
      
        <content type="html"><![CDATA[<h1 id="List-Comprehension"><a href="#List-Comprehension" class="headerlink" title="List Comprehension"></a>List Comprehension</h1><p>List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.</p><h2 id="The-Syntax"><a href="#The-Syntax" class="headerlink" title="The Syntax"></a>The Syntax</h2><p>newlist &#x3D; [<em>expression</em> for <em>item</em> in <em>iterable</em> if <em>condition</em> &#x3D;&#x3D; True]</p><p>The return value is a new list, leaving the old list unchanged.</p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>The <em>condition</em> is like a filter that only accepts the items that valuate to <code>True</code>.</p><h3 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h3><p>The <em>iterable</em> can be any iterable object, like a list, tuple, set etc.</p><h3 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h3><p>The <em>expression</em> is the current item in the iteration, but it is also the outcome</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Based on a list of fruits, you want a new list, containing only the fruits with the letter “a” in the name.</p><p>Without list comprehension you will have to write a <code>for</code> statement with a conditional test inside:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fruits=[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;cherry&quot;</span>,<span class="string">&quot;kiwi&quot;</span>,<span class="string">&quot;mango&quot;</span>]</span><br><span class="line">newlist1=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> x:</span><br><span class="line">        newlist1.append(x)</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(newlist1)</span><br></pre></td></tr></table></figure><h2 id="Two-dimensional-array"><a href="#Two-dimensional-array" class="headerlink" title="Two-dimensional array"></a>Two-dimensional array</h2><p>Before that we should create one-dimensional array firstly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr1=[<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr2=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="comment"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>Now, we can create two-dimensional arrays based on one-dimensional arrays. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1=[[<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line">arr2=[[x+(i*<span class="number">10</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"><span class="comment"># [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]</span></span><br><span class="line"><span class="comment"># [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed to connect to github.com port 443 after 21193 ms: Timed out</title>
      <link href="/2023/03/20/git/Failed-to-connect-to-github-com-port-443-after-21193-ms-Timed-out/"/>
      <url>/2023/03/20/git/Failed-to-connect-to-github-com-port-443-after-21193-ms-Timed-out/</url>
      
        <content type="html"><![CDATA[<p>这种连接不上github的问题也不是第一次见了，一直被这种问题困扰。</p><p>解决方法：</p><p>修改DNS: <code>114.114.114.114</code> or 其他</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter</title>
      <link href="/2023/03/17/Python/Tkinter/"/>
      <url>/2023/03/17/Python/Tkinter/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The foundational element of a Tkinter GUI is the <strong>window</strong>. Windows are the containers in which all other GUI elements live. These other GUI elements, such as text boxes, labels, and buttons, are known as <strong>widgets</strong>.</p><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>The first thing you need to do is import the Python GUI Tkinter module:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br></pre></td></tr></table></figure><p>A <strong>window</strong> is an instance of Tkinter’s <code>Tk</code> class. Go ahead and create a new window and assign it to the variable <code>window</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window = tk.Tk()</span><br></pre></td></tr></table></figure><h2 id="widgets"><a href="#widgets" class="headerlink" title="widgets"></a>widgets</h2><p>Use the <code>tk.Label</code> class to add some text to a window. Create a <code>Label</code> widget with the text <code>&quot;Hello, Tkinter&quot;</code> and assign it to a variable called <code>greeting</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greeting = tk.Label(text=<span class="string">&quot;Hello, Tkinter&quot;</span>)</span><br></pre></td></tr></table></figure><p>The window you created earlier doesn’t change. You just created a <code>Label</code> widget, but you haven’t added it to the window yet. There are several ways to add widgets to a window. Right now, you can use the <code>Label</code> widget’s <code>.pack()</code> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greeting.pack()</span><br></pre></td></tr></table></figure><p><code>window.mainloop()</code> tells Python to run the Tkinter <strong>event loop</strong>. This method listens for events, such as button clicks or keypresses, and blocks any code that comes after it from running until you close the window where you called the method. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><h1 id="Working-With-Widgets"><a href="#Working-With-Widgets" class="headerlink" title="Working With Widgets"></a>Working With Widgets</h1><p>Each <strong>widget</strong> in Tkinter is defined by a class. </p><table><thead><tr><th>Widget Class</th><th>Description</th></tr></thead><tbody><tr><td><code>Label</code></td><td>A widget used to <strong>display text</strong> on the screen</td></tr><tr><td><code>Button</code></td><td>A button that can contain text and can perform an action when clicked</td></tr><tr><td><code>Entry</code></td><td>A text entry widget that allows only a single line of text</td></tr><tr><td><code>Text</code></td><td>A text entry widget that allows multiline text entry</td></tr><tr><td><code>Frame</code></td><td>A rectangular region used to group related widgets or provide padding between widgets</td></tr></tbody></table><h2 id="Label-Widgets"><a href="#Label-Widgets" class="headerlink" title="Label Widgets"></a><code>Label</code> Widgets</h2><p><strong><code>Label</code></strong> widgets are used to display <strong>text</strong> or <strong>images</strong>. The text displayed by a <code>Label</code> widget can’t be edited by the user.</p><h2 id="Button-Widgets"><a href="#Button-Widgets" class="headerlink" title="Button Widgets"></a><code>Button</code> Widgets</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">button = tk.Button(</span><br><span class="line">    text=<span class="string">&quot;Click me!&quot;</span>,</span><br><span class="line">    width=<span class="number">25</span>,</span><br><span class="line">    height=<span class="number">5</span>,</span><br><span class="line">    bg=<span class="string">&quot;blue&quot;</span>,</span><br><span class="line">    fg=<span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Entry-Widgets"><a href="#Entry-Widgets" class="headerlink" title="Entry Widgets"></a><code>Entry</code> Widgets</h2><p> It’ll display a <strong>small text box</strong> that the user can type some text into.</p><p>There are three main operations that you can perform with <code>Entry</code> widgets:</p><ol><li><strong>Retrieving text</strong> with <code>.get()</code></li><li><strong>Deleting text</strong> with <code>.delete()</code></li><li><strong>Inserting text</strong> with <code>.insert()</code></li></ol><h2 id="Getting-Multiline-User-Input-With-Text-Widgets"><a href="#Getting-Multiline-User-Input-With-Text-Widgets" class="headerlink" title="Getting Multiline User Input With Text Widgets"></a>Getting Multiline User Input With <code>Text</code> Widgets</h2><h2 id="Assigning-Widgets-to-Frames-With-Frame-Widgets"><a href="#Assigning-Widgets-to-Frames-With-Frame-Widgets" class="headerlink" title="Assigning Widgets to Frames With Frame Widgets"></a>Assigning Widgets to Frames With <code>Frame</code> Widgets</h2><p>The following script creates a blank <code>Frame</code> widget and assigns it to the main application window:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">frame = tk.Frame()</span><br><span class="line">frame.pack()</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>An empty <code>Frame</code> widget is practically invisible. Frames are best thought of as <strong>containers</strong> for other widgets. You can assign a widget to a frame by setting the widget’s <code>master</code> attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">frame_a = tk.Frame()</span><br><span class="line">label_a=tk.Label(master=frame_a,text=<span class="string">&quot;I&#x27;m in Frame A&quot;</span>)</span><br><span class="line">label_a.pack()</span><br><span class="line"></span><br><span class="line">frame_b=tk.Frame()</span><br><span class="line">label_b=tk.Label(master=frame_b,text=<span class="string">&quot;I&#x27;m in Frame B&quot;</span>)</span><br><span class="line">label_b.pack()</span><br><span class="line"></span><br><span class="line">frame_a.pack()</span><br><span class="line">frame_b.pack()</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://files.realpython.com/media/17_5_tk_two_frames_win10.457151c8c834.jpg"></p><p>Now see what happens when you swap the order of <code>frame_a.pack()</code> and <code>frame_b.pack()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Swap the order of `frame_a` and `frame_b`</span></span><br><span class="line">frame_b.pack()</span><br><span class="line">frame_a.pack()</span><br></pre></td></tr></table></figure><p><img src="https://files.realpython.com/media/17_5_tk_two_frames_swapped_win10.d9fb1d7ddc83.jpg"></p><p>Now <code>label_b</code> is on top. Since <code>label_b</code> is assigned to <code>frame_b</code>, it moves to wherever <code>frame_b</code> is positioned.</p><h1 id="Making-Your-Applications-Interactive"><a href="#Making-Your-Applications-Interactive" class="headerlink" title="Making Your Applications Interactive"></a>Making Your Applications Interactive</h1><p>In this section, you’ll learn how to bring your applications to life by performing actions whenever certain <strong>events</strong> occur.</p><h2 id="Using-Events-and-Event-Handlers"><a href="#Using-Events-and-Event-Handlers" class="headerlink" title="Using Events and Event Handlers"></a>Using Events and Event Handlers</h2><p>When you create a Tkinter application, you must call <code>window.mainloop()</code> to start the <strong>event loop</strong>. During the event loop, your application checks if an event has occurred. If so, then it’ll execute some code in response.</p><h2 id="Using-bind"><a href="#Using-bind" class="headerlink" title="Using .bind()"></a>Using <code>.bind()</code></h2><p>To call an event handler whenever an event occurs on a widget, use <code>.bind()</code>. The event handler is said to be <strong>bound</strong> to the event because it’s called every time the event occurs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_keypress</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the character associated to the key pressed&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(event.char)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind keypress event to handle_keypress()</span></span><br><span class="line">window.bind(<span class="string">&quot;&lt;Key&gt;&quot;</span>, handle_keypress)</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p>Here, the <code>handle_keypress()</code> event handler is bound to a <code>&quot;&lt;Key&gt;&quot;</code> event using <code>window.bind()</code>. Whenever a key is pressed while the application is running, your program will print the character of the key pressed.</p><p><code>.bind()</code> always takes at least two arguments:</p><ol><li>An <strong>event</strong> that’s represented by a string of the form <code>&quot;&lt;event_name&gt;&quot;</code>, where <code>event_name</code> can be any of Tkinter’s events</li><li>An <strong>event handler</strong> that’s the name of the function to be called whenever the event occurs</li></ol><h2 id="Using-command"><a href="#Using-command" class="headerlink" title="Using command"></a>Using <code>command</code></h2><p>Every <code>Button</code> widget has a <code>command</code> attribute that you can assign to a function. Whenever the button is pressed, the function is executed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window=tk.Tk()</span><br><span class="line"></span><br><span class="line">window.rowconfigure(<span class="number">0</span>, minsize=<span class="number">50</span>, weight=<span class="number">1</span>)</span><br><span class="line">window.columnconfigure([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], minsize=<span class="number">50</span>, weight=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">btn_decrease = tk.Button(master=window, text=<span class="string">&quot;-&quot;</span>)</span><br><span class="line">btn_decrease.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=<span class="string">&quot;nsew&quot;</span>)</span><br><span class="line"></span><br><span class="line">lbl_value = tk.Label(master=window, text=<span class="string">&quot;0&quot;</span>)</span><br><span class="line">lbl_value.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">btn_increase = tk.Button(master=window, text=<span class="string">&quot;+&quot;</span>)</span><br><span class="line">btn_increase.grid(row=<span class="number">0</span>, column=<span class="number">2</span>, sticky=<span class="string">&quot;nsew&quot;</span>)</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><code>Label</code> widgets don’t have <code>.get()</code> like <code>Entry</code> and <code>Text</code> widgets do. However, you can retrieve the text from the label by accessing the <code>text</code> attribute with a dictionary-style subscript notation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increase</span>():</span><br><span class="line">    value=<span class="built_in">int</span>(lbl_value[<span class="string">&quot;text&quot;</span>])</span><br><span class="line">    lbl_value[<span class="string">&quot;text&quot;</span>]=<span class="string">f&quot;<span class="subst">&#123;value+<span class="number">1</span>&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrease</span>():</span><br><span class="line">    value=<span class="built_in">int</span>(lbl_value[<span class="string">&quot;text&quot;</span>])</span><br><span class="line">    lbl_value[<span class="string">&quot;text&quot;</span>]=<span class="string">f&quot;<span class="subst">&#123;value-<span class="number">1</span>&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">btn_decrease = tk.Button(master=window, text=<span class="string">&quot;-&quot;</span>, command=decrease)</span><br><span class="line">btn_increase = tk.Button(master=window, text=<span class="string">&quot;+&quot;</span>, command=increase)</span><br></pre></td></tr></table></figure><p>So we create two functions to increase or decrease the number when the “-“ button or “+” button is clicked. </p><h1 id="Controlling-Layout-With-Geometry-Managers"><a href="#Controlling-Layout-With-Geometry-Managers" class="headerlink" title="Controlling Layout With Geometry Managers"></a>Controlling Layout With Geometry Managers</h1><p>Application layout in Tkinter is controlled with <strong>geometry managers</strong>. While <code>.pack()</code> is an example of a geometry manager, it isn’t the only one. Tkinter has two others:</p><ul><li><code>.place()</code></li><li><code>.grid()</code></li></ul><h2 id="The-pack-Geometry-Manager"><a href="#The-pack-Geometry-Manager" class="headerlink" title="The .pack() Geometry Manager"></a>The <code>.pack()</code> Geometry Manager</h2><p> For a given widget, the packing algorithm has two primary steps:</p><ol><li>Compute a rectangular area called a <strong>parcel</strong> that’s just tall (or wide) enough to hold the widget and fills the remaining width (or height) in the window with blank space.</li><li>Center the widget in the parcel unless a different location is specified.</li></ol><p><code>.pack()</code> is powerful, but it can be difficult to visualize. The best way to get a feel for <code>.pack()</code> is to look at some examples. See what happens when you <code>.pack()</code> three <code>Label</code> widgets into a <code>Frame</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line"></span><br><span class="line">frame1 = tk.Frame(master=window, width=<span class="number">100</span>, height=<span class="number">100</span>, bg=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">frame1.pack()</span><br><span class="line"></span><br><span class="line">frame2 = tk.Frame(master=window, width=<span class="number">50</span>, height=<span class="number">50</span>, bg=<span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">frame2.pack()</span><br><span class="line"></span><br><span class="line">frame3 = tk.Frame(master=window, width=<span class="number">25</span>, height=<span class="number">25</span>, bg=<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">frame3.pack()</span><br><span class="line"></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><code>.pack()</code> places each <code>Frame</code> below the previous one by default, in the order that they’re assigned to the window:</p><p><img src="https://i.imgur.com/bWYFeGT.png"></p><p>There are three invisible parcels, each containing one of the three <code>Frame</code> widgets. Each parcel is as wide as the window and as tall as the <code>Frame</code> that it contains.</p><h2 id="The-place-Geometry-Manager"><a href="#The-place-Geometry-Manager" class="headerlink" title="The .place() Geometry Manager"></a>The <code>.place()</code> Geometry Manager</h2><p>You can use <code>.place()</code> to control the <strong>precise location</strong> that a widget should occupy in a window or <code>Frame</code>. You must provide two keyword arguments, <code>x</code> and <code>y</code>, which specify the x- and y-coordinates for the top-left corner of the widget.</p><p>Both <code>x</code> and <code>y</code> are measured in pixels, not text units.</p><p>Keep in mind that the <strong>origin</strong>, where <code>x</code> and <code>y</code> are both <code>0</code>, is the top-left corner of the <code>Frame</code> or window. So, you can think of the <code>y</code> argument of <code>.place()</code> as the number of pixels from the top of the window, and the <code>x</code> argument as the number of pixels from the left edge of the window.</p><p>Here’s an example of how the <code>.place()</code> geometry manager works:</p><h2 id="The-grid-Geometry-Manager"><a href="#The-grid-Geometry-Manager" class="headerlink" title="The .grid() Geometry Manager"></a>The <code>.grid()</code> Geometry Manager</h2><p><code>.grid()</code> works by splitting a window or <code>Frame</code> into rows and columns. You specify the location of a widget by calling <code>.grid()</code> and passing the row and column indices to the <code>row</code> and <code>column</code> keyword arguments, respectively.</p><p>Both row and column indices start at <code>0</code>, so a row index of <code>1</code> and a column index of <code>2</code> tells <code>.grid()</code> to place a widget in the third column of the second row.</p><h1 id="Loading-Images-in-Tkinter-using-PIL"><a href="#Loading-Images-in-Tkinter-using-PIL" class="headerlink" title="Loading Images in Tkinter using PIL"></a>Loading Images in Tkinter using PIL</h1><p><strong>Use this command to install PIL :</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># loading Python Imaging Library</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageTk, Image</span><br></pre></td></tr></table></figure><p>The ImageTk module contains support to create and modify Tkinter BitmapImage and PhotoImage objects from PIL images</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic syntax</title>
      <link href="/2023/02/16/cpp/Basic%20syntax/"/>
      <url>/2023/02/16/cpp/Basic%20syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="User-Input-Strings"><a href="#User-Input-Strings" class="headerlink" title="User Input Strings"></a>User Input Strings</h2><p><code>cin</code> considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string fullName;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Type your full name: &quot;</span>;</span><br><span class="line">cin &gt;&gt; fullName;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Your name is: &quot;</span> &lt;&lt; fullName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type your full name: John Doe</span></span><br><span class="line"><span class="comment">// Your name is: John</span></span><br></pre></td></tr></table></figure><p>That’s why, when working with strings, we often use the <code>getline()</code> function to read a line of text. It takes <code>cin</code> as the first parameter, and the string variable as second:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string fullName;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Type your full name: &quot;</span>;</span><br><span class="line"><span class="built_in">getline</span> (cin, fullName);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Your name is: &quot;</span> &lt;&lt; fullName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type your full name: John Doe</span></span><br><span class="line"><span class="comment">// Your name is: John Doe</span></span><br></pre></td></tr></table></figure><h2 id="Omitting-Namespace"><a href="#Omitting-Namespace" class="headerlink" title="Omitting Namespace"></a>Omitting Namespace</h2><p>You might see some C++ programs that runs without the standard namespace library. The <code>using namespace std</code> line can be omitted and replaced with the <code>std</code> keyword, followed by the <code>::</code> operator for <code>string</code> (and <code>cout</code>) objects:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::string greeting = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">  std::cout &lt;&lt; greeting;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C风格"><a href="#C风格" class="headerlink" title="C风格"></a>C风格</h2><p>对于C风格的字符串，我们只用它进行输入，输出。</p><p>它本质是一个字符数组，以<code>\0</code>作为结束的标志</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br></pre></td></tr></table></figure><p>%s只能读取一个单词</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fgets</span>(str,<span class="number">100</span>,stdin);<span class="comment">//读取一整行，包括\n</span></span><br></pre></td></tr></table></figure><p>fgets()读取一整行，包括<code>\n</code></p><p>我们可以这样来读入不定数量的行，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">fgets</span>(buf,<span class="number">200</span>,stdin) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        string str=buf;</span><br><span class="line">        <span class="comment">//干掉换行</span></span><br><span class="line">        str.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf) != EOF)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-风格"><a href="#C-风格" class="headerlink" title="C++风格"></a>C++风格</h2><p>下面的C++风格的字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure><p>把字符串从c风格转换成c++风格：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string str1=str;</span><br></pre></td></tr></table></figure><p>把字符串从c++风格转换成c风格：str1.c_str()——&gt;printf()</p><p>连接：str1+”wrold”</p><p>删除：str1.erase(下标)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str<span class="number">1.</span><span class="built_in">erase</span>(str<span class="number">1.l</span>ength()<span class="number">-1</span>);<span class="comment">//把fget的最后一个元素\n干掉</span></span><br></pre></td></tr></table></figure><p>清空：str1.clear()</p><p>访问字符：str1[0]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str<span class="number">1.l</span>ength();i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//迭代器（指针）</span></span><br><span class="line"><span class="keyword">for</span>(string::iterator it=str<span class="number">1.</span><span class="built_in">begin</span>(); it!=str<span class="number">1.</span><span class="built_in">end</span>();it++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长度：str1.length()</p><p>判断相等：str1&#x3D;&#x3D;”hello”</p><p>比较字典序：str1&gt;”abandon”</p><p>查找子串：find()，找到返回子串起点下标，没有找到返回<code>string::npos</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;howareyou&quot;</span>;</span><br><span class="line"><span class="type">int</span> pos=str.<span class="built_in">find</span>(<span class="string">&quot;are&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(pos!=string::npos)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Found, position=%d\n&quot;</span>,pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切割字符串</p><p>substr(起始下标，子字符串长度)</p><p>substr(起始下标)，表示从起始下标到最后一个字符</p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/c6ca566fa3984fae916e6d7beae8ea7f">https://www.nowcoder.com/questionTerminal/c6ca566fa3984fae916e6d7beae8ea7f</a><br>来源：牛客网</p><p>哈利波特在魔法学校的必修课之一就是学习魔咒。据说魔法世界有100000种不同的魔咒，哈利很难全部记住，但是为了对抗强敌，他必须在危急时刻能够调用任何一个需要的魔咒，所以他需要你的帮助。   给你一部魔咒词典。当哈利听到一个魔咒时，你的程序必须告诉他那个魔咒的功能；当哈利需要某个功能但不知道该用什么魔咒时，你的程序要替他找到相应的魔咒。如果他要的魔咒不在词典中，就输出“what?”                                        </p><p><strong>输入描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先列出词典中不超过100000条不同的魔咒词条，每条格式为：</span><br><span class="line"></span><br><span class="line">[魔咒] 对应功能</span><br><span class="line"></span><br><span class="line">其中“魔咒”和“对应功能”分别为长度不超过20和80的字符串，字符串中保证不包含字符“[”和“]”，且“]”和后面的字符串之间有且仅有一个空格。词典最后一行以“@END@”结束，这一行不属于词典中的词条。</span><br><span class="line">词典之后的一行包含正整数N（&lt;=1000），随后是N个测试用例。每个测试用例占一行，或者给出“[魔咒]”，或者给出“对应功能”。</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个测试用例的输出占一行，输出魔咒对应的功能，或者功能对应的魔咒。如果魔咒不在词典中，就输出“what?”</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[expelliarmus] the disarming charm</span><br><span class="line">[rictusempra] send a jet of silver light to hit the enemy</span><br><span class="line">[tarantallegra] control the movement of one&#x27;s legs</span><br><span class="line">[serpensortia] shoot a snake out of the end of one&#x27;s wand</span><br><span class="line">[lumos] light the wand</span><br><span class="line">[obliviate] the memory charm</span><br><span class="line">[expecto patronum] send a Patronus to the dementors</span><br><span class="line">[accio] the summoning charm</span><br><span class="line">@END@</span><br><span class="line">4</span><br><span class="line">[lumos]</span><br><span class="line">the summoning charm</span><br><span class="line">[arha]</span><br><span class="line">take me to the sky</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">light the wand</span><br><span class="line">accio</span><br><span class="line">what?</span><br><span class="line">what?</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;string, string&gt; dict;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">char</span> line[<span class="number">200</span>];</span><br><span class="line">        <span class="built_in">fgets</span>(line, <span class="number">200</span>, stdin);</span><br><span class="line">        string str = line;</span><br><span class="line">        str.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&quot;@END@&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string word = str.<span class="built_in">substr</span>(<span class="number">0</span>, str.<span class="built_in">find</span>(<span class="string">&#x27;]&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">        string info = str.<span class="built_in">substr</span>(str.<span class="built_in">find</span>(<span class="string">&#x27;]&#x27;</span>) + <span class="number">2</span>);</span><br><span class="line">        dict[word] = info;</span><br><span class="line">        dict[info] = word;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="built_in">getchar</span>();          <span class="comment">//读取scanf留下的&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="type">char</span> line[<span class="number">200</span>];</span><br><span class="line">        <span class="built_in">fgets</span>(line,<span class="number">200</span>,stdin);</span><br><span class="line">        string str=line;</span><br><span class="line">        str.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dict.<span class="built_in">find</span>(str)!=dict.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,dict[str].<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,dict[str].<span class="built_in">substr</span>(<span class="number">1</span>,dict[str].<span class="built_in">size</span>()<span class="number">-2</span>).<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;what?\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="map-映射"><a href="#map-映射" class="headerlink" title="map(映射)"></a>map(映射)</h1><p>key——&gt;value</p><p>map&lt;key的类型，value的类型&gt;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; myMap;</span><br><span class="line">    <span class="keyword">if</span>(myMap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;myMap is empty!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用方括号[]插入</span></span><br><span class="line">    myMap[<span class="string">&quot;Caixukun&quot;</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//使用insert插入</span></span><br><span class="line">    myMap.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;Wuyifan&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizo of myMap = %d\n&quot;</span>,myMap.<span class="built_in">size</span>());</span><br><span class="line">    <span class="comment">//删除erase(), 参数为key</span></span><br><span class="line">    myMap.<span class="built_in">erase</span>(<span class="string">&quot;Wuyifan&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizo of myMap = %d\n&quot;</span>,myMap.<span class="built_in">size</span>());</span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    map&lt;string,string&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=myMap.<span class="built_in">begin</span>();it!=myMap.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;it-&gt;first=%s, it-&gt;second=%s\n&quot;</span>,it-&gt;first.<span class="built_in">c_str</span>(),it-&gt;second.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">it-&gt;first=Caixukun, it-&gt;second=ikun</span><br><span class="line">it-&gt;first=Wuyifan, it-&gt;second=meigeni</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//键 key--&gt; 值 value</span></span><br><span class="line">        <span class="comment">//&lt;键的类型,值的类型&gt;</span></span><br><span class="line">        map&lt;string,string&gt; myMap =&#123;</span><br><span class="line">        &#123;<span class="string">&quot;Caixukun&quot;</span>,<span class="string">&quot;ikun&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Wuyifan&quot;</span>,<span class="string">&quot;meigeni&quot;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">        string name = str;</span><br><span class="line">        <span class="comment">//myMap[key]根据key映射到对应的值(C++风格的字符串)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s的粉丝被称为%s\n&quot;</span>,name.<span class="built_in">c_str</span>(),myMap[name].<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们的输出不是按照输入顺序输出的，因为map已经把元素按key的大小排号序了</p><p>描述</p><p>输入N个学生的信息，然后进行查询。</p><p>输入描述：</p><p>输入的第一行为N，即学生的个数(N&lt;&#x3D;1000) 接下来的N行包括N个学生的信息，信息格式如下： 01 李江 男 21 02 刘唐 男 23 03 张军 男 19 04 王娜 女 19 然后输入一个M(M&lt;&#x3D;10000),接下来会有M行，代表M次查询，每行输入一个学号，格式如下： 02 03 01 04</p><p>输出描述：</p><p>输出M行，每行包括一个对应于查询的学生的信息。 如果没有对应的学生信息，则输出“No Answer!”</p><p>示例1</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">01 李江 男 21</span><br><span class="line">02 刘唐 男 23</span><br><span class="line">03 张军 男 19</span><br><span class="line">04 王娜 女 19</span><br><span class="line">5</span><br><span class="line">02</span><br><span class="line">03</span><br><span class="line">01</span><br><span class="line">04</span><br><span class="line">03</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">02 刘唐 男 23</span><br><span class="line">03 张军 男 19</span><br><span class="line">01 李江 男 21</span><br><span class="line">04 王娜 女 19</span><br><span class="line">03 张军 男 19</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; myMap;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="built_in">fgets</span>(buf,<span class="number">100</span>,stdin);</span><br><span class="line">        string str=buf;</span><br><span class="line">        str.<span class="built_in">pop_back</span>();</span><br><span class="line">        myMap[num]=str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        <span class="keyword">if</span>(myMap.<span class="built_in">find</span>(num)!=myMap.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%02d%s\n&quot;</span>,num,myMap[num].<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No Answer!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用map代替二分查找"><a href="#用map代替二分查找" class="headerlink" title="用map代替二分查找"></a>用map代替二分查找</h2><p>map的底层是一颗二叉搜索树（红黑树），所以，我们把数据插入到map是有序的。查找时间复杂度O(logn)</p><p>但，如果我们想要查找的时间复杂度达到O(1)，那么我们要用unorder_map，因为它的底层使用了hash散列</p><p>但这样做会使内存增大</p><p>先用map&lt;int,int&gt; 保存数组的值和下标，再用.find()方法</p><p>描述</p><p>输入数组长度 n 输入数组   a[1…n] 输入查找个数m 输入查找数字b[1…m]  输出 YES or NO 查找有则YES 否则NO </p><p>输入描述：</p><p>输入有多组数据。 每组输入n，然后输入n个整数，再输入m，然后再输入m个整数（1&lt;&#x3D;m,n&lt;&#x3D;100）。</p><p>输出描述：</p><p>如果在n个数组中输出YES否则输出NO。</p><p>示例1</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 5 2 4 3</span><br><span class="line">3</span><br><span class="line">2 5 6</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//数组长度</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line">    map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; findIndex;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//读入n个元素</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">        <span class="comment">//数组元素——&gt;key, 下标——&gt;value插入到map</span></span><br><span class="line">        findIndex[arr[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;<span class="comment">//查找m个数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> findNum;<span class="comment">//待查元素</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;findNum);</span><br><span class="line">        <span class="comment">//find函数会返回找到元素的指针，如果没有找到则返回尾后指针（最后元素的再后一个）</span></span><br><span class="line">        <span class="keyword">if</span>(findIndex.<span class="built_in">find</span>(findNum)==findIndex.<span class="built_in">end</span>())&#123;<span class="comment">//findIndex.end()返回尾后指针</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(第一个元素的指针，最后一个元素再后一个元素的指针);</span><br></pre></td></tr></table></figure><h2 id="排序-交换"><a href="#排序-交换" class="headerlink" title="排序&amp;交换"></a>排序&amp;交换</h2><p>加上一个交换规则函数comp，不交换return true;否则return false;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(第一个元素的指针，最后一个元素再后一个元素的指针，comp);</span><br></pre></td></tr></table></figure><h2 id="加上序号seq变量——-稳定排序"><a href="#加上序号seq变量——-稳定排序" class="headerlink" title="加上序号seq变量——&gt;稳定排序"></a>加上序号seq变量——&gt;稳定排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> grade;</span><br><span class="line">    <span class="type">int</span> seq;<span class="comment">//记录数据读入次序</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>描述</p><p>输入10个整数，彼此以空格分隔。重新排序以后输出(也按空格分隔)，要求: 1.先输出其中的奇数,并按从大到小排列； 2.然后输出其中的偶数,并按从小到大排列。</p><p>输入描述：</p><p>任意排序的10个整数（0～100），彼此以空格分隔。</p><p>输出描述：</p><p>可能有多组测试数据，对于每组数据，按照要求排序后输出，由空格分隔。 1. 测试数据可能有很多组，请使用while(cin&gt;&gt;a[0]&gt;&gt;a[1]&gt;&gt;…&gt;&gt;a[9])类似的做法来实现; 2. 输入数据随机，有可能相等。</p><p>示例1</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 7 3 13 11 12 0 47 34 98</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47 13 11 7 3 0 4 12 34 98</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">comp</span><span class="params">(<span class="type">int</span> lhs, <span class="type">int</span> rhs)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//不交换顺序:1.大奇数，小奇数 2.小偶数，大偶数 3. 奇数，偶数</span></span><br><span class="line">    <span class="keyword">if</span> (lhs % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; rhs % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; lhs &gt; rhs)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lhs % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; rhs % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; lhs &lt; rhs)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lhs % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; rhs % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d%d%d%d%d%d%d&quot;</span>, arr, arr + <span class="number">1</span>, arr + <span class="number">2</span>, arr + <span class="number">3</span>, arr + <span class="number">4</span>,</span><br><span class="line">                 arr + <span class="number">5</span>, arr + <span class="number">6</span>, arr + <span class="number">7</span>, arr + <span class="number">8</span>, arr + <span class="number">9</span>) != EOF) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(arr, arr + <span class="number">10</span>, comp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="struct自定义类型"><a href="#struct自定义类型" class="headerlink" title="struct自定义类型"></a>struct自定义类型</h1><p>当一个学生记录既要存储学号，也要存储成绩的时候（即要存储多个信息），用int类型的一维数组并不满足需求，所以若有多个item的时，我们要自定义类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类    类名</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;<span class="comment">//学号</span></span><br><span class="line">    <span class="type">int</span> grade;<span class="comment">//成绩</span></span><br><span class="line">&#125;;<span class="comment">//分号不能省略</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="动态数组（向量-vector"><a href="#动态数组（向量-vector" class="headerlink" title="动态数组（向量 vector)"></a>动态数组（向量 vector)</h1><h2 id="C风格数组的限制"><a href="#C风格数组的限制" class="headerlink" title="C风格数组的限制"></a>C风格数组的限制</h2><ol><li><p>在定义数组时就要固定大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> arr[n]; <span class="comment">//在低版本中这样用变量创建数组是有问题的</span></span><br><span class="line"><span class="type">int</span> arr1[<span class="number">100</span>];<span class="comment">//必须这样用常量创建</span></span><br></pre></td></tr></table></figure></li><li><p>在内存的栈区中不能过大。</p></li></ol><h2 id="C-风格vector"><a href="#C-风格vector" class="headerlink" title="C++风格vector"></a>C++风格vector</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化vector, 元素全0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="comment">//长度为0</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec1;</span><br><span class="line">    <span class="comment">//尾部扩容</span></span><br><span class="line">    vec<span class="number">1.</span><span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//初始化vector</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec2 &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="comment">//随机插入，删除某个位置</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it=vec<span class="number">2.</span><span class="built_in">begin</span>()<span class="number">+1</span>;</span><br><span class="line">    vec<span class="number">2.</span><span class="built_in">insert</span>(it,<span class="number">4</span>);</span><br><span class="line">    vec<span class="number">2.</span><span class="built_in">erase</span>(vec<span class="number">2.</span><span class="built_in">begin</span>());</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it=vec<span class="number">2.</span><span class="built_in">begin</span>();it!=vec<span class="number">2.</span><span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//尾部弹出</span></span><br><span class="line">    vec<span class="number">2.</span><span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="comment">//访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> i=<span class="number">0</span>;i&lt;vec<span class="number">2.</span><span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,vec2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列其实就是一个受限的数组，只能在两端操作</p><p>循环队列的实现也很简单：先出队pop，再入队push</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//入队</span></span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//如果队列为空，则返回true</span></span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;queue is empty&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出队首元素</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the front of queue is %d\n&quot;</span>,q.<span class="built_in">front</span>());</span><br><span class="line">        <span class="comment">//弹出队首元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈也是一个受限的数组，只能在其一端（栈顶top）进行操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; myStack;</span><br><span class="line">    <span class="comment">//压栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        myStack.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈长度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the size of myStack = %d\n&quot;</span>,myStack.<span class="built_in">size</span>());</span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="keyword">while</span>(!myStack.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="comment">//获取栈顶元素</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,myStack.<span class="built_in">top</span>());</span><br><span class="line">        <span class="comment">//弹栈</span></span><br><span class="line">        myStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the i in fun%d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fun</span>(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the i in main() = %d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">the i in <span class="title">fun</span><span class="params">()</span> </span>= <span class="number">2</span></span><br><span class="line"><span class="function">the i in <span class="title">main</span><span class="params">()</span> </span>= <span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>可以见到在fun中改变i的值，并不会改变到main中i的值</p><p>原因是他们是两个函数，在栈区中开辟两个不同的栈帧，这两个栈帧中都有各自的局部变量i，他们互不影响。</p><p>如果我们要在fun函数中，访问main中的i变量，则需要得到main中i的内存地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>* i)</span></span>&#123;</span><br><span class="line">    (*i)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fun</span>(&amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the i in main() = %d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">the i in <span class="title">main</span><span class="params">()</span> </span>= <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>法二：引用</p><p>使用引用后，在fun中的i变量其实是在main中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>&amp; i)</span></span>&#123;<span class="comment">//引用main中的i变量</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">fun</span>(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the i in main() = %d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="堆空间"><a href="#堆空间" class="headerlink" title="堆空间"></a>堆空间</h1><p>如果我们想函数fun中创建链表，就一定要在堆空间创建链表，只有这样我们的链表才不会随栈帧在内存中的释放而消失。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span>* <span class="title">addNote</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* pNote = <span class="keyword">new</span> <span class="type">int</span>;<span class="comment">//在堆区中创建一个int变量，返回变量地址</span></span><br><span class="line">    *pNote=i;</span><br><span class="line">    <span class="keyword">return</span> pNote;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* arr[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        arr[i] = <span class="built_in">addNote</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于堆区中的变量不会主动释放。如果使用new创建变量，就要当我们不用他们的时候，就要delete。如果不去回收堆空间，这种情况就叫内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">delete</span> arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>在线性表的基础上做出改进，由原来的1前驱1后继，变成1前驱2后继(父子关系）。</p><p><strong>由于二叉树的结构复杂，不能像顺序表一样在内存中顺序存储，所以我们要采用链式存储：一个区域存放数据，另一个区域存放指针</strong></p><img src="https://i.imgur.com/6PKC8bJ.png" style="zoom:67%;"><h2 id="层次建树"><a href="#层次建树" class="headerlink" title="层次建树"></a>层次建树</h2><p><img src="https://i.imgur.com/wiyAqOP.png"></p><p><img src="https://i.imgur.com/VUMMlGh.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="comment">//指针域</span></span><br><span class="line">    TreeNode *leftChild;</span><br><span class="line">    TreeNode *rightChild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">QueueNode</span> &#123;   <span class="comment">//队列的每个结点，存储父亲的位置，以及是否插入过左孩子</span></span><br><span class="line">    TreeNode *parent;</span><br><span class="line">    <span class="type">bool</span> isLeftIn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入操作需要改变main中的变量，所以要加引用&amp;符号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertTreeNode</span><span class="params">(TreeNode *&amp;root, queue&lt;QueueNode *&gt; &amp;myQueue, <span class="type">char</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//创建二叉树结点，因为是在被调函数内创建，所以要申请堆空间</span></span><br><span class="line">        TreeNode *pTreeNode = <span class="keyword">new</span> TreeNode;</span><br><span class="line">        <span class="comment">//(*pTreeNode).data=data; //注意：*的优先级低于.所以要加()得到Node结点</span></span><br><span class="line">        pTreeNode-&gt;data = data;<span class="comment">//与上一行等价</span></span><br><span class="line">        <span class="comment">//入队，我们就知道新进来的结点是插parent的左边还是右边</span></span><br><span class="line">        QueueNode *pQueueNode = <span class="keyword">new</span> QueueNode;</span><br><span class="line">        pQueueNode-&gt;parent = pTreeNode;</span><br><span class="line">        pQueueNode-&gt;isLeftIn = <span class="literal">false</span>;</span><br><span class="line">        myQueue.<span class="built_in">push</span>(pQueueNode);</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">//插入第一个结点</span></span><br><span class="line">            root = pTreeNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//插入的不是根</span></span><br><span class="line">            <span class="comment">//找到要插入结点的父亲的位置（队头）</span></span><br><span class="line">            QueueNode *pParent = myQueue.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (pParent-&gt;isLeftIn == <span class="literal">false</span>) &#123;</span><br><span class="line">                pParent-&gt;parent-&gt;leftChild = pTreeNode;</span><br><span class="line">                pParent-&gt;isLeftIn = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pParent-&gt;parent-&gt;rightChild = pTreeNode;</span><br><span class="line">                <span class="comment">//出队</span></span><br><span class="line">                myQueue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">delete</span> pParent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//是#，插入NULL</span></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            QueueNode* pParent=myQueue.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(pParent-&gt;isLeftIn == <span class="literal">false</span>)&#123;</span><br><span class="line">                pParent-&gt;parent-&gt;leftChild=<span class="literal">NULL</span>;</span><br><span class="line">                pParent-&gt;isLeftIn= <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pParent-&gt;parent-&gt;rightChild=<span class="literal">NULL</span>;</span><br><span class="line">                myQueue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">delete</span> pParent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode *root=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> charList[] = <span class="string">&quot;abc##de#g##f###&quot;</span>;</span><br><span class="line">    queue&lt;QueueNode *&gt; myQueue;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; charList[i] != <span class="string">&#x27;\0&#x27;</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">insertTreeNode</span>(root, myQueue, charList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">levelOrder</span>(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="层次遍历（广度优先——-辅助队列）"><a href="#层次遍历（广度优先——-辅助队列）" class="headerlink" title="层次遍历（广度优先——&gt;辅助队列）"></a>层次遍历（广度优先——&gt;辅助队列）</h2><p>辅助队列：访问起点，把起点的所有邻居加入队列。再按队列访问，把被访问结点的邻居入队。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层次遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="comment">//辅助队列，存储二叉树结点地址</span></span><br><span class="line">    queue&lt;TreeNode *&gt; pos;</span><br><span class="line">    pos.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span> (!pos.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        TreeNode *pCur=pos.<span class="built_in">front</span>();</span><br><span class="line">        pos.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,pCur-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(pCur-&gt;leftChild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            pos.<span class="built_in">push</span>(pCur-&gt;leftChild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pCur-&gt;rightChild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            pos.<span class="built_in">push</span>(pCur-&gt;rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><p>一颗树也可以将大问题转换成小问题。</p><p>把树分成三个部分：根，左子树，右子树。（左子树，右子树，分别为小问题）</p><p>递归出口：空树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root-&gt;data);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(root-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(root-&gt;leftChild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root-&gt;data);</span><br><span class="line">        <span class="built_in">InOrder</span>(root-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rightChild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="已知前中序，求后序"><a href="#已知前中序，求后序" class="headerlink" title="已知前中序，求后序"></a>已知前中序，求后序</h2><p>给定一棵二叉树的前序遍历和中序遍历，求其后序遍历（提示：给定前序遍历与中序遍历能够唯一确定后序遍历）。</p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/6e732a9632bc4d12b442469aed7fe9ce">https://www.nowcoder.com/questionTerminal/6e732a9632bc4d12b442469aed7fe9ce</a></p><p><strong>输入描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">两个字符串，其长度n均小于等于26。</span><br><span class="line">第一行为前序遍历，第二行为中序遍历。</span><br><span class="line">二叉树中的结点名称以大写字母表示：A，B，C....最多26个结点。</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入样例可能有多组，对于每组测试样例，</span><br><span class="line">输出一行，为后序遍历的字符串。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ABC</span><br><span class="line">BAC</span><br><span class="line">FDXEAG</span><br><span class="line">XDEFAG</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BCA</span><br><span class="line">XEDGAF</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    TreeNode* lchild;</span><br><span class="line">    TreeNode* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">rebuild</span><span class="params">(string preOrder,string inOrder)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preOrder.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//从先序确定根</span></span><br><span class="line">        <span class="type">char</span> rootdata=preOrder[<span class="number">0</span>];</span><br><span class="line">        TreeNode* pNewNode=<span class="keyword">new</span> TreeNode;</span><br><span class="line">        pNewNode-&gt;data=rootdata;</span><br><span class="line">        <span class="comment">//拿根去切割先序，中序</span></span><br><span class="line">        <span class="type">int</span> pos=inOrder.<span class="built_in">find</span>(rootdata);</span><br><span class="line">        <span class="comment">//preOrder.substr(1,pos)</span></span><br><span class="line">        <span class="comment">//preOrder.substr(pos+1)</span></span><br><span class="line">        <span class="comment">//inOrder.substr(0,pos)</span></span><br><span class="line">        <span class="comment">//inOrder.substr(pos+1)</span></span><br><span class="line">        pNewNode-&gt;lchild= <span class="built_in">rebuild</span>(preOrder.<span class="built_in">substr</span>(<span class="number">1</span>,pos),inOrder.<span class="built_in">substr</span>(<span class="number">0</span>,pos));</span><br><span class="line">        pNewNode-&gt;rchild= <span class="built_in">rebuild</span>(preOrder.<span class="built_in">substr</span>(pos<span class="number">+1</span>),inOrder.<span class="built_in">substr</span>(pos<span class="number">+1</span>));</span><br><span class="line">        <span class="keyword">return</span> pNewNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">postOrder</span>(root-&gt;rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> preOrder[<span class="number">50</span>];</span><br><span class="line">    <span class="type">char</span> inOrder[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,preOrder,inOrder)!=EOF)&#123;</span><br><span class="line">        TreeNode* root= <span class="built_in">rebuild</span>(preOrder,inOrder);</span><br><span class="line">        <span class="built_in">postOrder</span>(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="已知带空叶子的先序"><a href="#已知带空叶子的先序" class="headerlink" title="已知带空叶子的先序"></a>已知带空叶子的先序</h2><p>因为先序按（根，左，右）的顺序进行，并且带有空叶子，所以一定能表示出一棵树。</p><p>这样也可以采用递归进行构建二叉树。</p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/4b91205483694f449f94c179883c1fef">https://www.nowcoder.com/questionTerminal/4b91205483694f449f94c179883c1fef</a></p><p>编一个程序，读入用户输入的一串先序遍历字符串，根据此字符串建立一个二叉树（以指针方式存储）。 例如如下的先序遍历字符串： ABC##DE#G##F### 其中“#”表示的是空格，空格字符代表空树。建立起此二叉树以后，再对二叉树进行中序遍历，输出遍历结果。  </p><p><strong>输入描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入包括1行字符串，长度不超过100。</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可能有多组测试数据，对于每组数据，</span><br><span class="line">输出将输入字符串建立二叉树后中序遍历的序列，每个字符后面都有一个空格。</span><br><span class="line">每个输出结果占一行。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc##de#g##f###</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c b e g d f a </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    TreeNode* lchild;</span><br><span class="line">    TreeNode* rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">TreeNode* <span class="title">RecursiveBuildTree</span><span class="params">(<span class="type">int</span> &amp;i, string str)</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> c=str[i];</span><br><span class="line">    ++i;</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        TreeNode* pNewNode=<span class="keyword">new</span> TreeNode;</span><br><span class="line">        pNewNode-&gt;data=c;</span><br><span class="line">        pNewNode-&gt;lchild= <span class="built_in">RecursiveBuildTree</span>(i,str);</span><br><span class="line">        pNewNode-&gt;rchild= <span class="built_in">RecursiveBuildTree</span>(i,str);</span><br><span class="line">        <span class="keyword">return</span> pNewNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,root-&gt;data);</span><br><span class="line">        <span class="built_in">InOrder</span>(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">150</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fgets</span>(buf,<span class="number">150</span>,stdin)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        string str=buf;</span><br><span class="line">        str.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        TreeNode* root= <span class="built_in">RecursiveBuildTree</span>(i,str);</span><br><span class="line">        <span class="built_in">InOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉搜索树（BST"><a href="#二叉搜索树（BST" class="headerlink" title="二叉搜索树（BST)"></a>二叉搜索树（BST)</h1><p>左&lt;根&lt;右（左子树和右子树分别又是一颗二次搜索树）</p><p>中序是一个有序序列。 </p><h2 id="二叉搜索树的查找和插入。"><a href="#二叉搜索树的查找和插入。" class="headerlink" title="二叉搜索树的查找和插入。"></a>二叉搜索树的查找和插入。</h2><p>他的查找过程类似于二分查找。</p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/30a0153649304645935c949df7599602">https://www.nowcoder.com/questionTerminal/30a0153649304645935c949df7599602</a></p><p>二叉排序树，也称为二叉查找树。可以是一颗空树，也可以是一颗具有如下特性的非空二叉树： 1. 若左子树非空，则左子树上所有节点关键字值均不大于根节点的关键字值； 2. 若右子树非空，则右子树上所有节点关键字值均不小于根节点的关键字值； 3. 左、右子树本身也是一颗二叉排序树。 现在给你N个关键字值各不相同的节点，要求你按顺序插入一个初始为空树的二叉排序树中，每次插入后成功后，求相应的父亲节点的关键字值，如果没有父亲节点，则输出-1。                                        </p><p><strong>输入描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组测试数据，每组测试数据两行。</span><br><span class="line">第一行，一个数字N（N&lt;=100），表示待插入的节点数。</span><br><span class="line">第二行，N个互不相同的正整数，表示要顺序插入节点的关键字值，这些值不超过10^8。</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出共N行，每次插入节点后，该节点对应的父亲节点的关键字值。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 5 1 3 4</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">3</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> data;</span><br><span class="line">    TreeNode *lchild;</span><br><span class="line">    TreeNode *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertBST</span><span class="params">(TreeNode *&amp;root, <span class="type">long</span> <span class="type">long</span> data)</span> </span>&#123;</span><br><span class="line">    TreeNode *pNewNode = <span class="keyword">new</span> TreeNode;</span><br><span class="line">    pNewNode-&gt;data = data;</span><br><span class="line">    pNewNode-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    pNewNode-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root = pNewNode;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TreeNode *pPre = root;</span><br><span class="line">        TreeNode *pCur;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data &lt; pPre-&gt;data) &#123;    <span class="comment">//比pPre小就往左走</span></span><br><span class="line">                pCur = pPre-&gt;lchild;</span><br><span class="line">                <span class="keyword">if</span> (pCur == <span class="literal">NULL</span>) &#123; <span class="comment">//判断左边为空，就直接插入</span></span><br><span class="line">                    pPre-&gt;lchild = pNewNode;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, pPre-&gt;data);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;         <span class="comment">//不为空，就往下移动</span></span><br><span class="line">                    pPre = pCur;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;              <span class="comment">//pCur比pPre大就往右走</span></span><br><span class="line">                pCur = pPre-&gt;rchild;</span><br><span class="line">                <span class="keyword">if</span> (pCur == <span class="literal">NULL</span>) &#123; <span class="comment">//为空，就插入</span></span><br><span class="line">                    pPre-&gt;rchild = pNewNode;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, pPre-&gt;data);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;           <span class="comment">//不为空，就往下移动</span></span><br><span class="line">                    pPre = pCur;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;num);</span><br><span class="line">        <span class="built_in">insertBST</span>(root,num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优先队列（大根堆）"><a href="#优先队列（大根堆）" class="headerlink" title="优先队列（大根堆）"></a>优先队列（大根堆）</h1><p>应用：在一个动态的队列中，不断去得到最大值。</p><p>一个大根堆要满足两个特征：</p><p>形状特征：由大根堆是完全二叉树（由结点的个数，就能确定一个二叉树的形状），所以我们不再采用链式存储，而采用顺序存储。</p><p>数值特征：父&gt;左，父&gt;右（根最大）</p><h2 id="大根堆删除"><a href="#大根堆删除" class="headerlink" title="大根堆删除"></a>大根堆删除</h2><ol><li>最大值先出队。其位置于堆尾结点交换。</li><li>小元素不断下坠（如其比两个孩子的最大值更小，就跟两个孩子的最大值交换）</li></ol><p>所以大根堆出堆顶的时间复杂的<code>O(log n)</code>(因为最坏的情况下，在下坠的过程中，交换log n 次，而完全二叉树的高度h约&#x3D;logn)</p><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; myPQueue;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        myPQueue.<span class="built_in">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!myPQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,myPQueue.<span class="built_in">top</span>());</span><br><span class="line">        myPQueue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The priority queue is empty.&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建小根堆"><a href="#构建小根堆" class="headerlink" title="构建小根堆"></a>构建小根堆</h2><p>法1：取巧的方案（只适用于全部都是正数）</p><p>先把数组全变成负数。然后push到priority_queue，等到top取出元素的时候，我们才把他变为正数。</p><p>法2：运算符重载（但只支持自定义类型运算符重载）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Element</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//运算符重载（跟函数的构造很像）</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(Element lhs,Element rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.value &gt; rhs.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    priority_queue&lt;Element&gt; pQueue;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">        Element e;</span><br><span class="line">        e.value=arr[i];</span><br><span class="line">        pQueue.<span class="built_in">push</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><ol><li><p>把所有结点加入集合中（集合要使用小根堆）</p></li><li><p>若k的size&gt;1，</p><p>取出权重最小的两个结点，并求和，放回集合中</p></li><li><p>若k集合中只剩下一个元素，那么就是树的根</p></li></ol><p>链接：<a href="https://www.nowcoder.com/questionTerminal/162753046d5f47c7aac01a5b2fcda155">https://www.nowcoder.com/questionTerminal/162753046d5f47c7aac01a5b2fcda155</a></p><p>哈夫曼树，第一行输入一个数n，表示叶结点的个数。需要用这些叶结点生成哈夫曼树，根据哈夫曼树的概念，这些结点有权值，即weight，题目需要输出所有结点的值与权值的乘积之和的最小值。                               </p><p><strong>输入描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入有多组数据。</span><br><span class="line">每组第一行输入一个数n，接着输入n个叶节点（叶节点权值不超过100，2&lt;=n&lt;=1000）。</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出权值。</span><br></pre></td></tr></table></figure><p>示例1</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5  </span><br><span class="line">1 2 2 5 9</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">37</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; pQueue;     <span class="comment">//存入相反数</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> num;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">            pQueue.<span class="built_in">push</span>(-num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;      <span class="comment">//存储带权路径和的中间结果</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>&lt;pQueue.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">int</span> num1=pQueue.<span class="built_in">top</span>();</span><br><span class="line">            pQueue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> num2=pQueue.<span class="built_in">top</span>();</span><br><span class="line">            pQueue.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">//计算带权路径和 = L的带权路径和 + L的叶子权重和 + R的带权路径和 + R的叶子权重和</span></span><br><span class="line">            res=res+num1+num2;</span><br><span class="line"></span><br><span class="line">            pQueue.<span class="built_in">push</span>(num1+num2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,-res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="广度优先（BFS）"><a href="#广度优先（BFS）" class="headerlink" title="广度优先（BFS）"></a>广度优先（BFS）</h2><p>优先转移到所有的邻居，由于要存储邻居，我们要设置辅助队列。由于，要记录已经被访问过的结点，要设置一个辅助集合isVisit</p><p>用途：求最优解</p><h1 id="Catch-That-Cow"><a href="#Catch-That-Cow" class="headerlink" title="Catch That Cow"></a>Catch That Cow</h1><p>Description</p><p>Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.</p><p>Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute<br>Teleporting: FJ can move from any point X to the point 2 × X in a single minute.<br>If the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?</p><p>Input</p><p>Line 1: Two space-separated integers: N and K<br>Output</p><p>Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.<br>Sample Input</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 17</span><br></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><p>可以知道，本题是一个最优解问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">int</span> time;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    queue&lt;Info&gt; posQueue;</span><br><span class="line">    <span class="type">bool</span> isVisit[<span class="number">100001</span>];   <span class="comment">//记录该结点是否被访问过</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100001</span>;i++)&#123;</span><br><span class="line">        isVisit[i]= <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Info first;</span><br><span class="line">    first.pos=n;</span><br><span class="line">    first.time=<span class="number">0</span>;</span><br><span class="line">    posQueue.<span class="built_in">push</span>(first);</span><br><span class="line">    <span class="keyword">while</span> (!posQueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        Info cur=posQueue.<span class="built_in">front</span>();</span><br><span class="line">        posQueue.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(cur.pos==k)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cur.time);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isVisit[cur.pos]=<span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//把邻居加入队列</span></span><br><span class="line">        Info neighbor;</span><br><span class="line">        <span class="keyword">if</span>(cur.pos<span class="number">-1</span>&gt;=<span class="number">0</span> &amp;&amp; cur.pos<span class="number">-1</span>&lt;=<span class="number">100000</span> &amp;&amp; isVisit[cur.pos<span class="number">-1</span>]== <span class="literal">false</span>)&#123;</span><br><span class="line">            neighbor.pos=cur.pos<span class="number">-1</span>;</span><br><span class="line">            neighbor.time=cur.time<span class="number">+1</span>;</span><br><span class="line">            posQueue.<span class="built_in">push</span>(neighbor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.pos<span class="number">+1</span>&gt;=<span class="number">0</span> &amp;&amp; cur.pos<span class="number">+1</span>&lt;=<span class="number">100000</span> &amp;&amp; isVisit[cur.pos<span class="number">+1</span>]== <span class="literal">false</span>)&#123;</span><br><span class="line">            neighbor.pos=cur.pos<span class="number">+1</span>;</span><br><span class="line">            neighbor.time=cur.time<span class="number">+1</span>;</span><br><span class="line">            posQueue.<span class="built_in">push</span>(neighbor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur.pos*<span class="number">2</span>&gt;=<span class="number">0</span> &amp;&amp; cur.pos*<span class="number">2</span>&lt;=<span class="number">100000</span> &amp;&amp; isVisit[cur.pos*<span class="number">2</span>]== <span class="literal">false</span>)&#123;</span><br><span class="line">            neighbor.pos=cur.pos*<span class="number">2</span>;</span><br><span class="line">            neighbor.time=cur.time<span class="number">+1</span>;</span><br><span class="line">            posQueue.<span class="built_in">push</span>(neighbor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Find The Multiple</p><ul><li><p>描述</p><p>Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits.</p></li><li><p>输入</p><p>The input file may contain multiple test cases. Each line contains a value of n (1 &lt;&#x3D; n &lt;&#x3D; 200). A line containing a zero terminates the input.</p></li><li><p>输出</p><p>For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable.</p></li><li><p>样例输入</p><p><code>2 6 19 0</code></p></li><li><p>样例输出</p><p><code>10 100100100100100100 111111111111111111</code></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queue&lt;<span class="type">long</span> <span class="type">long</span>&gt; m;</span><br><span class="line">        m.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (!m.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> cur=m.<span class="built_in">front</span>();</span><br><span class="line">            m.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(cur%n==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,cur);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m.<span class="built_in">push</span>(cur*<span class="number">10</span>);</span><br><span class="line">            m.<span class="built_in">push</span>(cur*<span class="number">10</span><span class="number">+1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先-DFS"><a href="#深度优先-DFS" class="headerlink" title="深度优先(DFS)"></a>深度优先(DFS)</h2><p>优先使用递归，去重：辅助结合isVisit。路径：Stack</p><p>A Knight’s Journey</p><p>描述</p><p><img src="http://media.openjudge.cn/images/g1490/2488_1.jpg" alt="img"><strong>Background</strong><br>The knight is getting bored of seeing the same black and white squares again and again and has decided to make a journey around the world. Whenever a knight moves, it is two squares in one direction and one square perpendicular to this. The world of a knight is the chessboard he is living on. Our knight lives on a chessboard that has a smaller area than a regular 8 * 8 board, but it is still rectangular. Can you help this adventurous knight to make travel plans?</p><p><strong>Problem</strong><br>Find a path such that the knight visits every square once. The knight can start and end on any square of the board.</p><p>输入</p><p>The input begins with a positive integer n in the first line. The following lines contain n test cases. Each test case consists of a single line with two positive integers p and q, such that 1 &lt;&#x3D; p * q &lt;&#x3D; 26. This represents a p * q chessboard, where p describes how many different square numbers 1, . . . , p exist, q describes how many different square letters exist. These are the first q letters of the Latin alphabet: A, . . .</p><p>输出</p><p>The output for every scenario begins with a line containing “Scenario #i:”, where i is the number of the scenario starting at 1. Then print a single line containing the lexicographically first path that visits all squares of the chessboard with knight moves followed by an empty line. The path should be given on a single line by concatenating the names of the visited squares. Each square name consists of a capital letter followed by a number.<br>If no such path exist, you should output impossible on a single line.</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 1</span><br><span class="line">2 3</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scenario #1:</span><br><span class="line">A1</span><br><span class="line"></span><br><span class="line">Scenario #2:</span><br><span class="line">impossible</span><br><span class="line"></span><br><span class="line">Scenario #3:</span><br><span class="line">A1B3C1A2B4C2A3B1C3A4B2C4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2023/02/10/JavaScript/jQuery/"/>
      <url>/2023/02/10/JavaScript/jQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-Introduction"><a href="#jQuery-Introduction" class="headerlink" title="jQuery Introduction"></a>jQuery Introduction</h1><p>jQuery is a JavaScript Library.</p><p>jQuery greatly simplifies JavaScript programming.</p><p>jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation.</p><p>The jQuery library contains the following features:</p><ul><li>HTML&#x2F;DOM manipulation</li><li>CSS manipulation</li><li>HTML event methods</li><li>Effects and animations</li><li>AJAX</li><li>Utilities</li></ul><p><strong>Tip:</strong> In addition, jQuery has plugins for almost any task out there.</p><h1 id="jQuery-Syntax"><a href="#jQuery-Syntax" class="headerlink" title="jQuery Syntax"></a>jQuery Syntax</h1><p>The jQuery syntax is tailor-made for <strong>selecting</strong> HTML elements and performing some <strong>action</strong> on the element(s).</p><p>Basic syntax is: <strong>$(*selector*).*action*()</strong></p><ul><li>A $ sign to define&#x2F;access jQuery</li><li>A (<em>selector</em>) to “query (or find)” HTML elements</li><li>A jQuery <em>action</em>() to be performed on the element(s)</li></ul><h2 id="The-Document-Ready-Event"><a href="#The-Document-Ready-Event" class="headerlink" title="The Document Ready Event"></a>The Document Ready Event</h2><p>You might have noticed that all jQuery methods in our examples, are inside a document ready event:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"> *<span class="comment">// jQuery methods go here...*</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This is to prevent any jQuery code from running before the document is finished loading (is ready).</p><p><strong>Tip:</strong> The jQuery team has also created an even shorter method for the document ready event:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"> *<span class="comment">// jQuery methods go here...*</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Use the syntax you prefer. We think that the document ready event is easier to understand when reading the code.</p><h1 id="jQuery-Selectors"><a href="#jQuery-Selectors" class="headerlink" title="jQuery Selectors"></a>jQuery Selectors</h1><p>All selectors in jQuery start with the dollar sign and parentheses: $().</p><h2 id="The-element-Selector"><a href="#The-element-Selector" class="headerlink" title="The element Selector"></a>The element Selector</h2><p>You can select all <code>&lt;p&gt;</code> elements on a page like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;p&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="The-id-Selector"><a href="#The-id-Selector" class="headerlink" title="The #id Selector"></a>The #id Selector</h2><p>To find an element with a specific id, write a hash character, followed by the id of the HTML element:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#test&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="The-class-Selector"><a href="#The-class-Selector" class="headerlink" title="The .class Selector"></a>The .class Selector</h2><p>To find elements with a specific class, write a period character, followed by the name of the class:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.test&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Functions-In-a-Separate-File"><a href="#Functions-In-a-Separate-File" class="headerlink" title="Functions In a Separate File"></a>Functions In a Separate File</h2><p>If your website contains a lot of pages, and you want your jQuery functions to be easy to maintain, you can put your jQuery functions in a separate .js file.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my_jquery_functions.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h1 id="jQuery-Event-Methods"><a href="#jQuery-Event-Methods" class="headerlink" title="jQuery Event Methods"></a>jQuery Event Methods</h1><p>The next step is to define what should happen when the event fires. You must pass a function to the event:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// action goes here!!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="jQuery-HTML"><a href="#jQuery-HTML" class="headerlink" title="jQuery HTML"></a>jQuery HTML</h1><p>Three simple, but useful, jQuery methods for DOM manipulation are:</p><ul><li><code>text()</code> - Sets or returns the text content of selected elements</li><li><code>html()</code> - Sets or returns the content of selected elements (including HTML markup)</li><li><code>val()</code> - Sets or returns the value of form fields</li></ul><h1 id="jQuery-AJAX"><a href="#jQuery-AJAX" class="headerlink" title="jQuery - AJAX"></a>jQuery - AJAX</h1><p>In short; AJAX is about loading data in the background and display it on the webpage, without reloading the whole page.</p><h2 id="jQuery-load-Method"><a href="#jQuery-load-Method" class="headerlink" title="jQuery load() Method"></a>jQuery load() Method</h2><p>The <code>load()</code> method loads data from a server and puts the returned data into the selected element.</p><p><strong>Syntax:</strong></p><p><code>$(selector).load(URL,data,callback);</code></p><p>The required URL parameter specifies the URL you wish to load.</p><p>The optional data parameter specifies a set of querystring key&#x2F;value pairs to send along with the request.</p><p>The optional callback parameter is the name of a function to be executed after the <code>load()</code> method is completed.</p><p>The following example loads the content of the file “demo_test.txt” into a specific <code>&lt;div&gt;</code> element:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>It is also possible to add a jQuery selector to the URL parameter.</p><p>The following example loads the content of the element with id&#x3D;”p1”, inside the file “demo_test.txt”, into a specific <code>&lt;div&gt;</code> element:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;demo_test.txt #p1&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2023/02/10/JavaScript/Ajax/"/>
      <url>/2023/02/10/JavaScript/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX-Introduction"><a href="#AJAX-Introduction" class="headerlink" title="AJAX Introduction"></a>AJAX Introduction</h1><p>AJAX is a developer’s dream, because you can:</p><ul><li>Read data from a web server - after the page has loaded</li><li>Update a web page without reloading the page</li><li>Send data to a web server - in the background</li></ul><p>AJAX &#x3D; <strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML.</p><p>AJAX is not a programming language.</p><p>AJAX just uses a combination of:</p><ul><li>A browser built-in <code>XMLHttpRequest</code> object (to request data from a web server)</li><li>JavaScript and HTML DOM (to display or use the data)</li></ul><p>AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text.</p><p>AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.</p><h1 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an XMLHttpRequest object</span></span><br><span class="line"><span class="keyword">const</span> xhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a callback function</span></span><br><span class="line">xhttp.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Here you can use the Data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Send a request</span></span><br><span class="line">xhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;ajax_info.txt&quot;</span>);</span><br><span class="line">xhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h2 id="Send-a-Request-To-a-Server"><a href="#Send-a-Request-To-a-Server" class="headerlink" title="Send a Request To a Server"></a>Send a Request To a Server</h2><p>To send a request to a server, we use the open() and send() methods of the <code>XMLHttpRequest</code> object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;ajax_info.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhttp.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">open(<em>method, url, async</em>)</td><td align="left">Specifies the type of request  <em>method</em>: the type of request: GET or POST <em>url</em>: the server (file) location <em>async</em>: true (asynchronous) or false (synchronous)</td></tr><tr><td align="left">send()</td><td align="left">Sends the request to the server (used for GET)</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">Sends the request to the server (used for POST)</td></tr></tbody></table><h2 id="The-url-A-File-On-a-Server"><a href="#The-url-A-File-On-a-Server" class="headerlink" title="The url - A File On a Server"></a>The url - A File On a Server</h2><p>The url parameter of the <code>open()</code> method, is an address to a file on a server:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;ajax_test.asp&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="Server-Response"><a href="#Server-Response" class="headerlink" title="Server Response"></a>Server Response</h1><h2 id="Server-Response-Properties"><a href="#Server-Response-Properties" class="headerlink" title="Server Response Properties"></a>Server Response Properties</h2><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">responseText</td><td align="left">get the response data as a string</td></tr><tr><td align="left">responseXML</td><td align="left">get the response data as XML data</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = xhttp.<span class="property">responseText</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="/2022/05/14/Machine-Learning/Machine-Learning/"/>
      <url>/2022/05/14/Machine-Learning/Machine-Learning/</url>
      
        <content type="html"><![CDATA[<h1 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a>Conception</h1><p>In simple words, ML is a type of artificial intelligence that extract patterns out of raw data by using an algorithm or method. The key focus of ML is to allow computer systems to learn from experience without being explicitly programmed or human intervention.</p><p>ML is a field of AI consisting of learning algorithms that −</p><ul><li>Improve their performance (P)</li><li>At executing some task (T)</li><li>Over time with experience (E)</li></ul><h2 id="Data-Set"><a href="#Data-Set" class="headerlink" title="Data Set"></a>Data Set</h2><p>In the mind of a computer, a data set is any collection of data. It can be anything from an array to a complete database.</p><p>Example of an array:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[99,86,87,88,111,86,103,87,94,78,77,85,86]</span><br></pre></td></tr></table></figure><p>Example of a database:</p><table><thead><tr><th>Carname</th><th>Color</th><th>Age</th><th>Speed</th><th>AutoPass</th></tr></thead><tbody><tr><td>BMW</td><td>red</td><td>5</td><td>99</td><td>Y</td></tr><tr><td>Volvo</td><td>black</td><td>7</td><td>86</td><td>Y</td></tr><tr><td>VW</td><td>gray</td><td>8</td><td>87</td><td>N</td></tr><tr><td>VW</td><td>white</td><td>7</td><td>88</td><td>Y</td></tr><tr><td>Ford</td><td>white</td><td>2</td><td>111</td><td>Y</td></tr><tr><td>VW</td><td>white</td><td>17</td><td>86</td><td>Y</td></tr><tr><td>Tesla</td><td>red</td><td>2</td><td>103</td><td>Y</td></tr><tr><td>BMW</td><td>black</td><td>9</td><td>87</td><td>Y</td></tr><tr><td>Volvo</td><td>gray</td><td>4</td><td>94</td><td>N</td></tr><tr><td>Ford</td><td>white</td><td>11</td><td>78</td><td>N</td></tr><tr><td>Toyota</td><td>gray</td><td>12</td><td>77</td><td>N</td></tr><tr><td>VW</td><td>white</td><td>9</td><td>85</td><td>N</td></tr><tr><td>Toyota</td><td>blue</td><td>6</td><td>86</td><td>Y</td></tr></tbody></table><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>To analyze data, it is important to know what type of data we are dealing with.</p><p>We can split the data types into three main categories:</p><ul><li><strong>Numerical</strong></li><li><strong>Categorical</strong></li><li><strong>Ordinal</strong></li></ul><p><strong>Numerical</strong> data are numbers, and can be split into two numerical categories:</p><ul><li>Discrete Data<br>- numbers that are limited to integers. Example: The number of cars passing by.</li><li>Continuous Data<br>- numbers that are of infinite value. Example: The price of an item, or the size of an item</li></ul><p><strong>Categorical</strong> data are values that cannot be measured up against each other. Example: a color value, or any yes&#x2F;no values.</p><p><strong>Ordinal</strong> data are like categorical data, but can be measured up against each other. Example: school grades where A is better than B and so on.</p><h1 id="Basic-Tools"><a href="#Basic-Tools" class="headerlink" title="Basic Tools"></a>Basic Tools</h1><h2 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h2><p>The representation of data in pandas is done with the help of following three data structures</p><p><strong>Series</strong> − It is basically a one-dimensional array with an axis label.</p><p><strong>Data frame</strong> −It is basically a two-dimensional data structure which can contain heterogeneous data.</p><p><strong>Panel</strong> − It is a 3-dimensional data structure containing heterogeneous data.</p><h2 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit-learn"></a>Scikit-learn</h2><ul><li>It is built on NumPy, SciPy, and Matplotlib.</li><li>It is an open source and can be reused under BSD license.</li><li>It is accessible to everybody and can be reused in various contexts.</li><li>Wide range of machine learning algorithms covering major areas of ML like classification, clustering, regression, dimensionality reduction, model selection etc. can be implemented with the help of it.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import load_breast_cancer</span><br></pre></td></tr></table></figure><h1 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h1><p>The main objective of supervised learning algorithms is to learn an association between input data samples and corresponding outputs.</p><p><strong>x</strong>: Input variables and</p><p><strong>Y</strong>: Output variable</p><p>Y&#x3D;f(x)</p><p>Now, the main objective would be to approximate the mapping function so well that even when we have new input data (x), we can easily predict the output variable (Y) for that new input data.</p><p>Examples of supervised machine learning algorithms includes <strong>Decision tree, Random Forest, KNN, Logistic Regression</strong> etc.</p><p>Based on the ML tasks, supervised learning algorithms can be divided into following two broad classes −</p><ul><li>Classification</li><li>Regression</li></ul><p><strong>Classification</strong></p><p>As we know that the categorial output responses means unordered and discrete values, hence each output response will belong to a specific class or category</p><p><strong>Regression</strong></p><p>Basically, regression models use the input data features (independent variables) and their corresponding continuous numeric output values (dependent or outcome variables) to learn specific association between inputs and corresponding outputs.</p><h1 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h1><p><strong>x: Input variables</strong>, then there would be no corresponding output variable and the algorithms need to discover the interesting pattern in data for learning.</p><p>Based on the ML tasks, unsupervised learning algorithms can be divided into following broad classes −</p><ul><li>Clustering</li><li>Association</li><li>Dimensionality Reduction</li></ul><p><strong>Clustering</strong></p><p>The real-world example of clustering is to group the customers by their purchasing behavior. </p><p>These algorithms used to find similarity as well as relationship patterns among data samples and then cluster those samples into groups having similarity based on features.</p><p><strong>Association</strong></p><p>Association which is used to analyze large dataset to find patterns which further represents the interesting relationships between various items, which is mainly used to analyze customer shopping patterns.</p><p><strong>Dimensionality Reduction</strong></p><p>The reason behind is the problem of feature space complexity which arises when we start analyzing and extracting millions of features from data samples.</p><p>K-nearest neighbors and discriminant analysis are some of the popular algorithms for this purpose.</p><h1 id="Semi-supervised-Learning"><a href="#Semi-supervised-Learning" class="headerlink" title="Semi-supervised Learning"></a>Semi-supervised Learning</h1><p>We can follow any of the following approaches for implementing semi-supervised learning methods −</p><ul><li>The first and simple approach is to build the supervised model based on small amount of labeled and annotated data and then build the unsupervised model by applying the same to the large amounts of unlabeled data to get more labeled samples. Now, train the model on them and repeat the process.</li><li>The second approach needs some extra efforts. In this approach, we can first use the unsupervised methods to cluster similar data samples, annotate</li></ul><h1 id="Tasks-Suited-for-Machine-Learning"><a href="#Tasks-Suited-for-Machine-Learning" class="headerlink" title="Tasks Suited for Machine Learning"></a>Tasks Suited for Machine Learning</h1><p>The following diagram shows what type of task is appropriate for various ML problems −</p><img src="https://i.imgur.com/MJ9M8T4.png" style="zoom: 80%;"><h1 id="1-Data-Loading-for-ML-Projects"><a href="#1-Data-Loading-for-ML-Projects" class="headerlink" title="1.Data Loading for ML Projects"></a>1.Data Loading for ML Projects</h1><p>The following are the two cases related to CSV file header which must be considered −</p><ul><li><strong>Case-I: When Data file is having a file header</strong> − It will automatically assign the names to each column of data if data file is having a file header.</li><li><strong>Case-II: When Data file is not having a file header</strong> − We need to assign the names to each column of data manually if data file is not having a file header.</li></ul><h2 id="Load-CSV-with-built-in-CSV"><a href="#Load-CSV-with-built-in-CSV" class="headerlink" title="Load CSV with built in CSV"></a>Load CSV with built in CSV</h2><p>In this example, we are using the iris flower data set which can be downloaded into our local directory. After loading the data file, we can convert it into <strong>NumPy</strong> array and use it for ML projects.</p><p>First, we need to import the csv module provided by Python standard library as follows −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br></pre></td></tr></table></figure><p>Next, we need to import Numpy module for converting the loaded data into NumPy array.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br></pre></td></tr></table></figure><p>Now, provide the full path of the file, stored on our local directory, having the CSV data file −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = r&quot;c:\iris.csv&quot;</span><br></pre></td></tr></table></figure><p>Next, use the csv.reader()function to read data from CSV file −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with open(path,&#x27;r&#x27;) as f:</span><br><span class="line">   reader = csv.reader(f,delimiter = &#x27;,&#x27;)</span><br><span class="line">   headers = next(reader)</span><br><span class="line">   data = list(reader)</span><br><span class="line">   data = np.array(data).astype(float)</span><br></pre></td></tr></table></figure><p>We can print the names of the headers with the following line of script −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(headers)</span><br></pre></td></tr></table></figure><p>Next script line will give the first three line of data file −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(data[:3])</span><br></pre></td></tr></table></figure><h1 id="2-Understanding-Data-with-Statistics"><a href="#2-Understanding-Data-with-Statistics" class="headerlink" title="2.Understanding Data with Statistics"></a>2.Understanding Data with Statistics</h1><h2 id="Statistical-Summary-of-Data"><a href="#Statistical-Summary-of-Data" class="headerlink" title="Statistical Summary of Data"></a>Statistical Summary of Data</h2><p>We have discussed Python recipe to get the shape i.e. number of rows and columns, of data but many times we need to review the summaries out of that shape of data. It can be done with the help of describe() function of Pandas DataFrame that further provide the following 8 statistical properties of each &amp; every data attribute −</p><ul><li>Count</li><li>Mean</li><li>Standard Deviation</li><li>Minimum Value</li><li>Maximum value</li><li>25%</li><li>Median i.e. 50%</li><li>75%</li></ul><h2 id="Reviewing-Class-Distribution"><a href="#Reviewing-Class-Distribution" class="headerlink" title="Reviewing Class Distribution"></a>Reviewing Class Distribution</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count_class = data.groupby(&#x27;class&#x27;).size()</span><br><span class="line">print(count_class)</span><br></pre></td></tr></table></figure><h2 id="Reviewing-Correlation-between-Attributes"><a href="#Reviewing-Correlation-between-Attributes" class="headerlink" title="Reviewing Correlation between Attributes"></a>Reviewing Correlation between Attributes</h2><p>The relationship between two variables is called correlation. In statistics, the most common method for calculating correlation is Pearson’s Correlation Coefficient. It can have three values as follows −</p><ul><li><strong>Coefficient value &#x3D; 1</strong> − It represents full <strong>positive</strong> correlation between variables.</li><li><strong>Coefficient value &#x3D; -1</strong> − It represents full <strong>negative</strong> correlation between variables.</li><li><strong>Coefficient value &#x3D; 0</strong> − It represents <strong>no</strong> correlation at all between variables.</li></ul><p>In Python, we can easily calculate a correlation matrix of dataset attributes with the help of corr() function on Pandas DataFrame.</p><h2 id="Reviewing-Skew-of-Attribute-Distribution"><a href="#Reviewing-Skew-of-Attribute-Distribution" class="headerlink" title="Reviewing Skew of Attribute Distribution"></a>Reviewing Skew of Attribute Distribution</h2><ul><li>Presence of skewness in data requires the correction at data preparation stage so that we can get more accuracy from our model.</li><li>Most of the ML algorithms assumes that data has a Gaussian distribution i.e. either normal of bell curved data.</li></ul><p>In Python, we can easily calculate the skew of each attribute by using skew() function on Pandas DataFrame.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(data.skew())</span><br></pre></td></tr></table></figure><h1 id="3-Understanding-Data-with-Visualization"><a href="#3-Understanding-Data-with-Visualization" class="headerlink" title="3.Understanding Data with Visualization"></a>3.Understanding Data with Visualization</h1><h2 id="Univariate-Plots"><a href="#Univariate-Plots" class="headerlink" title="Univariate Plots"></a>Univariate Plots</h2><p>With the help of univariate visualization, we can understand each attribute of our dataset independently.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot</span><br><span class="line"></span><br><span class="line">data.hist()</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h2 id="Density-Plots"><a href="#Density-Plots" class="headerlink" title="Density Plots"></a>Density Plots</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.plot(kind=&#x27;density&#x27;, subplots=True, layout=(3,3), sharex=False)</span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h1 id="4-Preparing-Data"><a href="#4-Preparing-Data" class="headerlink" title="4.Preparing Data"></a>4.Preparing Data</h1><p>We always need to preprocess our data so that it can be as per the expectation of machine learning algorithm.</p><h2 id="Scaling"><a href="#Scaling" class="headerlink" title="Scaling"></a>Scaling</h2><p>We can rescale the data with the help of MinMaxScaler class of scikit-learn Python library.</p><h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><h2 id="Binarization"><a href="#Binarization" class="headerlink" title="Binarization"></a>Binarization</h2><h2 id="Standardization"><a href="#Standardization" class="headerlink" title="Standardization"></a>Standardization</h2><h1 id="Linear-Regression"><a href="#Linear-Regression" class="headerlink" title="Linear Regression"></a>Linear Regression</h1><p>The term regression is used when you try to find the relationship between variables.</p><p>In Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events. </p><p>Linear regression uses the relationship between the data-points to draw a straight line through all them.</p><p>This line can be used to predict future values. In Machine Learning, predicting the future is very important.</p><p>Let us see if the data we collected could be used in a linear regression:</p><p>Import <code>scipy</code> and draw the line of Linear Regression:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from scipy import stats</span><br><span class="line"></span><br><span class="line">x = [5,7,8,7,2,17,2,9,4,11,12,9,6]</span><br><span class="line">y = [99,86,87,88,111,86,103,87,94,78,77,85,86]</span><br><span class="line"></span><br><span class="line">slope, intercept, r, p, std_err = stats.linregress(x, y)</span><br><span class="line"></span><br><span class="line">def myfunc(x):</span><br><span class="line"> return slope * x + intercept</span><br><span class="line"></span><br><span class="line">mymodel = list(map(myfunc, x))</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x, mymodel)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/yZVwr7i.png" style="zoom:80%;"><h2 id="Example-Explained"><a href="#Example-Explained" class="headerlink" title="Example Explained"></a>Example Explained</h2><p>Execute a method that returns some important key values of Linear Regression:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slope, intercept, r, p, std_err = stats.linregress(x, y)</span><br></pre></td></tr></table></figure><p>Create a function that uses the <code>slope</code> and <code>intercept</code> values to return a new value. <strong>(Just like linear equation: y&#x3D;kx+b. Slope represents the k and intercept represents the b)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def myfunc(x):</span><br><span class="line">  return slope * x + intercept</span><br></pre></td></tr></table></figure><p>Run each value of the x array through the function. This will result in a new array with new values for the y-axis:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mymodel = list(map(myfunc, x))</span><br></pre></td></tr></table></figure><p>Draw the line of linear regression:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, mymodel)</span><br></pre></td></tr></table></figure><h2 id="R-for-Relationship"><a href="#R-for-Relationship" class="headerlink" title="R for Relationship"></a>R for Relationship</h2><p>It is important to know how the relationship between the values of the x-axis and the values of the y-axis is, if there are no relationship the linear regression can not be used to predict anything.</p><p>This relationship - the coefficient of correlation - is called <code>r</code>. The <code>r</code> value ranges from -1 to 1, where 0 means no relationship, and 1 (and -1) means 100% related.</p><p>How well does my data fit in a linear regression?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from scipy import stats</span><br><span class="line"></span><br><span class="line">x = [5,7,8,7,2,17,2,9,4,11,12,9,6]</span><br><span class="line">y = [99,86,87,88,111,86,103,87,94,78,77,85,86]</span><br><span class="line"></span><br><span class="line">slope, intercept, r, p, std_err = stats.linregress(x, y)</span><br><span class="line"></span><br><span class="line">print(r)</span><br><span class="line">-0.758591524376155</span><br></pre></td></tr></table></figure><p>The result -0.76 shows that there is a relationship, not perfect, but it indicates that we could use linear regression in future predictions.</p><h2 id="Predict-Future-Values"><a href="#Predict-Future-Values" class="headerlink" title="Predict Future Values"></a>Predict Future Values</h2><p>Now we can use the information we have gathered to predict future values.</p><p>Example: Let us try to predict the speed of a 10 years old car.</p><p>Predict the speed of a 10 years old car:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from scipy import stats</span><br><span class="line"></span><br><span class="line">x = [5,7,8,7,2,17,2,9,4,11,12,9,6]</span><br><span class="line">y = [99,86,87,88,111,86,103,87,94,78,77,85,86]</span><br><span class="line"></span><br><span class="line">slope, intercept, r, p, std_err = stats.linregress(x, y)</span><br><span class="line"></span><br><span class="line">def myfunc(x):</span><br><span class="line"> return slope * x + intercept</span><br><span class="line"></span><br><span class="line">speed = myfunc(10)</span><br><span class="line"></span><br><span class="line">print(speed)</span><br></pre></td></tr></table></figure><h1 id="Polynomial-Regression"><a href="#Polynomial-Regression" class="headerlink" title="Polynomial Regression"></a>Polynomial Regression</h1><p>If your data points clearly will not fit a linear regression (a straight line through all data points), it might be ideal for polynomial regression.</p><p>Polynomial regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>We have registered the car’s speed, and the time of day (hour) the passing occurred.</p><p>The x-axis represents the hours of the day and the y-axis represents the speed:</p><p>Import <code>numpy</code> and <code>matplotlib</code> then draw the line of Polynomial Regression:</p><p>Import <code>numpy</code> and <code>matplotlib</code> then draw the line of Polynomial Regression:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]</span><br><span class="line">y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]</span><br><span class="line"></span><br><span class="line">mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))</span><br><span class="line"></span><br><span class="line">myline = numpy.linspace(1, 22, 100)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(myline, mymodel(myline))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="Example-Explained-1"><a href="#Example-Explained-1" class="headerlink" title="Example Explained"></a>Example Explained</h2><p>NumPy has a method that lets us make a polynomial model:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))</span><br></pre></td></tr></table></figure><p>Then specify how the line will display, we start at position 1, and end at position 22:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myline = numpy.linspace(1, 22, 100)</span><br></pre></td></tr></table></figure><p>Draw the line of polynomial regression:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(myline, mymodel(myline))</span><br></pre></td></tr></table></figure><h2 id="R-Squared"><a href="#R-Squared" class="headerlink" title="R-Squared"></a>R-Squared</h2><p>It is important to know how well the relationship between the values of the x- and y-axis is, if there are no relationship the polynomial regression can not be used to predict anything.</p><p>The relationship is measured with a value called the r-squared. The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related.</p><p>How well does my data fit in a polynomial regression?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line">from sklearn.metrics import r2_score</span><br><span class="line"></span><br><span class="line">x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]</span><br><span class="line">y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]</span><br><span class="line"></span><br><span class="line">mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))</span><br><span class="line"></span><br><span class="line">print(r2_score(y, mymodel(x)))</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The result 0.94 shows that there is a very good relationship, and we can use polynomial regression in future predictions.</p><h2 id="Predict-Future-Values-1"><a href="#Predict-Future-Values-1" class="headerlink" title="Predict Future Values"></a>Predict Future Values</h2><p>Now we can use the information we have gathered to predict future values.</p><p>Let us try to predict the speed of a car that passes the tollbooth at around 17 P.M:</p><p>To do so, we need the same <code>mymodel</code> array from the example above:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy</span><br><span class="line">from sklearn.metrics import r2_score</span><br><span class="line"></span><br><span class="line">x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]</span><br><span class="line">y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]</span><br><span class="line"></span><br><span class="line">mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))</span><br><span class="line"></span><br><span class="line">speed = mymodel(17)</span><br><span class="line">print(speed)</span><br><span class="line">88.87331269697987</span><br></pre></td></tr></table></figure><h1 id="Multiple-Regression"><a href="#Multiple-Regression" class="headerlink" title="Multiple Regression"></a>Multiple Regression</h1><p>Multiple regression is like linear regression, but with more than one independent value, meaning that we try to predict a value based on <strong>two or more</strong> variables.</p><p>Take a look at the data set below, it contains some information about cars.</p><table><thead><tr><th>Car</th><th>Model</th><th>Volume</th><th>Weight</th><th>CO2</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>Toyota</th><th>Aygo</th><th>1000</th><th>790</th><th>99</th></tr></thead><tbody><tr><td>Mitsubishi</td><td>Space Star</td><td>1200</td><td>1160</td><td>95</td></tr><tr><td>Skoda</td><td>Citigo</td><td>1000</td><td>929</td><td>95</td></tr><tr><td>Fiat</td><td>500</td><td>900</td><td>865</td><td>90</td></tr><tr><td>Mini</td><td>Cooper</td><td>1500</td><td>1140</td><td>105</td></tr><tr><td>VW</td><td>Up!</td><td>1000</td><td>929</td><td>105</td></tr><tr><td>Skoda</td><td>Fabia</td><td>1400</td><td>1109</td><td>90</td></tr><tr><td>Mercedes</td><td>A-Class</td><td>1500</td><td>1365</td><td>92</td></tr><tr><td>Ford</td><td>Fiesta</td><td>1500</td><td>1112</td><td>98</td></tr><tr><td>Audi</td><td>A1</td><td>1600</td><td>1150</td><td>99</td></tr><tr><td>Hyundai</td><td>I20</td><td>1100</td><td>980</td><td>99</td></tr><tr><td>Suzuki</td><td>Swift</td><td>1300</td><td>990</td><td>101</td></tr><tr><td>Ford</td><td>Fiesta</td><td>1000</td><td>1112</td><td>99</td></tr><tr><td>Honda</td><td>Civic</td><td>1600</td><td>1252</td><td>94</td></tr><tr><td>Hundai</td><td>I30</td><td>1600</td><td>1326</td><td>97</td></tr><tr><td>Opel</td><td>Astra</td><td>1600</td><td>1330</td><td>97</td></tr><tr><td>BMW</td><td>1</td><td>1600</td><td>1365</td><td>99</td></tr><tr><td>Mazda</td><td>3</td><td>2200</td><td>1280</td><td>104</td></tr><tr><td>Skoda</td><td>Rapid</td><td>1600</td><td>1119</td><td>104</td></tr><tr><td>Ford</td><td>Focus</td><td>2000</td><td>1328</td><td>105</td></tr><tr><td>Ford</td><td>Mondeo</td><td>1600</td><td>1584</td><td>94</td></tr><tr><td>Opel</td><td>Insignia</td><td>2000</td><td>1428</td><td>99</td></tr><tr><td>Mercedes</td><td>C-Class</td><td>2100</td><td>1365</td><td>99</td></tr><tr><td>Skoda</td><td>Octavia</td><td>1600</td><td>1415</td><td>99</td></tr><tr><td>Volvo</td><td>S60</td><td>2000</td><td>1415</td><td>99</td></tr><tr><td>Mercedes</td><td>CLA</td><td>1500</td><td>1465</td><td>102</td></tr><tr><td>Audi</td><td>A4</td><td>2000</td><td>1490</td><td>104</td></tr><tr><td>Audi</td><td>A6</td><td>2000</td><td>1725</td><td>114</td></tr><tr><td>Volvo</td><td>V70</td><td>1600</td><td>1523</td><td>109</td></tr><tr><td>BMW</td><td>5</td><td>2000</td><td>1705</td><td>114</td></tr><tr><td>Mercedes</td><td>E-Class</td><td>2100</td><td>1605</td><td>115</td></tr><tr><td>Volvo</td><td>XC70</td><td>2000</td><td>1746</td><td>117</td></tr><tr><td>Ford</td><td>B-Max</td><td>1600</td><td>1235</td><td>104</td></tr><tr><td>BMW</td><td>2</td><td>1600</td><td>1390</td><td>108</td></tr><tr><td>Opel</td><td>Zafira</td><td>1600</td><td>1405</td><td>109</td></tr><tr><td>Mercedes</td><td>SLK</td><td>2500</td><td>1395</td><td>120</td></tr></tbody></table><p>We can predict the CO2 emission of a car based on the size of the engine, but with multiple regression we can throw in more variables, like the weight of the car, to make the prediction more accurate.</p><p>Then make a list of the independent values and call this variable <code>X</code>.</p><p>Put the dependent values in a variable called <code>y</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X = df[[&#x27;Weight&#x27;, &#x27;Volume&#x27;]]y = df[&#x27;CO2&#x27;]</span><br></pre></td></tr></table></figure><p>From the sklearn module we will use the <code>LinearRegression()</code> method to create a linear regression object.</p><p>This object has a method called <code>fit()</code> that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regr = linear_model.LinearRegression()regr.fit(X, y)</span><br></pre></td></tr></table></figure><p>Now we have a regression object that are ready to predict CO2 values based on a car’s weight and volume:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:predictedCO2 = regr.predict([[2300, 1300]])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pandas</span><br><span class="line">from sklearn import linear_model</span><br><span class="line"></span><br><span class="line">df = pandas.read_csv(&quot;cars.csv&quot;)</span><br><span class="line"></span><br><span class="line">X = df[[&#x27;Weight&#x27;, &#x27;Volume&#x27;]]</span><br><span class="line">y = df[&#x27;CO2&#x27;]</span><br><span class="line"></span><br><span class="line">regr = linear_model.LinearRegression()</span><br><span class="line">regr.fit(X, y)</span><br><span class="line"></span><br><span class="line">#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:</span><br><span class="line">predictedCO2 = regr.predict([[2300, 1300]])</span><br><span class="line"></span><br><span class="line">print(predictedCO2)</span><br><span class="line">[107.2087328]</span><br></pre></td></tr></table></figure><p>We have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every kilometer it drives.</p><h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><p>Logistic regression aims to solve classification problems. It does this by predicting categorical outcomes, unlike linear regression that predicts a continuous outcome.</p><h1 id="Decision-Tree"><a href="#Decision-Tree" class="headerlink" title="Decision Tree"></a>Decision Tree</h1><p>To make a decision tree, all data has to be numerical.</p><p>Pandas has a <code>map()</code> method that takes a dictionary with information on how to convert the values.</p><p>Then we have to separate the <em>feature</em> columns from the <em>target</em> column. The feature columns are the columns that we try to predict <em>from</em>, and the target column is the column with the values we try to predict.</p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph</title>
      <link href="/2022/02/28/DS/Graph/"/>
      <url>/2022/02/28/DS/Graph/</url>
      
        <content type="html"><![CDATA[<h1 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>我们使用邻接矩阵来<strong>表示图的边</strong>。</p><p><img src="https://i.imgur.com/wxzX7Hr.png"></p><h2 id="邻接表法"><a href="#邻接表法" class="headerlink" title="邻接表法"></a>邻接表法</h2><p>这里的表是指链表。</p><p>表面一个顶点所邻接的边。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort</title>
      <link href="/2022/02/09/DS/Sort/"/>
      <url>/2022/02/09/DS/Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="qsort"><a href="#qsort" class="headerlink" title="qsort"></a>qsort</h1><p>qsort的使用方法如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">( <span class="type">void</span> *buf, <span class="type">size_t</span> num, <span class="type">size_t</span> size, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *))</span></span>;</span><br></pre></td></tr></table></figure><p>buf:要排序数组的起始地址<br>num：数组中元素的个数<br>size：数组中每个元素所占用的空间大小<br>compare:比较规则，需要我们传递一个函数名</p><p><strong>Example</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* left, <span class="type">const</span> <span class="type">void</span>* right)</span> </span>&#123;</span><br><span class="line"><span class="comment">//return *(ElemType*)left - *(ElemType*)right;//从小到大</span></span><br><span class="line"><span class="keyword">return</span> *(ElemType*)right - *(ElemType*)left;<span class="comment">//从大到小</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">3</span>,<span class="number">25</span>,<span class="number">42</span>,<span class="number">12</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">qsort</span>(a, <span class="number">5</span>, <span class="built_in">sizeof</span>(ElemType), compare);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>**冒泡可以是从下往上，**即将元素从前往后，两两比较，最多经过n-1趟，每一趟将一个元素有序地放在后面。</p><p>**也可以从上往下。**即将元素从后往前，两两比较，最多经过n-1趟，每一趟将一个元素有序地放在前面面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bubble_Sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line">n = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt; i; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j<span class="number">-1</span>] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">swap</span>(a[j<span class="number">-1</span>], a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Partition</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> pivot = a[low];<span class="comment">//取出第一个元素作为枢轴</span></span><br><span class="line"><span class="keyword">while</span> (low&lt;high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果a[high]大于枢轴，high一直向左移动。</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt;= pivot) &#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则，停止。让a[high]覆盖a[low]</span></span><br><span class="line">a[low] = a[high];</span><br><span class="line"><span class="comment">//如果a[low]小于枢轴，low一直向右移动。</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则，让a[low]覆盖a[high]</span></span><br><span class="line">a[high] = a[low];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后再把枢轴覆盖到high与low相遇的地方。</span></span><br><span class="line">a[low] = pivot;</span><br><span class="line"><span class="comment">//一趟下来，low的左边都比a[low]小，low的右边都比a[low]大</span></span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="comment">//切割位</span></span><br><span class="line"><span class="type">int</span> pivotpos = <span class="built_in">Partition</span>(a, low, high);<span class="comment">//low,high分别为指针</span></span><br><span class="line"><span class="built_in">QuickSort</span>(a, low, pivotpos - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">QuickSort</span>(a, pivotpos + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><p>数组的第一个元素a[0]用于存放哨兵，从第2个元素a[1]开始存放序列。</p><p>原理：</p><p>先将序列分割成前面1个有序序列（一开始元素是1个），后面1个无序序列。后面的无序序列就一个个将元素在前面的有序序列种找到合适位置插入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">a[<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; a[<span class="number">0</span>] &lt; a[j]; j--) &#123;<span class="comment">//在有序序列中从后往前遍历</span></span><br><span class="line">a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">&#125;</span><br><span class="line">a[j + <span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">InsertSort</span>(c, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="折半查找-插入"><a href="#折半查找-插入" class="headerlink" title="折半查找 插入"></a>折半查找 插入</h2><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><p>有表L[1 … n]</p><p>第i趟排序从<code>L[i...n]</code>中选择关键字最小的元素与<code>L[i</code>]进行交换，这样每一趟排序可以确定一个元素的最终位置，这样通过n-1趟排序，可以使表有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SelectSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> min;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span> ; i++)<span class="comment">//共n-1趟</span></span><br><span class="line">&#123;</span><br><span class="line">min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (A[j] &lt; A[min]) &#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (min!=i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(A[min], A[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆：把一个一维数组，在逻辑上，用<strong>层次建树的方法</strong>把它构造成一颗完全二叉树。</p><p>大根堆：任何一个父节点的值大于它的两个孩子</p><p>小根堆：任何一个父节点的值小于它的两个孩子</p><ol><li>建立堆（先向上调整，再向下调整）</li><li>不断输出根后，向下调整</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeadAdjust</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> k, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">A[<span class="number">0</span>] = A[k];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>*k; i &lt;= len; i*=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; len &amp;&amp; A[i] &lt; A[i + <span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">0</span>] &gt;= A[i]) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">A[k] = A[i];</span><br><span class="line">k = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A[k] = A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BuildMaxHeap</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span> </span>&#123;<span class="comment">//建立大根堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//从下往上调整</span></span><br><span class="line"><span class="built_in">HeadAdjust</span>(A, i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HeapSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="built_in">BuildMaxHeap</span>(A, len);<span class="comment">//建立大根堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="built_in">swap</span>(A[i], A[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">HeadAdjust</span>(A, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search</title>
      <link href="/2022/02/03/DS/Search/"/>
      <url>/2022/02/03/DS/Search/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h1><p>暴力遍历</p><ol><li><p>顺序表</p><p>通过数组下标递增来扫描每一个元素</p></li><li><p>链表</p><p>通过next指针来扫描整个链表</p></li></ol><h1 id="二分查找（折半查找）-Binary-Search"><a href="#二分查找（折半查找）-Binary-Search" class="headerlink" title="二分查找（折半查找）(Binary Search)"></a>二分查找（折半查找）(Binary Search)</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><img src="https://i.imgur.com/zQC46UH.png" style="zoom:80%;"><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_Search</span><span class="params">(ElemType e, ElemType* arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> low = <span class="number">0</span>, high = n - <span class="number">1</span>, mid;<span class="comment">//记录数组下标</span></span><br><span class="line"><span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">&#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e &lt; arr[mid]) &#123;</span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="built_in">Binary_Search</span>(<span class="number">7</span>, arr, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希查找（散列查找）-hash"><a href="#哈希查找（散列查找）-hash" class="headerlink" title="哈希查找（散列查找）(hash)"></a>哈希查找（散列查找）(hash)</h1><p>通过hash函数对要查找的内容进行转化成hash表的下标，然后，直接访问hash表，得到要找的内容or指针。</p><p>查找的时间复杂度为O(1)。</p><p><img src="https://i.imgur.com/iSe9ei3.png"></p><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree</title>
      <link href="/2022/02/01/DS/Tree/"/>
      <url>/2022/02/01/DS/Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是树的一种，每个节点最多只能有两个孩子。</p><p>树型结构是一种逻辑结构，他们同样可以用顺序结构和链式结构来实现。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树的相关数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> BiElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span> &#123;</span><br><span class="line">BiElemType c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiTNode</span>* lchild;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiTNode</span>* rchild;</span><br><span class="line">&#125;BiTNode, * BiTree;</span><br></pre></td></tr></table></figure><h2 id="层序建树"><a href="#层序建树" class="headerlink" title="层序建树"></a>层序建树</h2><p>这里要用到一个辅助链表（不带头节点）。它将记录一个个节点，一层层，插入到树中的顺序。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://i.imgur.com/dSialy6.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Header.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line"><span class="built_in">PreOrder</span>(p-&gt;lchild);</span><br><span class="line"><span class="built_in">PreOrder</span>(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">InOrder</span>(p-&gt;lchild);</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line"><span class="built_in">InOrder</span>(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">PostOrder</span>(p-&gt;lchild);</span><br><span class="line"><span class="built_in">PostOrder</span>(p-&gt;rchild);</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BiTree pnew;<span class="comment">//临时树节点</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">BiTree tree = <span class="literal">NULL</span>;<span class="comment">//树根</span></span><br><span class="line"><span class="comment">//phead就是链表头，ptail就是链表尾，pcur用于遍历链表</span></span><br><span class="line"><span class="type">ptag_t</span> phead = <span class="literal">NULL</span>, ptail = <span class="literal">NULL</span>, listpnew=<span class="literal">NULL</span>, pcur=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//abcdefghij</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pnew = (BiTree)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BiTNode));<span class="comment">//申请树结点</span></span><br><span class="line">pnew-&gt;c = c;<span class="comment">//数据放进去</span></span><br><span class="line">listpnew = (<span class="type">ptag_t</span>)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(<span class="type">tag_t</span>));<span class="comment">//申请链表结点</span></span><br><span class="line">listpnew-&gt;p = pnew;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == tree)</span><br><span class="line">&#123;</span><br><span class="line">tree = pnew;<span class="comment">//树的根</span></span><br><span class="line">phead = listpnew;<span class="comment">//链表头</span></span><br><span class="line">ptail = listpnew;<span class="comment">//链表尾</span></span><br><span class="line">pcur = listpnew;</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//建立好了根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line">ptail-&gt;pnext = listpnew;</span><br><span class="line">ptail = listpnew;</span><br><span class="line">&#125;<span class="comment">//pcur始终指向要插入的结点的位置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pcur-&gt;p-&gt;lchild)<span class="comment">//如何把新结点放入树</span></span><br><span class="line">&#123;</span><br><span class="line">pcur-&gt;p-&gt;lchild = pnew;<span class="comment">//把新结点放到要插入结点的左边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">NULL</span> == pcur-&gt;p-&gt;rchild)</span><br><span class="line">&#123;</span><br><span class="line">pcur-&gt;p-&gt;rchild = pnew;<span class="comment">//把新结点放到要插入结点的右边</span></span><br><span class="line">pcur = pcur-&gt;pnext;<span class="comment">//左右都放了结点后，pcur指向队列的下一个</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PreOrder</span>(tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">InOrder</span>(tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">PostOrder</span>(tree);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="层序遍历（广度优先遍历）"><a href="#层序遍历（广度优先遍历）" class="headerlink" title="层序遍历（广度优先遍历）"></a>层序遍历（广度优先遍历）</h3><p>从上往下对每一层依次访问，在每一层中，从左往右（也可以从右往左）访问结点，访问完一层就进入下一层，直到没有结点可以访问为止。</p><img src="https://i.imgur.com/m1IW5bc.png" style="zoom: 80%;"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">levelOrder</span><span class="params">(BiTree tree)</span> </span>&#123;</span><br><span class="line">LinkQueue lq;</span><br><span class="line"><span class="built_in">InitQueue</span>(lq);</span><br><span class="line"><span class="built_in">EnQueue</span>(lq, tree);</span><br><span class="line"></span><br><span class="line">BiTree p;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">QueueEmpty</span>(lq))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DeQueue</span>(lq, p);<span class="comment">//节点出队，并把节点赋给p</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild) &#123;</span><br><span class="line"><span class="built_in">EnQueue</span>(lq, p-&gt;lchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rchild) &#123;</span><br><span class="line"><span class="built_in">EnQueue</span>(lq, p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>对每一个可能的分支路径深入到不能再深入为止，而且每个结点只能访问一次。</p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line"><span class="built_in">PreOrder</span>(p-&gt;lchild);</span><br><span class="line"><span class="built_in">PreOrder</span>(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">InOrder</span>(p-&gt;lchild);</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line"><span class="built_in">InOrder</span>(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PostOrder</span><span class="params">(BiTree p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">PostOrder</span>(p-&gt;lchild);</span><br><span class="line"><span class="built_in">PostOrder</span>(p-&gt;rchild);</span><br><span class="line"><span class="built_in">putchar</span>(p-&gt;c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h1><p>它建立在二叉树的基础之上，分为前序，中序后序线索二叉树。线索化的时候，根据前序，中序，后序遍历的顺序形成一个链表。</p><p>如果lchild&#x3D;&#x3D;NULL，那么指向前驱节点，ltag&#x3D;1；否则ltag&#x3D;0;</p><p>如果rchild&#x3D;&#x3D;NULL，那么让指向后继节点，rtag&#x3D;1；否则rtag&#x3D;0;</p><p><img src="https://i.imgur.com/Cb7gqBJ.png"></p><h1 id="二叉排序树（二叉查找树）-Binary-Search-Tree"><a href="#二叉排序树（二叉查找树）-Binary-Search-Tree" class="headerlink" title="二叉排序树（二叉查找树）(Binary Search Tree)"></a>二叉排序树（二叉查找树）(Binary Search Tree)</h1><p><strong>注意：这里要理解递归的思想。递归的思想就是二叉树的思想，</strong></p><ol><li><p><strong>先把二叉树看成只有<code>1个根，1个左孩子，1个右孩子</code>构成（递归的第一层）。</strong></p></li><li><p><strong>接下来，又把左孩子看成根，根和根的左右孩子，他们3个又组成一颗树。（递归的第二层）。</strong></p></li><li><p><strong>又把右孩子看成根，根和根的左右孩子，他们3个又组成一颗树。（递归的第三层）。</strong></p></li><li><p>结束条件：如果左孩子或者右孩子为空。</p></li><li><p>重复2，3的过程，这样整颗树就遍历完成</p></li></ol><h2 id="BST的三原则"><a href="#BST的三原则" class="headerlink" title="BST的三原则"></a>BST的三原则</h2><ol><li>左子树的所有节点要比根小</li><li>右子树的所有节点要比根大</li><li>左子树右子树又可以是一颗二叉排序树</li></ol><h2 id="BST的创建"><a href="#BST的创建" class="headerlink" title="BST的创建"></a>BST的创建</h2><h3 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h3><img src="https://i.imgur.com/53bODU9.png" style="zoom:80%;"><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> BiElemType ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span> &#123;</span><br><span class="line">BiElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiTNode</span>* lchild;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BiTNode</span>* rchild;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert_BST</span><span class="params">(BiTree&amp; t, BiElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == t) &#123;</span><br><span class="line">t = (BiTree)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="built_in">sizeof</span>(BiTNode));</span><br><span class="line">t-&gt;data = e;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e == t-&gt;data) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e &lt; t-&gt;data) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Insert_BST</span>(t-&gt;lchild, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Insert_BST</span>(t-&gt;rchild, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Create_BST</span><span class="params">(BiTree &amp;t, BiElemType *arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert_BST</span>(t, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BST的查找（折半查找）"><a href="#BST的查找（折半查找）" class="headerlink" title="BST的查找（折半查找）"></a>BST的查找（折半查找）</h2><p>因为二叉查找树是有序的，所以，我们可以用折半查找的方法，可以提高查找效率。BST的查找次数最多只是树的高度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_Search</span><span class="params">(ElemType e, ElemType* arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> low = <span class="number">0</span>, high=n<span class="number">-1</span>, mid;<span class="comment">//记录数组下标</span></span><br><span class="line"><span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">&#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e &lt; arr[mid]) &#123;</span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2022/01/28/DS/Queue/"/>
      <url>/2022/01/28/DS/Queue/</url>
      
        <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列这种逻辑结构，也能用顺序表和链表实现，本次主要讲用顺序结构实现的循环队列。</p><p><strong>队列是一种被限制的线性表，只能在队列的队头进行删除，在队尾进行增加</strong></p><h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><p>首先，我们要先认识一下循环队列。这里的循环队列，我们用顺序结构（数组）实现。</p><p><strong>从逻辑上，把队头和队尾拼接起来。（当指针指向队尾，再往前移动一个位置，就%MaxSize）</strong></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front;<span class="comment">//指向队头元素</span></span><br><span class="line"><span class="type">int</span> rear;<span class="comment">//指向队尾元素的下一个元素</span></span><br><span class="line">&#125; SqQueue;</span><br></pre></td></tr></table></figure><p>要面临的两个问题是：</p><ol><li><p>队列为空的条件。</p></li><li><p>队列为满的条件。</p></li></ol><p>由于队列在增加和删除的过程中，元素在队列中的序号是变化的，所以不能像栈一样用常量-1表示。所以，我们定义<code>q.front == q.rear</code>即队列为空。定义<code>(q.rear + 1) % MaxSize == q.front</code>队列为满。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.imgur.com/Xsyi9aJ.png"></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>循环队列不像顺序表和链表那样把元素真正增加，删除，而是去更改头尾指针。</strong></p><p><strong>出入队时，都让指针往顺时针方向进1</strong></p><p><img src="https://i.imgur.com/mJThySr.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(SqQueue &amp;q)</span> </span>&#123;</span><br><span class="line">q.front = q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(SqQueue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (q.front == q.rear) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsFull</span><span class="params">(SqQueue q)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((q.rear + <span class="number">1</span>) % MaxSize == q.front) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue&amp; q, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsFull</span>(q)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.data[q.rear] = e;</span><br><span class="line">q.rear = (q.rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue&amp; q, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsEmpty</span>(q)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = q.data[q.front];</span><br><span class="line">q.front = (q.front + <span class="number">1</span>) % MaxSize;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h1><p>这类似于单链表，与单链表最大的不同是，它是由一个头指针<code>front</code>和尾指针<code>rear</code>，只用他们来操作单链表。</p><h2 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队列节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkNode</span>* next;</span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列头尾指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">LinkNode* front;</span><br><span class="line">LinkNode* rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><ol><li><p>队列为空的条件</p><p><code>front==rear</code></p></li></ol><h2 id="流程图-1"><a href="#流程图-1" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.imgur.com/28p1wYC.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"><span class="comment">//队列节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinkNode</span>* next;</span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列头尾指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">LinkNode* front;</span><br><span class="line">LinkNode* rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue&amp; lq)</span> </span>&#123;</span><br><span class="line"><span class="comment">//头节点</span></span><br><span class="line">LinkNode* s = (LinkNode *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">lq.front = lq.rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue&amp; lq,ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//新节点</span></span><br><span class="line">LinkNode* s = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LinkNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line">lq.rear-&gt;next = s;</span><br><span class="line"><span class="comment">//更新链队列（头尾指针）</span></span><br><span class="line">lq.rear = s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkQueue lq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (lq.front == lq.rear) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; lq, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsEmpty</span>(lq)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先让p指向第一个元素</span></span><br><span class="line">LinkNode* p = lq.front-&gt;next;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line"><span class="comment">//修改指针</span></span><br><span class="line">lq.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="comment">//判断是否为最后一个元素，是就让头尾指针指向头节点。</span></span><br><span class="line"><span class="keyword">if</span> (lq.rear == p) &#123;</span><br><span class="line">lq.rear = lq.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkQueue lq;</span><br><span class="line"><span class="built_in">InitQueue</span>(lq);</span><br><span class="line"><span class="built_in">EnQueue</span>(lq, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">EnQueue</span>(lq, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">EnQueue</span>(lq, <span class="number">5</span>);</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">IsEmpty</span>(lq))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DeQueue</span>(lq, e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2022/01/28/DS/Stack/"/>
      <url>/2022/01/28/DS/Stack/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈也是一种线性表，它也可以由顺序表，和链表来实现。</p><p><strong>只不过栈是一种被限制的线性表，它只能对栈顶（线性表的最末端的元素）进行基本操作（增删改查）。</strong></p><p>本次，主要讲栈的顺序存储结构。</p><h1 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol><li>数组data[MaxSize]</li><li>当前栈顶top</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h2 id="操作流程图"><a href="#操作流程图" class="headerlink" title="操作流程图"></a>操作流程图</h2><p><img src="https://i.imgur.com/tJ2MsOH.png"></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">(SqStack &amp;s)</span> </span>&#123;</span><br><span class="line">s.top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(SqStack s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.top == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsFull</span><span class="params">(SqStack s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.top &gt;= MaxSize - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; s, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsFull</span>(s)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s.data[++s.top] = e;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack&amp; s, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsEmpty</span>(s)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e=s.data[s.top--];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack s, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsEmpty</span>(s)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = s.data[s.top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List</title>
      <link href="/2022/01/24/DS/List/"/>
      <url>/2022/01/24/DS/List/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是一种逻辑结构，是有序的，所有元素类型相同。</p><p>它可以由顺序表和链表（存储结构）来实现。</p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><ol><li><p>结构：</p><p>数组（空间）。<code>ElemType data[MaxSize];</code></p><p>当前长度。<code>int len;</code></p></li></ol><h2 id="插入，删除"><a href="#插入，删除" class="headerlink" title="插入，删除"></a>插入，删除</h2><p>初始化顺序表（顺序表中元素为整型），里边的元素是1,2,3，然后通过scanf读取一个元素（假如插入的是6），插入到第2个位置，打印输出顺序表，每个元素占3个空格，格式为1  6  2  3，然后scanf读取一个整型数，是删除的位置（假如输入为1），然后输出顺序表  6  2  3，假如输入的位置不合法，输出false字符串。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(SqList l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l.len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, l.data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert</span><span class="params">(SqList&amp; l, ElemType e, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断插入位置是否合法</span></span><br><span class="line"><span class="keyword">if</span> (n&lt;<span class="number">1</span> || n&gt;l.len) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断插入后是否超出SqList的最大长度</span></span><br><span class="line"><span class="keyword">if</span> (l.len == MaxSize) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将从1开始的数，全-1，变成从0开始</span></span><br><span class="line"><span class="type">int</span> len = l.len - <span class="number">1</span>;</span><br><span class="line">n = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt;= n; i--) &#123;</span><br><span class="line">l.data[i + <span class="number">1</span>] = l.data[i];</span><br><span class="line">&#125;</span><br><span class="line">l.data[n] = e;</span><br><span class="line">l.len++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Delete</span><span class="params">(SqList&amp; l, <span class="type">int</span> n, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n&lt;<span class="number">1</span> || n&gt;l.len) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整理序号</span></span><br><span class="line">n--;</span><br><span class="line"><span class="type">int</span> len = l.len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">e = l.data[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt; len; i++) &#123;</span><br><span class="line">l.data[i] = l.data[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">l.len--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表的大小在程序运行时动态创建。</p><ol><li><p>结构</p><p>当前节点数据</p><p>指向下一个节点的指针（地址）</p></li><li><p>头节点（下面的链表都有头节点）</p><p>我们只<strong>记录链表的头节点地址</strong>，称头指针。并且，<strong>头节点不存放数据</strong></p><p><img src="https://i.imgur.com/C7YscDO.png"></p></li></ol><h2 id="头插法（逆向建立链表）"><a href="#头插法（逆向建立链表）" class="headerlink" title="头插法（逆向建立链表）"></a>头插法（逆向建立链表）</h2><p>头插法需要运用到插入操作。</p><p><img src="https://i.imgur.com/jsqbMMn.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;next = l-&gt;next;</span><br><span class="line">l-&gt;next = s;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">Create_List_1</span><span class="params">(LinkList&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line">l = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//s用于指向新节点</span></span><br><span class="line">LNode* s;</span><br><span class="line">ElemType i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="keyword">while</span> (i != <span class="number">9999</span>) &#123;</span><br><span class="line">s = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data = i;</span><br><span class="line">s-&gt;next = l-&gt;next;</span><br><span class="line">l-&gt;next = s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾插法（正向建立链表）"><a href="#尾插法（正向建立链表）" class="headerlink" title="尾插法（正向建立链表）"></a>尾插法（正向建立链表）</h2><p>要新建一个<strong>额外的指针，指向尾节点，这样可以不断往后放。最后把尾节点的next&#x3D;&#x3D;NULL</strong></p><p><img src="https://i.imgur.com/t9FVxoE.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拼接节点 r-&gt;next = s;</span></span><br><span class="line"><span class="comment">//更新尾节点 r = s;</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">Create_List_2</span><span class="params">(LinkList&amp; l)</span> </span>&#123;</span><br><span class="line"><span class="comment">//新建头节点</span></span><br><span class="line">l = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//新节点</span></span><br><span class="line">LNode* s, *r=l;<span class="comment">//r指向尾节点</span></span><br><span class="line">ElemType i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="keyword">while</span> (i!=<span class="number">9999</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data = i;</span><br><span class="line">        <span class="comment">//拼接节点</span></span><br><span class="line">r-&gt;next = s;</span><br><span class="line"><span class="comment">//更新尾节点</span></span><br><span class="line">r = s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找($$$)"></a>查找($$$)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按序号查找</span></span><br><span class="line"><span class="function">LinkList <span class="title">GetElem</span><span class="params">(LinkList l, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">LNode* p = l-&gt;next;<span class="comment">//让p指向第一个元素(头节点的下一个)</span></span><br><span class="line"><span class="type">int</span> j = <span class="number">1</span>;<span class="comment">//计链表的序号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == i) &#123;<span class="comment">//第0元素（头节点）</span></span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;<span class="comment">//i无效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (p &amp;&amp; j &lt; i)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//返回节点指针，如果超过链表长度，返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p><strong>要注意的一个点是：原来的链一定要放到最后断开，否则，后面的节点就找不到了。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FrontInsert</span><span class="params">(LinkList l,ElemType e, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">LNode *p=<span class="built_in">GetElem</span>(l, i<span class="number">-1</span>);<span class="comment">//获取要插入的前一个节点的指针</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Delete</span><span class="params">(LinkList l, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">LNode* p = <span class="built_in">GetElem</span>(l, i<span class="number">-1</span>);<span class="comment">//获得要删除元素的前一个节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode* s = p-&gt;next;<span class="comment">//指向要删除元素，以便free</span></span><br><span class="line"><span class="comment">//链接好删除后的元素</span></span><br><span class="line">p-&gt;next = s-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line">s = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">DNode</span> &#123;</span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>* prior;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DNode</span>* next;</span><br><span class="line">&#125;DNode, * DLinkList;</span><br></pre></td></tr></table></figure><h2 id="头插法（逆向建立链表）-1"><a href="#头插法（逆向建立链表）-1" class="headerlink" title="头插法（逆向建立链表）"></a>头插法（逆向建立链表）</h2><p>原来的链一定要放到最后断开，否则，后面的节点就找不到了。</p><p>判断dl-&gt;next不为空时，才让下一个节点的prior指向新节点<code>if (dl-&gt;next)&#123;dl-&gt;next-&gt;prior = s;&#125;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DLinkList <span class="title">Dlist_head_insert</span><span class="params">(DLinkList&amp; dl)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建头节点</span></span><br><span class="line">dl = (DNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">dl-&gt;prior = dl-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line"><span class="keyword">while</span> (e != <span class="number">9999</span>)</span><br><span class="line">&#123;</span><br><span class="line">DNode* s = (DNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DNode));</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = dl-&gt;next;</span><br><span class="line">s-&gt;prior = dl;</span><br><span class="line"><span class="keyword">if</span> (dl-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">dl-&gt;next-&gt;prior = s;</span><br><span class="line">&#125;</span><br><span class="line">dl-&gt;next = s;<span class="comment">//断链一定要放最后</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);<span class="comment">//循环读入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li><p>当我们遇到序号从0开始，和序号从1开始时，我们怎么把他们变成相同的序号。</p><p>我们可以把将从1开始的全部序号-1，那么从1开始的序号就变成了从0开始。</p><p>or</p><p>把将从0开始的全部序号+1，那么从0开始的序号就变成了从1开始。</p></li><li><p>数据结构的基本操作</p><p>所有的数据结构的基本操作都大致相同，都是4种。增，删，改，查</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic_Syntax</title>
      <link href="/2022/01/23/c/Basic_Syntax/"/>
      <url>/2022/01/23/c/Basic_Syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><ul><li><p>整型int（4B&#x3D;32b，可以表示2^32)</p><p>long long(8B&#x3D;64b，可以表示2^64个数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符型char（1B&#x3D;8b）</p><p>用单引号<code>&#39;&#39;</code>括起来的，只能包含一个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>浮点型</p><ul><li>单精度float(4B&#x3D;32b)</li><li>双精度double(8B&#x3D;32b)</li></ul></li><li><p>字符串常量</p><p>使用双引号<code>&quot;&quot;</code>将字符串括起来。</p><ul><li><p>控制字符</p><p>字符串里可以有3种控制字符，</p><p><code>%d</code> 十进制整数</p><p><code>%f</code>浮点数</p><p><code>%c</code>字符</p><p>当然字符串的后面需要<code>,</code>来隔开参数</p></li></ul></li></ul><h2 id="构造类型"><a href="#构造类型" class="headerlink" title="构造类型"></a>构造类型</h2><ul><li>数组[]</li><li>结构struct</li><li>联合union</li><li>枚举enum</li></ul><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><ul><li>指针*</li></ul><h2 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h2><ul><li>void</li></ul><h1 id="混合运算"><a href="#混合运算" class="headerlink" title="混合运算"></a>混合运算</h1><p><strong>C是根据表达式中的数据类型来得到结果的类型</strong></p><p><strong>e.g.</strong></p><p>因为5和2是整型，得到整形的2，再通过类型转换等到2.000000</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f = <span class="number">5</span> / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, f);</span><br><span class="line"><span class="number">2.000000</span></span><br></pre></td></tr></table></figure><p>那么，我们怎么输出2.5呢？</p><p><strong>直接让表达式中的一个数的数据类型变成浮点类型（强制转换）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f = (<span class="type">float</span>)<span class="number">5</span> / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, f);</span><br><span class="line"><span class="number">2.500000</span></span><br></pre></td></tr></table></figure><h1 id="scanf的原理"><a href="#scanf的原理" class="headerlink" title="scanf的原理"></a><code>scanf</code>的原理</h1><ul><li>我们在终端输入时，当终端遇到<code>\n</code>时，才进行I&#x2F;O操作，即将内容复制到内存中的<code>缓存区</code>中（包括<code>\n</code>）。</li><li>scanf()会不停对缓冲区检测。当内存中的缓冲区为空时，scanf()会对进程进行阻塞。</li></ul><p><strong>缓冲区不为空时，<code>scanf()</code>会通过给定的字符与缓冲区匹配，控制字符（%d,%f,%c…)与缓冲区转化，并通过<code>&amp;</code>取走。</strong></p><p><code>printf()</code>正好与<code>scanf()</code>相反，通过控制字符（%d,%f,%c…)，转换成字符串，并输出到屏幕</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;i=%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);<span class="comment">//读取&#x27;\n&#x27;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);<span class="comment">//输出&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=<span class="number">3</span><span class="comment">//输入</span></span><br><span class="line"><span class="number">3</span><span class="comment">//输出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="d-f-lf"><a href="#d-f-lf" class="headerlink" title="%d %f %lf"></a>%d %f %lf</h2><p>清除缓冲区的非空字符（清除一开始的空白和<code>\n</code>）开始读，直到遇到空白和<code>\n</code>结束。所以<code>\n</code>会留在缓冲区。</p><p>这里%d与%d中间加不加空格都可以。如果没有空格，scanf中的%d跳过空格。如果有，匹配空格 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在输入中两个数要加空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2//输入</span><br><span class="line">3//输出</span><br></pre></td></tr></table></figure><p>如果我这样，肯定是不行的。<strong>因为第2个%d读的是逗号，scanf并不会赋值给b，而是直接结束返回</strong>。b还是原来的未定义值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,2//输入</span><br><span class="line">-858993459//输出</span><br></pre></td></tr></table></figure><h2 id="c"><a href="#c" class="headerlink" title="%c"></a>%c</h2><p><code>scanf(&quot;%c&quot;, ch)</code>它读取一个字符。关键是它不会清除空白，也不会清除<code>\n</code></p><p>整形数在<code>0-128</code>直接，可以用%c输出</p><h2 id="s"><a href="#s" class="headerlink" title="%s"></a>%s</h2><p>清除缓冲区的非空字符（清除一开始的空白和<code>\n</code>），到空白和<code>\n</code>结束</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>], e[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, c, e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s---%s&quot;</span>, c, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><ul><li><p>出错时，返回<code>EOF</code>&#x3D;1</p><p>多次Ctrl+z结束while循环，使scanf出错</p></li><li><p>匹配缓冲区失败，返回0</p><p>E.g.当用%d遇到字符a时。</p></li><li><p>匹配缓冲区成功变量的个数</p></li></ul><h2 id="scanf循环输入"><a href="#scanf循环输入" class="headerlink" title="scanf循环输入"></a>scanf循环输入</h2><h3 id="循环输入整数"><a href="#循环输入整数" class="headerlink" title="循环输入整数"></a>循环输入整数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i, ret;</span><br><span class="line"><span class="keyword">while</span> (rewind(<span class="built_in">stdin</span>), (ret=<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i))!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i=%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环输入字符"><a href="#循环输入字符" class="headerlink" title="循环输入字符"></a>循环输入字符</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;c))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环输入混合类型数据"><a href="#循环输入混合类型数据" class="headerlink" title="循环输入混合类型数据"></a>循环输入混合类型数据</h3><ul><li>要点：在<code>%c</code>前加入一个空格</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">float</span> f;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %c%f&quot;</span>,&amp;i,&amp;c,&amp;f))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %c %.2f\n&quot;</span>, i, c, f);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h1><ul><li><p>算术运算符(+, -, *, &#x2F;, %)</p><p>由算术运算符所组成的表达式，称算术表达式</p><figure class="highlight c"><figcaption><span>逆序输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">n = n / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关系运算符（&gt;, &lt;, &#x3D;&#x3D;, &gt;&#x3D;, &lt;&#x3D;, !&#x3D;)</p><p><strong>C语言认为一切非0值都是真</strong>，C语言没有布尔类型</p><p>不要用关系运算符连写（1&lt;a&lt;8)，是错误的</p></li><li><p>逻辑运算符（!, &amp;&amp;, ||)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">2</span> &amp;&amp; a &lt; <span class="number">10</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a is right&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a is wrong&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>赋值运算符（&#x3D;）</p><p>赋值运算符的左边只能放变量</p></li><li><p>逗号运算符(,)</p><p>逗号表达式的整体值是最后一个表达式的值</p></li><li><p>自增自减运算符（++，–）</p><p><strong>注意：<code>i++</code>和<code>++i</code></strong></p><p>如果是<code>i++</code>那么，<strong>就让等到本语句运行完后，最后才将i&#x3D;i+1，记住它是直接改变i的值</strong></p><p>如果是<code>++i</code>，直接按优先级运算即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line">j = i++ &gt; <span class="number">-1</span>;<span class="comment">//任何时候，先去掉 后++，等到本语句运行完后，再执行++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i=%d,j=%d&quot;</span>, i, j);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>sizeof运算符</p><p>打印变量的占据的字节数</p></li></ul><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ul><li>while</li><li>for</li></ul><p>当需要运行指定数量的循环时，就用for。当需要某个条件使循环结束时就用while</p><h2 id="for的执行循序"><a href="#for的执行循序" class="headerlink" title="for的执行循序"></a>for的执行循序</h2><p>for（表达式1;表达式2;表达式3）语句；<br>for循环语句的执行过程如下<br>（1）先求解表达式1。<br>（2）求解表达式2,</p><p>​为真（值为非0）,则先执行for语句中指定的内嵌语句，后执行 第（3）步。</p><p>​为假（值为0），则结束循环，转到第（5）步。</p><p>  (3) 求解表达式3</p><p>  (4)  转回第(2)步继续执行。<br>  (5)  循环结束</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><code>数组名[常量表达式]</code>，<strong>数组名是一个地址常量。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//c=&quot;world&quot;//不能对地址常量c进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组具有以下特点：</p><ol><li>相同数据类型</li><li>过程中需要保存数据</li><li>空间大小指定</li></ol><h2 id="访问越界："><a href="#访问越界：" class="headerlink" title="访问越界："></a>访问越界：</h2><p>访问越界会造成：Stack around the variable ‘a’ was corrupted.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">6</span>;<span class="comment">//访问越界</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传递整型数组"><a href="#传递整型数组" class="headerlink" title="传递整型数组"></a>传递整型数组</h2><p>当我们传递数组时，不会把整个数组传递过去。<strong>只会传递数组的起始地址。</strong></p><p><strong>所以，我们传递数组时，还要传递数组长度</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[%d]=%d\n&quot;</span>, i, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">print(a, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><p>我们用字符数组来存储字符串，字符串的结束标志为<code>\0</code>，所以，<strong>数组的长度要比字符串长度至少多1个字节。</strong></p><p>如果字符数组长度大于字符串长度，会自动添加<code>\0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c[<span class="number">6</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br></pre></td></tr></table></figure><p>还可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br></pre></td></tr></table></figure><h2 id="传递字符数组"><a href="#传递字符数组" class="headerlink" title="传递字符数组"></a>传递字符数组</h2><p>由于字符串的最后一个字节有<code>\0</code>，所以我们可以利用最后一个字节为假，作为结束符号。这样，就不用像整型数组一样，传递长度了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> c[])</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (c[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">print(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入一行字符"><a href="#输入一行字符" class="headerlink" title="输入一行字符"></a>输入一行字符</h2><p>我们可以用gets()来读取一行，它读到<code>\n</code>才开始赋值（并把<code>\n</code>换成<code>\0</code>)。他不像scanf那样，读到空格或<code>\n</code>就赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>];</span><br><span class="line">gets(c);</span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串操作（str系列）"><a href="#字符串操作（str系列）" class="headerlink" title="字符串操作（str系列）"></a>字符串操作（str系列）</h1><p>有const的话，即可以放字符串常量，也可放变量</p><ul><li><p>strlen()<br><code>unsigned int strlen(const char *str)</code></p></li><li><p>strcpy()<br><code>char *strcpy(char *dest,const char *src)</code></p></li><li><p>strcmp()<br><code>int strcmp(const char *str1, const char *str2)</code></p><p>当str1指向的字符串大于str2指向的字符串时，返回正数。</p><p>当str1指向的字符串等于str2指向的字符串时，返回0。</p><p>当str1指向的字符串小于str2指向的字符串时，返回负数。</p></li><li><p>strcat()<br><code>char * strcat(char *dest,const char *src)</code></p><p>此函数原型为 char *strcat(char *dest, const char *src).</p><p>功能为连接两个字符串，把src连接到dest后面；返回dest地址</p></li></ul><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>指针就是地址变量，用于存放地址。</p><p>使用场景：传递和偏移</p><ul><li><p>指针变量也是有类型的。（e.g.<code>int*</code>,<code>float *</code>…)</p><p>只能把同类型的地址存放在同类型的指针变量中。</p></li></ul><h2 id="指针的声明"><a href="#指针的声明" class="headerlink" title="指针的声明"></a>指针的声明</h2><p><code>int * p</code>表明</p><ol><li><code>p</code>是指针</li><li><code>*p</code>的类型是int</li><li><code>*</code>是告诉编译器p是一个指针</li></ol><p>声明多个指针</p><p><code>int *p1, *p2, *p3</code></p><p>可以看到指针是用于存放地址的，其空间大小，就表示地址总线的条数（1条&#x3D;1b），32位就是4字节。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="type">char</span>* c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,<span class="keyword">sizeof</span>(p), <span class="keyword">sizeof</span>(c));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="keyword">sizeof</span>(*p), <span class="keyword">sizeof</span>(*c));</span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>注意：指针的声明和使用是两个东西</strong></p><h2 id="指针的偏移"><a href="#指针的偏移" class="headerlink" title="指针的偏移"></a>指针的偏移</h2><p>对指针变量进行加减运算。如果+1，并不是+1B（按字节编号），<strong>而是加了指针类型所占据的字节。</strong></p><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p=a;</span><br><span class="line">p+<span class="number">1</span><span class="comment">//这里+1就是+4</span></span><br></pre></td></tr></table></figure><h2 id="指针的-和–"><a href="#指针的-和–" class="headerlink" title="指针的++和–"></a>指针的++和–</h2><p><strong>任何时候都先把 后++ 去掉，等整个语句运行完后。再按照优先级对相应的变量执行 后++</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123; <span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">p = a;</span><br><span class="line">j = *p++;<span class="comment">//任何时候都先把 后++ 去掉，等整个语句运行完后，再执行p++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0]=%d, j=%d,*p=%d\n&quot;</span>, a[<span class="number">0</span>], j, *p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//p先指向a[0], 再取值赋值给j, 最后指向p++，让p指向a[1]</span></span><br><span class="line"><span class="comment">//a[0]=2, j=2,*p=7</span></span><br></pre></td></tr></table></figure><h2 id="指针的注意事项"><a href="#指针的注意事项" class="headerlink" title="指针的注意事项"></a>指针的注意事项</h2><p><code>*p</code>：这个东西好像是一个指针变量的值，但这样理解并不深入。</p><p><strong>下面的例子，我们应该把<code>*p==a[0]</code>，改变*p就是改变a[0]</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123; <span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">p = a;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123; <span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span> &#125;;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">p = a;</span><br><span class="line">j = (*p)++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0]=%d, j=%d,*p=%d\n&quot;</span>, a[<span class="number">0</span>], j, *p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>]=<span class="number">3</span>, j=<span class="number">2</span>,*p=<span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><ul><li><p>代码区：存放代码</p></li><li><p>数据区：全局变量，字符串常量（程序中所有的相同的字符串常量，只存放一个）。这个区只能读，不能写。</p><p>这里”hello”是字符串常量，p指向数据区，所以不能更改。而<code>char c[20] = &quot;hello&quot;;</code>是让字符串常量的每一个字符复制到栈区。所以可以，更改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span>* p = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p[0] = &#x27;a&#x27;; //不能对常量更改</span></span><br><span class="line">c[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//可以对栈区更改</span></span><br><span class="line"><span class="built_in">printf</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>栈空间：整型，浮点型，字符型变量，数组变量，函数，都在栈空间中。</p><p>栈空间在编译的时候就确定好。</p></li><li><p>堆空间：<strong>需要申请，也需要释放</strong></p></li></ul><h1 id="动态申请堆"><a href="#动态申请堆" class="headerlink" title="动态申请堆"></a>动态申请堆</h1><h2 id="malloc-："><a href="#malloc-：" class="headerlink" title="malloc()："></a><code>malloc()</code>：</h2><p>单位：字节B</p><p>返回值：无类型指针。<strong>所以，要用强制类型转换，转换成指定类型的指针。</strong></p><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc()"></a><code>calloc()</code></h2><p>申请空间，并对空间赋值为0</p><h2 id="free"><a href="#free" class="headerlink" title="free()"></a><code>free()</code></h2><p>释放空间必须与原来申请的指针一致，不能偏移。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p=<span class="literal">NULL</span>;<span class="comment">//free完之后，把p置为NULL，否则，就是野指针（指针没有一个确定的地址）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i;<span class="comment">//申请字节数</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="type">char</span>* p;</span><br><span class="line">p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(i);<span class="comment">//指定指针类型为char*</span></span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">&quot;malloc success&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数调用的本质"><a href="#函数调用的本质" class="headerlink" title="函数调用的本质"></a>函数调用的本质</h2><p>CPU通过PC得到main函数（代码区）的地址，main函数创建栈帧用于存放局部变量。main可能调用其他函数fun，PC就会指向fun的地址，fun函数也会申请栈帧。当fun函数结束，这个栈帧就会释放。（所以，栈区在逻辑上就数据结构上的栈，后进先出），PC就会返回主调函数。</p><ul><li><p>函数传递的参数是值传递，就是复制一个值给函数。</p></li><li><p>函数在栈中，其栈空间会随函数的调用而开辟，到结束而释放。</p></li><li><p>注意：自己申请的堆空间不会随函数的结束而释放。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_stack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> c[<span class="number">20</span>]= <span class="string">&quot;I am a stack&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span>* p;</span><br><span class="line">p = my_stack();</span><br><span class="line"><span class="built_in">puts</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">I am a <span class="built_in">stack</span></span><br><span class="line"><span class="number">7</span>Zy</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">my_heap</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span>* c = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(c, <span class="string">&quot;I am a heap&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span>* p;</span><br><span class="line">p = my_heap();</span><br><span class="line"><span class="built_in">puts</span>(p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">I am a heap</span><br><span class="line">I am a heap</span><br></pre></td></tr></table></figure><h2 id="递归的本质"><a href="#递归的本质" class="headerlink" title="递归的本质"></a>递归的本质</h2><p>函数调用自己，pc不断重回函数起始位置，但代价是每调用一次，在栈区就会多申请一个栈帧。如果，这样一直调用就会导致栈溢出，所以我们必须设置递归出口。</p><p>the process of repeating a function, each time applying it to the result of the previous stage.</p><p>​<img src="https://i.imgur.com/z6KjqPX.png"></p><h3 id="要记住的二要素（分治合）"><a href="#要记住的二要素（分治合）" class="headerlink" title="要记住的二要素（分治合）"></a>要记住的二要素（分治合）</h3><ol><li>大问题——&gt;小问题的递推关系（假设小问题已解决）</li><li>找到最小问题</li></ol><p>递归就是不断压栈，得到最小问题。然后不断弹栈，计算出更大的问题。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;<span class="comment">//大问题</span></span><br><span class="line">    <span class="comment">//设置最小问题出口</span></span><br><span class="line">    <span class="built_in">func</span>(n<span class="number">-1</span>);<span class="comment">//小问题（假设已经解决）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>n的阶乘</strong></p><p>求n!（大问题），小问题是(n-1)!，递推关系：n!&#x3D;n*(n-1)!</p><p>最小问题n&#x3D;1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fac</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span>&#123;<span class="comment">//大问题</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==n)&#123;<span class="comment">//n=1时就走</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="built_in">fac</span>(n<span class="number">-1</span>);<span class="comment">//小问题（假设已解决）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">fac</span>(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><ol><li><p>声明结构体类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>//<span class="keyword">struct</span>是关键字，<span class="title">student</span>是数据类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">float</span> score;</span><br><span class="line">&#125;;<span class="comment">//最后一定加分号</span></span><br></pre></td></tr></table></figure></li><li><p>定义变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123; <span class="number">1</span>,<span class="string">&quot;ferry&quot;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="number">20</span>,<span class="number">100.0</span> &#125;;<span class="comment">//定义，初始化。struct关键字还要写</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3];</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><p>由于定义一个结构体变量要写struct关键字，和类型，所以很麻烦，所以我们使用typedef来给结构体一个别名。</p><p><strong>这样就可以在定义的时候，不用写关键字struct</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line">&#125;stu, *pstu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">stu s = &#123; <span class="number">19</span>,<span class="string">&quot;ferry&quot;</span>,<span class="string">&#x27;M&#x27;</span> &#125;;</span><br><span class="line">pstu p = &amp;s;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的大小"><a href="#结构体的大小" class="headerlink" title="结构体的大小"></a>结构体的大小</h2><p>这里涉及到<code>内存对齐</code>的知识。</p><p>对齐的目的是为了访问提高cpu访问内存的效率</p><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span> =</span> &#123; <span class="number">1</span>,<span class="string">&quot;ferry&quot;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="number">20</span>,<span class="number">100.0</span> &#125;;<span class="comment">//定义，初始化。struct关键字还要写</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">p</span>;</span></span><br><span class="line">p = &amp;s;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %d %f&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;sex, p-&gt;score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %s %c %d %f&quot;</span>, (*p).num, (*p).name, (*p).sex, (*p).score);</span><br></pre></td></tr></table></figure><p>-&gt;与后++优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">sarr</span>[3] =</span> &#123;<span class="number">1001</span>,<span class="string">&quot;lilei&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1005</span>,<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="number">1007</span>,<span class="string">&quot;lili&quot;</span>,<span class="string">&#x27;F&#x27;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">p</span>=</span>&amp;sarr; <span class="comment">//定义结构体指针</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="comment">//-&gt;比++优先级大</span></span><br><span class="line">num = p-&gt;num++;<span class="comment">//先执行num=p-&gt;num, 再按优先级加加 p-&gt;num++;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num=%d,p-&gt;num=%d\n&quot;</span>, num, p-&gt;num);<span class="comment">//1001 1002</span></span><br><span class="line"></span><br><span class="line">num = p++-&gt;num;<span class="comment">//先执行num=p-&gt;num, 再按优先级加加 p++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num=%d,p-&gt;num=%d\n&quot;</span>, num, p-&gt;num);<span class="comment">//1002 1005</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-的引用"><a href="#C-的引用" class="headerlink" title="C++的引用"></a>C++的引用</h1><p>首先要把文件类型改成<code>.cpp</code></p><h2 id="更改值"><a href="#更改值" class="headerlink" title="更改值"></a>更改值</h2><p><strong>引用是为了在我们要在子函数中更改变量的时候，不用写指针的<code>*</code>，传递变量名就可以直接更改主函数中变量的值</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modifynum</span><span class="params">(<span class="type">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">modifynum</span>(i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="更改指针"><a href="#更改指针" class="headerlink" title="更改指针"></a>更改指针</h2><p><strong>引用是为了在我们要子函数中更改指针的时候，不用写指针的<code>**</code>，传递指针就可以直接更改主函数中的指针</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_point</span><span class="params">(<span class="type">int</span>*&amp; p)</span> </span>&#123;</span><br><span class="line">p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">modify_point</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小常识"><a href="#小常识" class="headerlink" title="小常识"></a>小常识</h1><p>程序阻塞的情况：</p><ol><li>I&#x2F;O操作。（scanf, gets 检测到缓冲区为空）</li><li>无限循环</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取图片</title>
      <link href="/2022/01/21/project/%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/"/>
      <url>/2022/01/21/project/%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="页面滚动"><a href="#页面滚动" class="headerlink" title="页面滚动"></a>页面滚动</h1><p>由于很多的页面都是动态加载的，在用selenium模拟浏览器时，如果不滚动页面下方，那么有的页面数据就无法加载，所以需要让selenium执行js代码，对页面进行滚动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scroll</span>(<span class="params">browser</span>):</span><br><span class="line">    <span class="comment"># 执行这段代码，会获取到当前窗口总高度</span></span><br><span class="line">    js = <span class="string">&quot;return action=document.body.scrollHeight&quot;</span></span><br><span class="line">    <span class="comment"># 初始化现在滚动条所在高度为0</span></span><br><span class="line">    height = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 当前窗口总高度</span></span><br><span class="line">    new_height = browser.execute_script(js)</span><br><span class="line">    <span class="keyword">while</span> height &lt; new_height:</span><br><span class="line">        <span class="comment"># 将滚动条调整至页面底部</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(height, new_height, <span class="number">300</span>):</span><br><span class="line">            browser.execute_script(<span class="string">&#x27;window.scrollTo(0, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(k))</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        height = new_height</span><br><span class="line">        new_height = browser.execute_script(js)</span><br></pre></td></tr></table></figure><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><p>selenium还能执行一些javaScript的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除遮挡的元素</span></span><br><span class="line">js=<span class="string">&#x27;var box=document.getElementById(&quot;scroll&quot;);box.remove();&#x27;</span></span><br><span class="line">browser.execute_script(js)</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_web_driver</span>(<span class="params">url</span>):</span><br><span class="line">    option = webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment">#option.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">    <span class="comment"># 打开浏览器</span></span><br><span class="line">    browser = webdriver.Chrome(options=option)</span><br><span class="line">    <span class="comment">#反屏蔽</span></span><br><span class="line">    browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    browser.get(url)</span><br><span class="line">    browser.maximize_window()</span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">browser,user_name,password</span>):</span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    login_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#user-profile &gt; div.nav-set &gt; div.nav-login &gt; div&#x27;</span>)))</span><br><span class="line">    login_button.click()</span><br><span class="line">    <span class="comment"># 填写账号</span></span><br><span class="line">    wait.until(EC.element_to_be_clickable((By.NAME,<span class="string">&#x27;log&#x27;</span>))).send_keys(user_name)</span><br><span class="line">    <span class="comment"># 填写密码</span></span><br><span class="line">    browser.find_element(By.NAME, <span class="string">&quot;pwd&quot;</span>).send_keys(password)</span><br><span class="line">    <span class="comment"># 点击登录</span></span><br><span class="line">    browser.find_element(By.NAME,<span class="string">&#x27;wp-submit&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scroll</span>(<span class="params">browser</span>):</span><br><span class="line">    <span class="comment"># 执行这段代码，会获取到当前窗口总高度</span></span><br><span class="line">    js = <span class="string">&quot;return action=document.body.scrollHeight&quot;</span></span><br><span class="line">    <span class="comment"># 初始化现在滚动条所在高度为0</span></span><br><span class="line">    height = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 当前窗口总高度</span></span><br><span class="line">    new_height = browser.execute_script(js)</span><br><span class="line">    <span class="keyword">while</span> height &lt; new_height:</span><br><span class="line">        <span class="comment"># 将滚动条调整至页面底部</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(height, new_height, <span class="number">300</span>):</span><br><span class="line">            browser.execute_script(<span class="string">&#x27;window.scrollTo(0, &#123;&#125;)&#x27;</span>.<span class="built_in">format</span>(k))</span><br><span class="line">            time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        height = new_height</span><br><span class="line">        new_height = browser.execute_script(js)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spider</span>(<span class="params">browser,model_name</span>):</span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,<span class="string">&#x27;#navigation-top &gt; span&#x27;</span>))).click()</span><br><span class="line">    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#so&#x27;</span>))).send_keys(model_name)</span><br><span class="line">    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#searchsubmit-so&#x27;</span>))).click()</span><br><span class="line">    <span class="comment"># 图片序号从几开始</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 爬取首页中的所有页</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 记录首页项目数</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 爬取首页中的所有项</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 一步一步向下滑动，加载所有项</span></span><br><span class="line">            scroll(browser)</span><br><span class="line">            <span class="comment"># 进入第2页面</span></span><br><span class="line">            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">f&#x27;#main &gt; article:nth-child(<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>)&#x27;</span>))).click()</span><br><span class="line">            i=i+<span class="number">1</span></span><br><span class="line">            <span class="comment"># 记录第2页面的子页面个数</span></span><br><span class="line">            x=<span class="number">0</span></span><br><span class="line">            <span class="comment"># 爬取第二页页中的子页面</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                x=x+<span class="number">1</span></span><br><span class="line">                <span class="comment"># 让selenium返回网页源码</span></span><br><span class="line">                web_data=browser.page_source</span><br><span class="line">                <span class="comment"># bs解析</span></span><br><span class="line">                soup = BeautifulSoup(web_data, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">                <span class="comment"># 获取图片list</span></span><br><span class="line">                li = soup.find(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;single-content&quot;</span>)</span><br><span class="line">                <span class="comment"># 获得下载链接并下载</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">for</span> img <span class="keyword">in</span> li.select(<span class="string">&quot;img[src]&quot;</span>):</span><br><span class="line">                        <span class="comment"># 图片张数</span></span><br><span class="line">                        j=j+<span class="number">1</span></span><br><span class="line">                        download_url=img[<span class="string">&quot;src&quot;</span>]</span><br><span class="line">                        pic_data = requests.get(download_url).content</span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;./download/<span class="subst">&#123;model_name&#125;</span>/<span class="subst">&#123;j&#125;</span>.jpg&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                            f.write(pic_data)</span><br><span class="line">                    browser.find_element_by_link_text(<span class="string">f&#x27;<span class="subst">&#123;x+<span class="number">1</span>&#125;</span>&#x27;</span>).click()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 返回首页</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">                browser.back()</span><br><span class="line">            <span class="comment"># 爬完首页的一页</span></span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">24</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        scroll(browser)</span><br><span class="line">        <span class="comment"># 删除遮挡的元素</span></span><br><span class="line">        js=<span class="string">&#x27;var box=document.getElementById(&quot;scroll&quot;);box.remove();&#x27;</span></span><br><span class="line">        browser.execute_script(js)</span><br><span class="line">        <span class="comment"># 点击首页的下一页</span></span><br><span class="line">        wait.until(EC.element_to_be_clickable((By.XPATH, <span class="string">&quot;//a[@class=&#x27;next page-numbers&#x27;]&quot;</span>))).click()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取kw音乐</title>
      <link href="/2022/01/19/project/%E7%88%AC%E5%8F%96kw%E9%9F%B3%E4%B9%90/"/>
      <url>/2022/01/19/project/%E7%88%AC%E5%8F%96kw%E9%9F%B3%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<ol><li>headers</li><li>JS逆向</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">searchkey=<span class="built_in">input</span>(<span class="string">&#x27;请输入歌手名字：&#x27;</span>)</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;kw_token=HJFZGV04WSS&#x27;</span>,</span><br><span class="line">    <span class="comment"># 主机域名</span></span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;www.kuwo.cn&#x27;</span>,</span><br><span class="line">    <span class="comment"># 认证令牌</span></span><br><span class="line">    <span class="string">&#x27;csrf&#x27;</span>: <span class="string">&#x27;HJFZGV04WSS&#x27;</span>,</span><br><span class="line">    <span class="comment"># 防盗链</span></span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://www.kuwo.cn/search/list?key=%E5%91%A8%E6%9D%B0%E4%BC%A6&#x27;</span>,</span><br><span class="line">    <span class="comment"># 浏览器信息</span></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url=<span class="string">f&#x27;http://www.kuwo.cn/api/www/search/searchMusicBykeyWord?key=<span class="subst">&#123;searchkey&#125;</span>&amp;pn=1&amp;rn=30&#x27;</span></span><br><span class="line">response=requests.get(url,headers=headers)</span><br><span class="line">json_data=response.json()</span><br><span class="line"><span class="comment"># 每个li的信息</span></span><br><span class="line">song_list=json_data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;list&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 歌曲信息</span></span><br><span class="line">song_info=[]</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> song <span class="keyword">in</span> song_list:</span><br><span class="line">    album=song[<span class="string">&#x27;album&#x27;</span>]</span><br><span class="line">    artist=song[<span class="string">&#x27;artist&#x27;</span>]</span><br><span class="line">    name=song[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    rid=song[<span class="string">&#x27;rid&#x27;</span>]</span><br><span class="line">    song_info.append([count,name,album,artist,rid])</span><br><span class="line">    count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> song_info:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    index=<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入下载歌曲序号(-1退出)&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> index==-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    row=song_info[index-<span class="number">1</span>]</span><br><span class="line">    song_url=<span class="string">f&#x27;https://www.kuwo.cn/api/v1/www/music/playUrl?mid=<span class="subst">&#123;row[<span class="number">4</span>]&#125;</span>&amp;type=convert_url&#x27;</span></span><br><span class="line">    download_url=requests.get(song_url, headers=headers).json()[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    song_data=requests.get(download_url).content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;./download/<span class="subst">&#123;row[<span class="number">1</span>]&#125;</span>-<span class="subst">&#123;row[<span class="number">2</span>]&#125;</span>.mp3&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(song_data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;row[<span class="number">1</span>]&#125;</span>下载完成&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把Jupyter Notebook放到网站并嵌入</title>
      <link href="/2022/01/10/Q&amp;A/%E6%8A%8AJupyter-Notebook%E6%94%BE%E5%88%B0%E7%BD%91%E7%AB%99%E5%B9%B6%E5%B5%8C%E5%85%A5/"/>
      <url>/2022/01/10/Q&amp;A/%E6%8A%8AJupyter-Notebook%E6%94%BE%E5%88%B0%E7%BD%91%E7%AB%99%E5%B9%B6%E5%B5%8C%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在source目录下放文件或文件夹，在hexo中需要在<code>_config.yml</code>中设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>那么，里面的东西就会放到网站中。本地的source目录就成了网站中的根目录（跟在主机名后面）</p></li><li><p>让hexo不渲染某个目录下的所有文件（在这里放Jupyter Notebook的html文件）把，在hexo中需要在<code>_config.yml</code>中设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &quot;Jupyter_notebook/**&quot;</span><br></pre></td></tr></table></figure></li><li><p>那么Jupyter Notebook的html文件就发布到网站中了</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[notebook](https://ferrychan666.github.io/Jupyter_notebook/world_colleges.html)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界大学数据爬取+可视化</title>
      <link href="/2022/01/09/project/%E4%B8%96%E7%95%8C%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96+%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2022/01/09/project/%E4%B8%96%E7%95%8C%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96+%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_web_driver</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 不打开浏览器的情况下，爬取数据</span></span><br><span class="line">    options=webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 无头模式</span></span><br><span class="line">    <span class="comment">#options.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">    <span class="comment"># 不加载图片</span></span><br><span class="line">    prefs = &#123;</span><br><span class="line">        <span class="string">&#x27;profile.default_content_setting_values&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;images&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>, prefs)</span><br><span class="line">    browser = webdriver.Chrome(options=options) <span class="comment"># 打开浏览器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#反屏蔽</span></span><br><span class="line">    browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reptilian</span>(<span class="params">browser</span>):</span><br><span class="line">    rankList = []</span><br><span class="line">    nameList=[]</span><br><span class="line">    regionList=[]</span><br><span class="line">    scoreList=[]</span><br><span class="line">    regEx=re.<span class="built_in">compile</span>(<span class="string">&quot;ranking.*&quot;</span>)</span><br><span class="line">    pages=<span class="number">34</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pages):</span><br><span class="line">        web_data = browser.page_source</span><br><span class="line">        soup=BeautifulSoup(web_data,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="comment"># 找到第一个tbody, 再找里面的所有tr，find_all返回元素列表</span></span><br><span class="line">        table=soup.find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">            i=i+<span class="number">1</span></span><br><span class="line">            <span class="comment"># find返回元素</span></span><br><span class="line">            rank=item.find(<span class="string">&quot;div&quot;</span>,class_=regEx)</span><br><span class="line">            rankList.append(rank.text.strip())</span><br><span class="line"></span><br><span class="line">            name=item.find(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;link-container&quot;</span>)</span><br><span class="line">            nameList.append(name.text.strip())</span><br><span class="line"></span><br><span class="line">            region=item.select(<span class="string">f&quot;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(<span class="subst">&#123;i&#125;</span>) &gt; td:nth-child(3)&quot;</span>)</span><br><span class="line">            regionList.append(region[<span class="number">0</span>].text.strip())</span><br><span class="line">            score=item.select(<span class="string">f&quot;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(<span class="subst">&#123;i&#125;</span>) &gt; td:nth-child(5)&quot;</span>)</span><br><span class="line">            scoreList.append(score[<span class="number">0</span>].text.strip())</span><br><span class="line"></span><br><span class="line">        Data = pd.DataFrame(columns = [<span class="string">&quot;ranking&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;country&quot;</span>,<span class="string">&quot;score&quot;</span>])</span><br><span class="line">        Data[<span class="string">&quot;ranking&quot;</span>] = rankList</span><br><span class="line">        Data[<span class="string">&quot;name&quot;</span>] = nameList</span><br><span class="line">        Data[<span class="string">&quot;country&quot;</span>] = regionList</span><br><span class="line">        Data[<span class="string">&quot;score&quot;</span>]=scoreList</span><br><span class="line">        <span class="comment"># 要导入csv，用此编码，才不会导致中文乱码</span></span><br><span class="line">        Data.to_csv(<span class="string">&quot;world_colleges_dataset.csv&quot;</span>, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br><span class="line">        <span class="comment"># 下一页</span></span><br><span class="line">        element4 = browser.find_element(By.CSS_SELECTOR, <span class="string">f&#x27;#content-box &gt; ul &gt; li.ant-pagination-item.ant-pagination-item-<span class="subst">&#123;j+<span class="number">2</span>&#125;</span> &gt; a&#x27;</span>)</span><br><span class="line">        element4.click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    browser=create_web_driver(<span class="string">&#x27;https://www.shanghairanking.cn/rankings/arwu/2021&#x27;</span>)</span><br><span class="line">    reptilian(browser)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p><a href="https://ferrychan666.github.io/Jupyter_notebook/world_colleges.html">notebook</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使脚本在后台运行</title>
      <link href="/2022/01/08/Q&amp;A/%E4%BD%BF%E8%84%9A%E6%9C%AC%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/01/08/Q&amp;A/%E4%BD%BF%E8%84%9A%E6%9C%AC%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>需要在要运行的bat文件前面加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if &quot;%1&quot;==&quot;hide&quot; goto CmdBegin</span><br><span class="line">start mshta vbscript:createobject(&quot;wscript.shell&quot;).run(&quot;&quot;&quot;%~0&quot;&quot; hide&quot;,0)(window.close)&amp;&amp;exit</span><br><span class="line">:CmdBegin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国大学数据分析</title>
      <link href="/2022/01/06/project/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/06/project/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Selenium效率低的缺点，但有着可见即可爬的优点。BeautifulSoup本来是用于更快地提取html代码中的数据，效率高，但难以爬取动态网页。</p><p>所以，我想采取Selenium+BeautifulSoup的方式，高效爬取动态网页。</p><ol><li>先selenium经一系列的操作之后，<code>brower.page_source</code> 获取源码</li><li>将源码传给BeautifulSoup，快速爬取</li></ol><p>下面以中国大学项目作为实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create database collegesdb charset utf8;</span><br><span class="line">use collegesdb;</span><br><span class="line">create table t(</span><br><span class="line">ranking int,</span><br><span class="line">name VARCHAR(20),</span><br><span class="line">abroad_rate float(10,1),</span><br><span class="line">employment_rate float(10,1),</span><br><span class="line">numberOfGraduate int,</span><br><span class="line">numberOfUndergraduate int</span><br><span class="line">)charset=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>Scrapy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mydb = pymysql.connect(</span><br><span class="line">  host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password=<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">  db=<span class="string">&quot;collegesdb&quot;</span></span><br><span class="line">)</span><br><span class="line">mycursor = mydb.cursor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_web_driver</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 不打开浏览器的情况下，爬取数据</span></span><br><span class="line">    options=webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 无头模式</span></span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    <span class="comment"># 不加载图片</span></span><br><span class="line">    prefs = &#123;</span><br><span class="line">        <span class="string">&#x27;profile.default_content_setting_values&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;images&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>, prefs)</span><br><span class="line">    browser = webdriver.Chrome(options=options) <span class="comment"># 打开浏览器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#反屏蔽</span></span><br><span class="line">    browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reptilian</span>(<span class="params">browser</span>):</span><br><span class="line">    pages=<span class="number">20</span></span><br><span class="line">    items=<span class="number">30</span></span><br><span class="line">    row = []</span><br><span class="line">    <span class="comment"># 设置延迟等待对象</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 插入数据到数据库</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append_item</span>(<span class="params">typeOfElement, regEx_name</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            first_link = soup.find(typeOfElement, string=re.<span class="built_in">compile</span>(regEx_name))</span><br><span class="line">            abroad_rate = first_link.find_next_sibling(typeOfElement)</span><br><span class="line">            row.append(abroad_rate.text)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            row.append(<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pages):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(items):</span><br><span class="line">            <span class="comment"># 进入第二页，延迟等待</span></span><br><span class="line">            item=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">f&#x27;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>) &gt; td.align-left &gt; div &gt; div.univname &gt; div:nth-child(1) &gt; div &gt; div &gt; a&#x27;</span>)))</span><br><span class="line">            item.click()</span><br><span class="line">            <span class="comment"># waiting until all html presence</span></span><br><span class="line">            ranking = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">&#x27;#bcur_latest &gt; div.bcur-latest &gt; div &gt; div.icon-container &gt; span&#x27;</span>)))</span><br><span class="line">            <span class="comment"># 获取第二页源码</span></span><br><span class="line">            web_data=browser.page_source</span><br><span class="line">            <span class="comment"># BeautifulSoup解析源码</span></span><br><span class="line">            soup=BeautifulSoup(web_data,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取想要的数据</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 排名</span></span><br><span class="line">            row.append(ranking.text)</span><br><span class="line">            <span class="comment"># 名字</span></span><br><span class="line">            name=soup.select(<span class="string">&quot;#univ_name &gt; span.name-cn&quot;</span>)</span><br><span class="line">            row.append(name[<span class="number">0</span>].text)</span><br><span class="line">            <span class="comment"># 出国率</span></span><br><span class="line">            append_item(<span class="string">&quot;span&quot;</span>, <span class="string">&quot;^出国深造率&quot;</span>)</span><br><span class="line">            <span class="comment"># 研究生数</span></span><br><span class="line">            append_item(<span class="string">&quot;span&quot;</span>, <span class="string">&quot;^研究生数&quot;</span>)</span><br><span class="line">            <span class="comment"># 本科生数</span></span><br><span class="line">            append_item(<span class="string">&quot;span&quot;</span>, <span class="string">&quot;^本科生数&quot;</span>)</span><br><span class="line">            <span class="comment"># 就业率</span></span><br><span class="line">            append_item(<span class="string">&quot;span&quot;</span>, <span class="string">&quot;^就业率&quot;</span>)</span><br><span class="line">            <span class="comment"># 插入数据库</span></span><br><span class="line">            sql = <span class="string">&quot;INSERT INTO t (ranking, name, abroad_rate, numberOfGraduate,numberOfUndergraduate, employment_rate) VALUES (%s, %s, %s, %s, %s, %s)&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(row)</span><br><span class="line">            mycursor.execute(sql, row)</span><br><span class="line">            mydb.commit()</span><br><span class="line">            <span class="comment"># 清理数组</span></span><br><span class="line">            row.clear()</span><br><span class="line">            <span class="comment"># 后退一页</span></span><br><span class="line">            browser.back()</span><br><span class="line">        <span class="comment"># 下一页</span></span><br><span class="line">        element4 = browser.find_element(By.CSS_SELECTOR, <span class="string">&#x27;#content-box &gt; ul &gt; li.ant-pagination-item.ant-pagination-item-&#x27;</span>+<span class="built_in">str</span>(j+<span class="number">2</span>)+<span class="string">&#x27; &gt; a&#x27;</span>)</span><br><span class="line">        element4.click()</span><br><span class="line">        <span class="comment"># 滑动到顶部</span></span><br><span class="line">        js_top = <span class="string">&quot;var q=document.documentElement.scrollTop=0&quot;</span></span><br><span class="line">        browser.execute_script(js_top)</span><br><span class="line">    browser.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    browser=create_web_driver(<span class="string">&quot;https://www.shanghairanking.cn/rankings/bcur/2021&quot;</span>)</span><br><span class="line">    reptilian(browser)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>Data Cleansing</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">db_connection_str = <span class="string">&#x27;mysql+pymysql://root:123456@localhost/collegesdb&#x27;</span></span><br><span class="line">db_connection = create_engine(db_connection_str)</span><br><span class="line"></span><br><span class="line">df = pd.read_sql(<span class="string">&#x27;SELECT * FROM t&#x27;</span>, con=db_connection)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop_row</span>(<span class="params">field</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line">        <span class="keyword">if</span> df.loc[x, field] == -<span class="number">1</span>:</span><br><span class="line">            df.drop(x, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    drop_row(<span class="string">&quot;ranking&quot;</span>)</span><br><span class="line">    drop_row(<span class="string">&quot;abroad_rate&quot;</span>)</span><br><span class="line">    drop_row(<span class="string">&quot;employment_rate&quot;</span>)</span><br><span class="line">    drop_row(<span class="string">&quot;numberOfGraduate&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>Data Analysis</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> data_cleaning2 <span class="keyword">import</span> df</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"></span><br><span class="line"><span class="comment">#让可视化中能显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">u&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scatter</span>(<span class="params">x_name_in_df, y_name_in_df,xlabel,ylabel,color</span>):</span><br><span class="line">    plt.scatter(x=df[x_name_in_df], y=df[y_name_in_df], color=color)</span><br><span class="line">    plt.xlabel(xlabel)</span><br><span class="line">    plt.ylabel(ylabel)</span><br><span class="line">    plt.gca().xaxis.set_major_locator(ticker.MultipleLocator(<span class="number">50</span>))</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    scatter(<span class="string">&quot;ranking&quot;</span>, <span class="string">&#x27;number_Undergraduate&#x27;</span>, <span class="string">&#x27;University rankings&#x27;</span>, <span class="string">&#x27;Number of undergraduate students&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    scatter(<span class="string">&quot;ranking&quot;</span>, <span class="string">&#x27;numberOfGraduate&#x27;</span>, <span class="string">&#x27;University rankings&#x27;</span>, <span class="string">&#x27;Number of graduate students&#x27;</span>, <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    scatter(<span class="string">&quot;ranking&quot;</span>, <span class="string">&#x27;employment_rate&#x27;</span>, <span class="string">&#x27;University rankings&#x27;</span>, <span class="string">&#x27;Employment rate&#x27;</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    scatter(<span class="string">&quot;ranking&quot;</span>, <span class="string">&#x27;abroad_rate&#x27;</span>, <span class="string">&#x27;University rankings&#x27;</span>, <span class="string">&#x27;Rate of going abroad&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/CzWa9So.png" style="zoom:67%;"><img src="https://i.imgur.com/mrDShn4.png" style="zoom:67%;"><img src="https://i.imgur.com/8kePSDT.png" style="zoom:67%;"><img src="https://i.imgur.com/AytAk86.png" style="zoom:67%;">]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>love confess</title>
      <link href="/2021/12/24/project/love%20confess/"/>
      <url>/2021/12/24/project/love%20confess/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head>  <meta charset="utf-8">  <title></title></head><body>  <p id="text">I once dreamed of a princess like you being mine. Do you love me?</p><p>  <button type="button" onclick="yes()">Yessss!</button>  <button id="no" type="button" onclick="no()">No!</button>  <script type="text/javascript">    function yes(){      document.getElementById("text").innerHTML="I love you, too. Please feel free to contact me at anytime if further information is needed. My email is ferrychan666@gmail.com.";        var elem = document.getElementById('no');      return elem.parentNode.removeChild(elem);    }    function no() {      document.getElementById("text").innerHTML="I love you because I will take you to a more distant place with you. Now, Do you love me?";      var elem = document.getElementById('no');      return elem.parentNode.removeChild(elem);    }  </script></p></body><canvas id="c"></canvas><script type="text/javascript">    var b = document.body;  var c = document.getElementsByTagName('canvas')[0];  var a = c.getContext('2d');  document.body.clientWidth;  with(m=Math)C=cos,S=sin,P=pow,R=random;c.width=c.height=f=470;h=-250;function p(a,b,c){if(c>60)return[S(a*7)*(13+5/(.2+P(b*4,4)))-S(b)*50,b*f+50,625+C(a*7)*(13+5/(.2+P(b*4,4)))+b*400,a*1-b/2,a];A=a*2-1;B=b*2-1;if(A*A+B*B<1){if(c>37){n=(j=c&1)?6:4;o=.5/(a+.01)+C(b*125)*3-a*300;w=b*h;return[o*C(n)+w*S(n)+j*610-390,o*S(n)-w*C(n)+550-j*350,1180+C(B+A)*99-j*300,.4-a*.1+P(1-B*B,-h*6)*.15-a*b*.4+C(a+b)/5+P(C((o*(a+1)+(B>0?w:-w))/25),30)*.1*(1-B*B),o/1e3+.7-o*w*3e-6]}if(c>32){c=c*1.16-.15;o=a*45-20;w=b*b*h;z=o*S(c)+w*C(c)+620;return[o*C(c)-w*S(c),28+C(B*.5)*99-b*b*b*60-z/2-h,z,(b*b*.3+P((1-(A*A)),7)*.15+.3)*b,b*.7]}o=A*(2-b)*(80-c*2);w=99-C(A)*120-C(b)*(-h-c*4.9)+C(P(1-b,7))*50+c*2;z=o*S(c)+w*C(c)+700;return[o*C(c)-w*S(c),B*99-C(P(b, 7))*50-c/3-z/1.35+450,z,(1-b/1.2)*.9+a*.1, P((1-b),20)/4+.05]}}setInterval('for(i=0;i<1e4;i++)if(s=p(R(),R(),i%46/.74)){z=s[2];x=~~(s[0]*f/z-h);y=~~(s[1]*f/z-h);if(!m[q=y*f+x]|m[q]>z)m[q]=z,a.fillStyle="rgb("+~(s[3]*h)+","+~(s[4]*h)+","+~(s[3]*s[3]*-80)+")",a.fillRect(x,y,1,1)}',0)  </script></html>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>beautifulSoup practice</title>
      <link href="/2021/12/23/project/beautifulSoup-practice/"/>
      <url>/2021/12/23/project/beautifulSoup-practice/</url>
      
        <content type="html"><![CDATA[<p>本次我采用BeautifulSoup爬取网页数据，并打印到csv文件中，相比于selenium，BeautifulSoup更加快速。</p><p>有几个值得注意的问题</p><ul><li><p>编码</p></li><li><p>find()和find_all()</p><ol><li>find()返回指定元素</li><li>find_all()返回指定元素的列表</li></ol><p><code>table=soup.find(&quot;tbody&quot;).find_all(&quot;tr&quot;)</code>这里先用find()找到第一个tbody, 再用find_all()返回tbody中所有的tr元素列表。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">rankList = []</span><br><span class="line">nameList=[]</span><br><span class="line">regionList=[]</span><br><span class="line">scoreList=[]</span><br><span class="line">regEx=re.<span class="built_in">compile</span>(<span class="string">&quot;ranking.*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># resquests请求网页</span></span><br><span class="line">url=<span class="string">&#x27;https://www.shanghairanking.cn/rankings/arwu/2021&#x27;</span></span><br><span class="line">res=requests.get(url)</span><br><span class="line"><span class="comment"># 由于BeautifulSoup的原因，不得不用此编码，才不会导致中文乱码</span></span><br><span class="line">res.encoding = res.apparent_encoding</span><br><span class="line"><span class="comment"># 解析网页，返回BeautifulSoup对象</span></span><br><span class="line">soup=BeautifulSoup(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到第一个tbody, 再找里面的所有tr，find_all返回元素列表</span></span><br><span class="line">table=soup.find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="comment"># find返回元素</span></span><br><span class="line">    rank=item.find(<span class="string">&quot;div&quot;</span>,class_=regEx)</span><br><span class="line">    rankList.append(rank.text.strip())</span><br><span class="line"></span><br><span class="line">    name=item.find(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;link-container&quot;</span>)</span><br><span class="line">    nameList.append(name.text.strip())</span><br><span class="line"></span><br><span class="line">    region=item.select(<span class="string">&quot;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;) &gt; td:nth-child(3)&quot;</span>)</span><br><span class="line">    regionList.append(region[<span class="number">0</span>].text.strip())</span><br><span class="line">    score=item.select(<span class="string">&quot;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;) &gt; td:nth-child(4)&quot;</span>)</span><br><span class="line">    scoreList.append(score[<span class="number">0</span>].text.strip())</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">Data = pd.DataFrame(columns = [<span class="string">&quot;排名&quot;</span>,<span class="string">&quot;名字&quot;</span>,<span class="string">&quot;国家&quot;</span>,<span class="string">&quot;总分&quot;</span>])</span><br><span class="line">Data[<span class="string">&quot;排名&quot;</span>] = rankList</span><br><span class="line">Data[<span class="string">&quot;名字&quot;</span>] = nameList</span><br><span class="line">Data[<span class="string">&quot;国家&quot;</span>] = regionList</span><br><span class="line">Data[<span class="string">&quot;总分&quot;</span>]=scoreList</span><br><span class="line"><span class="comment"># 要导入csv，用此编码，才不会导致中文乱码</span></span><br><span class="line">Data.to_csv(<span class="string">&quot;test.csv&quot;</span>, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)<span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">rankList = []</span><br><span class="line">nameList=[]</span><br><span class="line">regionList=[]</span><br><span class="line">scoreList=[]</span><br><span class="line"></span><br><span class="line">regEx=re.<span class="built_in">compile</span>(<span class="string">&quot;ranking.*&quot;</span>)</span><br><span class="line">url=<span class="string">&#x27;https://www.shanghairanking.cn/rankings/arwu/2021&#x27;</span></span><br><span class="line">res=requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于BeautifulSoup的原因，不得不用此编码，才不会导致中文乱码</span></span><br><span class="line">res.encoding = res.apparent_encoding</span><br><span class="line"></span><br><span class="line">soup=BeautifulSoup(res.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">table=soup.find(<span class="string">&quot;tbody&quot;</span>).find_all(<span class="string">&quot;tr&quot;</span>)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    rank=item.find(<span class="string">&quot;div&quot;</span>,class_=regEx)</span><br><span class="line">    rankList.append(rank.text.strip())</span><br><span class="line"></span><br><span class="line">    name=item.find(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;link-container&quot;</span>)</span><br><span class="line">    nameList.append(name.text.strip())</span><br><span class="line"></span><br><span class="line">    region=item.select(<span class="string">&quot;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;) &gt; td:nth-child(3)&quot;</span>)</span><br><span class="line">    regionList.append(region[<span class="number">0</span>].text.strip())</span><br><span class="line">    score=item.select(<span class="string">&quot;#content-box &gt; div.rk-table-box &gt; table &gt; tbody &gt; tr:nth-child(&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;) &gt; td:nth-child(4)&quot;</span>)</span><br><span class="line">    scoreList.append(score[<span class="number">0</span>].text.strip())</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">Data = pd.DataFrame(columns = [<span class="string">&quot;排名&quot;</span>,<span class="string">&quot;名字&quot;</span>,<span class="string">&quot;国家&quot;</span>,<span class="string">&quot;总分&quot;</span>])</span><br><span class="line">Data[<span class="string">&quot;排名&quot;</span>] = rankList</span><br><span class="line">Data[<span class="string">&quot;名字&quot;</span>] = nameList</span><br><span class="line">Data[<span class="string">&quot;国家&quot;</span>] = regionList</span><br><span class="line">Data[<span class="string">&quot;总分&quot;</span>]=scoreList</span><br><span class="line"><span class="comment"># 要导入csv，用此编码，才不会导致中文乱码</span></span><br><span class="line">Data.to_csv(<span class="string">&quot;test.csv&quot;</span>, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup</title>
      <link href="/2021/12/23/Python/BeautifulSoup/"/>
      <url>/2021/12/23/Python/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Beautiful Soup is a Python library for pulling data out of HTML and XML files. It works with your favorite parser to provide idiomatic ways of navigating.</p><p>I’ll be using as an example throughout this document.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">html_doc = &quot;&quot;&quot;<span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The Dormouse&#x27;s story<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span>Once upon a time there were three little sisters; and their names were</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/elsie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span>Elsie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/lacie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link2&quot;</span>&gt;</span>Lacie<span class="tag">&lt;/<span class="name">a</span>&gt;</span> and</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/tillie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link3&quot;</span>&gt;</span>Tillie<span class="tag">&lt;/<span class="name">a</span>&gt;</span>;</span><br><span class="line">and they lived at the bottom of a well.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="BeautifulSoup-Object"><a href="#BeautifulSoup-Object" class="headerlink" title="BeautifulSoup Object"></a>BeautifulSoup Object</h1><p>Beautiful Soup gives us a <code>BeautifulSoup</code> object, which represents the document as a nested data structure:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, &#x27;html.parser&#x27;)</span><br><span class="line"></span><br><span class="line">print(soup.prettify())</span><br><span class="line"># &lt;html&gt;</span><br><span class="line">#  &lt;head&gt;</span><br><span class="line">#   &lt;title&gt;</span><br><span class="line">#    The Dormouse&#x27;s story</span><br><span class="line">#   &lt;/title&gt;</span><br><span class="line">#  &lt;/head&gt;</span><br><span class="line">#  &lt;body&gt;</span><br><span class="line">#   &lt;p class=&quot;title&quot;&gt;</span><br><span class="line">#    &lt;b&gt;</span><br><span class="line">#     The Dormouse&#x27;s story</span><br><span class="line">#    &lt;/b&gt;</span><br><span class="line">#   &lt;/p&gt;</span><br><span class="line">#   &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">#    Once upon a time there were three little sisters; and their names were</span><br><span class="line">#    &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">#     Elsie</span><br><span class="line">#    &lt;/a&gt;</span><br><span class="line">#    ,</span><br><span class="line">#    &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;</span><br><span class="line">#     Lacie</span><br><span class="line">#    &lt;/a&gt;</span><br><span class="line">#    and</span><br><span class="line">#    &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;</span><br><span class="line">#     Tillie</span><br><span class="line">#    &lt;/a&gt;</span><br><span class="line">#    ; and they lived at the bottom of a well.</span><br><span class="line">#   &lt;/p&gt;</span><br><span class="line">#   &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">#    ...</span><br><span class="line">#   &lt;/p&gt;</span><br><span class="line">#  &lt;/body&gt;</span><br><span class="line"># &lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="Kinds-of-objects"><a href="#Kinds-of-objects" class="headerlink" title="Kinds of objects"></a>Kinds of objects</h1><p>Beautiful Soup transforms a complex HTML document into a complex tree of Python objects. But you’ll only ever have to deal with about four kinds of objects: <code>Tag</code>, <code>NavigableString</code>, <code>BeautifulSoup</code>, and <code>Comment</code>.</p><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>A <code>Tag</code> object corresponds to an XML or HTML tag in the original document:</p><p><code>.p</code> can return the first <code>&lt;p&gt;</code> tag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag=soup.p</span><br></pre></td></tr></table></figure><h3 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h3><p>Every tag has a name, accessible as <code>.name</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment">#p</span></span><br></pre></td></tr></table></figure><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><p>You can access that dictionary directly as <code>.attrs</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tag.attrs)</span><br><span class="line"><span class="comment">#&#123;&#x27;class&#x27;: [&#x27;title&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><p>Also you can access the value throught adding the key:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tag.attrs[<span class="string">&#x27;class&#x27;</span>])</span><br><span class="line"><span class="comment">#[&#x27;title&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h2><p>A string corresponds to a bit of text within a tag. Beautiful Soup uses the <code>NavigableString</code> class to contain these bits of text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(<span class="string">&#x27;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&#x27;</span>, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">tag = soup.b</span><br><span class="line">tag.string</span><br><span class="line"><span class="comment"># &#x27;Extremely bold&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>The <code>BeautifulSoup</code> object represents the parsed document as a whole. For most purposes, you can treat it as a Tag object. This means it supports most of the methods described in Navigating the tree and Searching the tree.</p><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>There are a few leftover bits. The main one you’ll probably encounter is the comment. The <code>Comment</code> object is just a special type of <code>NavigableString</code>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">markup = <span class="string">&quot;&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;&quot;</span></span><br><span class="line">soup = BeautifulSoup(markup, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">comment = soup.b.string</span><br><span class="line"><span class="built_in">type</span>(comment)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.element.Comment&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Navigating-the-tree"><a href="#Navigating-the-tree" class="headerlink" title="Navigating the tree"></a>Navigating the tree</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">soup.title</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">soup.title.name</span><br><span class="line"><span class="comment"># u&#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.title.string</span><br><span class="line"><span class="comment"># u&#x27;The Dormouse&#x27;s story&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.title.parent.name</span><br><span class="line"><span class="comment"># u&#x27;head&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.p</span><br><span class="line"><span class="comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment"># u&#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">soup.a</span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="built_in">id</span>=<span class="string">&quot;link3&quot;</span>)</span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line">soup.get_text()</span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="comment"># Elsie,</span></span><br><span class="line"><span class="comment"># Lacie and</span></span><br><span class="line"><span class="comment"># Tillie;</span></span><br><span class="line"><span class="comment"># and they lived at the bottom of a well.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="Going-down"><a href="#Going-down" class="headerlink" title="Going down"></a>Going down</h2><h3 id="contents-and-children"><a href="#contents-and-children" class="headerlink" title=".contents and .children"></a><code>.contents</code> and <code>.children</code></h3><p><code>.contents</code> is a children list of a tag.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tag)</span><br><span class="line"><span class="built_in">print</span>(tag.contents)</span><br><span class="line"><span class="built_in">print</span>(tag.contents[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># [&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;]</span></span><br><span class="line"><span class="comment"># &lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;</span></span><br></pre></td></tr></table></figure><p>Instead of getting them as a list, you can iterate over a tag’s children using the <code>.children</code> generator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> tag.children:</span><br><span class="line">    <span class="built_in">print</span>(child)</span><br></pre></td></tr></table></figure><h3 id="descendants"><a href="#descendants" class="headerlink" title=".descendants"></a><code>.descendants</code></h3><p>The <code>.descendants</code> attribute lets you iterate over all of a tag’s children, recursively: its direct children, the children of its direct children, and so on:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p_tag=soup.p</span><br><span class="line"><span class="built_in">print</span>(p_tag)</span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> p_tag.descendants:</span><br><span class="line">    <span class="built_in">print</span>(child)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># &lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;</span></span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title=".string"></a><code>.string</code></h3><p>If a tag has only one child, and that child is a <code>NavigableString</code>, the child is made available as <code>.string</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tilte_tag=soup.title</span><br><span class="line"><span class="built_in">print</span>(tilte_tag.contents[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(tilte_tag.string)</span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br></pre></td></tr></table></figure><h2 id="Going-up"><a href="#Going-up" class="headerlink" title="Going up"></a>Going up</h2><p>The parent of a top-level tag like <html> is the <code>BeautifulSoup</code> object itself:</html></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html_tag = soup.html</span><br><span class="line"><span class="built_in">type</span>(html_tag.parent)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>And the <code>.parent</code> of a <code>BeautifulSoup</code> object is defined as None:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.parent)</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure><h3 id="parents"><a href="#parents" class="headerlink" title=".parents"></a><code>.parents</code></h3><p>You can iterate over all of an element’s parents with <code>.parents</code>. This example uses <code>.parents</code> to travel from an <a> tag buried deep within the document, to the very top of the document:</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">link = soup.a</span><br><span class="line">link</span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> link.parents:</span><br><span class="line">    <span class="built_in">print</span>(parent.name)</span><br><span class="line"><span class="comment"># p</span></span><br><span class="line"><span class="comment"># body</span></span><br><span class="line"><span class="comment"># html</span></span><br><span class="line"><span class="comment"># [document]</span></span><br></pre></td></tr></table></figure><h2 id="Going-sideways"><a href="#Going-sideways" class="headerlink" title="Going sideways"></a>Going sideways</h2><p>The <code>&lt;b&gt;</code> tag and the <code>&lt;c&gt;</code> tag are at the same level: they’re both direct children of the same tag. We call them siblings.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sibling_soup = BeautifulSoup(<span class="string">&quot;&lt;a&gt;&lt;b&gt;text1&lt;/b&gt;&lt;c&gt;text2&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;&quot;</span>, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sibling_soup.prettify())</span><br><span class="line"><span class="comment">#   &lt;a&gt;</span></span><br><span class="line"><span class="comment">#    &lt;b&gt;</span></span><br><span class="line"><span class="comment">#     text1</span></span><br><span class="line"><span class="comment">#    &lt;/b&gt;</span></span><br><span class="line"><span class="comment">#    &lt;c&gt;</span></span><br><span class="line"><span class="comment">#     text2</span></span><br><span class="line"><span class="comment">#    &lt;/c&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h3 id="next-sibling-and-previous-sibling"><a href="#next-sibling-and-previous-sibling" class="headerlink" title=".next_sibling and .previous_sibling"></a><code>.next_sibling</code> and <code>.previous_sibling</code></h3><p>You can use <code>.next_sibling</code> and <code>.previous_sibling</code> to navigate between page elements that are on the same level of the parse tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sibling_soup.b.next_sibling</span><br><span class="line"><span class="comment"># &lt;c&gt;text2&lt;/c&gt;</span></span><br><span class="line"></span><br><span class="line">sibling_soup.c.previous_sibling</span><br><span class="line"><span class="comment"># &lt;b&gt;text1&lt;/b&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Searching-the-tree"><a href="#Searching-the-tree" class="headerlink" title="Searching the tree"></a>Searching the tree</h1><p>Beautiful Soup defines a lot of methods for searching the parse tree, but they’re all very similar. I’m going to spend a lot of time explaining the two most popular methods: <code>find()</code> and <code>find_all()</code>. </p><p>I want to show examples of different filters you can pass into these methods. These filters show up again and again, throughout the search API. You can use them to filter based on a tag’s name, on its attributes, on the text of a string, or on some combination of these.</p><h2 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a><code>find_all()</code></h2><h3 id="A-string"><a href="#A-string" class="headerlink" title="A string"></a>A string</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="A-regular-expression"><a href="#A-regular-expression" class="headerlink" title="A regular expression"></a>A regular expression</h3><p>If you pass in a regular expression object, Beautiful Soup will filter against that regular expression using its <code>search()</code> method.This code finds all the tags whose names start with the letter “b”; in this case, the <code>&lt;body&gt;</code> tag and the <code>&lt;b&gt;</code> tag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.<span class="built_in">compile</span>(<span class="string">&quot;^b&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment"># body</span></span><br><span class="line"><span class="comment"># b</span></span><br></pre></td></tr></table></figure><h3 id="A-list"><a href="#A-list" class="headerlink" title="A list"></a>A list</h3><p>If you pass in a list, Beautiful Soup will allow a string match against any item in that list. This code finds all the <code>&lt;a&gt;</code> tags and all the <code>&lt;b&gt;</code> tags:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])</span><br><span class="line"><span class="comment"># [&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="True"><a href="#True" class="headerlink" title="True"></a>True</h3><p>The value <code>True</code> matches everything it can. This code finds all the tags in the document, but none of the text strings:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment"># html</span></span><br><span class="line"><span class="comment"># head</span></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line"><span class="comment"># body</span></span><br><span class="line"><span class="comment"># p</span></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="comment"># p</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># p</span></span><br></pre></td></tr></table></figure><h3 id="The-name-argument"><a href="#The-name-argument" class="headerlink" title="The name argument"></a>The <code>name</code> argument</h3><p>Pass in a value for <code>name</code> and you’ll tell Beautiful Soup to <strong>only consider tags</strong> with certain names. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&quot;title&quot;</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="The-keyword-arguments"><a href="#The-keyword-arguments" class="headerlink" title="The keyword arguments"></a>The keyword arguments</h3><p>If you pass in a value for an argument called <code>id</code>, Beautiful Soup will filter against each tag’s ‘id’ attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;link2&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>If you pass in a value for <code>href</code>, Beautiful Soup will filter against each tag’s ‘href’ attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(href=re.<span class="built_in">compile</span>(<span class="string">&quot;elsie&quot;</span>))</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>This code finds all tags whose <code>id</code> attribute has a value, regardless of what the value is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="built_in">id</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="The-string-argument"><a href="#The-string-argument" class="headerlink" title="The string argument"></a>The <code>string</code> argument</h3><p>With <code>string</code> you can search for strings instead of tags. As with <code>name</code> and the keyword arguments, you can pass in <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-string">a string</a>, <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression">a regular expression</a>, <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-list">a list</a>, <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function">a function</a>, or <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-value-true">the value True</a>. Here are some examples:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(string=<span class="string">&quot;Elsie&quot;</span>)</span><br><span class="line"><span class="comment"># [&#x27;Elsie&#x27;]</span></span><br><span class="line"></span><br><span class="line">soup.find_all(string=[<span class="string">&quot;Tillie&quot;</span>, <span class="string">&quot;Elsie&quot;</span>, <span class="string">&quot;Lacie&quot;</span>])</span><br><span class="line"><span class="comment"># [&#x27;Elsie&#x27;, &#x27;Lacie&#x27;, &#x27;Tillie&#x27;]</span></span><br><span class="line"></span><br><span class="line">soup.find_all(string=re.<span class="built_in">compile</span>(<span class="string">&quot;Dormouse&quot;</span>))</span><br><span class="line"><span class="comment"># [&quot;The Dormouse&#x27;s story&quot;, &quot;The Dormouse&#x27;s story&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h2><p>The <code>find_all()</code> method scans the entire document looking for results, but sometimes you only want to find one result.</p><p>These two lines of code are nearly equivalent:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;title&#x27;</span>, limit=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure><p>The only difference is that <code>find_all()</code> returns a list containing the single result, and <code>find()</code> just returns the result.</p><p>If <code>find_all()</code> can’t find anything, it returns an empty list. If <code>find()</code> can’t find anything, it returns <code>None</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.find(<span class="string">&quot;nosuchtag&quot;</span>))</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql commands</title>
      <link href="/2021/12/20/SQL/mysql-commands/"/>
      <url>/2021/12/20/SQL/mysql-commands/</url>
      
        <content type="html"><![CDATA[<h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><ol><li><p>运行mysql程序</p><figure class="highlight plaintext"><figcaption><span>启动mysql8.0版本</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql80</span><br></pre></td></tr></table></figure></li><li><p>进入命令行模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p>接下来就可以用命令操作数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//查看所有的数据库</span><br><span class="line">show databases;</span><br><span class="line">//改变默认数据库</span><br><span class="line">use database_name;</span><br><span class="line">//查看默认数据库中所有的表</span><br><span class="line">show tables;</span><br><span class="line">//查看某个表的结构</span><br><span class="line">describe table_name;</span><br><span class="line">//查看表中的记录</span><br><span class="line">select * from table_name;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lock the windows every time when you close the lid</title>
      <link href="/2021/12/20/Q&amp;A/Lock-the-windows-every-time-when-you-close-the-lid/"/>
      <url>/2021/12/20/Q&amp;A/Lock-the-windows-every-time-when-you-close-the-lid/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/kCE4SAz.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化播放视频</title>
      <link href="/2021/12/09/project/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91/"/>
      <url>/2021/12/09/project/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>本次我采用Python+selenium写了一个自动播放视频的脚本。</p><p>从账号密码登录，切换一个个window，再到切换一层层frame，最终点击播放按钮的过程。</p><ol><li><p>导入包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> time</span><br></pre></td></tr></table></figure></li><li><p>将webdriver静音</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&quot;--mute-audio&quot;</span>)</span><br><span class="line"><span class="comment"># 打开浏览器</span></span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br></pre></td></tr></table></figure></li><li><p>模拟浏览器，顺便进行反屏蔽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 反屏蔽</span></span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>获取url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;http://passport2.chaoxing.com/login?fid=&amp;newversion=true&amp;refer=http%3A%2F%2Fi.chaoxing.com&quot;</span> <span class="comment">#这里改成自己学校的学习通登录地址</span></span><br><span class="line">browser.get(url)</span><br></pre></td></tr></table></figure></li><li><p>输入账号密码，再登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inp=<span class="string">&#x27;your_account&#x27;</span></span><br><span class="line">inp2=<span class="string">&#x27;your_password&#x27;</span></span><br><span class="line">username=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;phone&quot;]&#x27;</span>)</span><br><span class="line">password=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;pwd&quot;]&#x27;</span>)</span><br><span class="line">username.send_keys(inp)</span><br><span class="line">password.send_keys(inp2)</span><br><span class="line">login=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;loginBtn&quot;]&#x27;</span>)</span><br><span class="line">login.click()</span><br></pre></td></tr></table></figure></li><li><p><strong>此时，网页中会有一个iframe，导致selenium无法正常读取iframe里的html代码，这里用到了selenium的<code>switch_to.frame()的方法</code></strong></p><ul><li><p>如果frame中有<code>id</code>或者<code>name</code>属性，那么我们直接传入他们之一的字符串就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.switch_to.frame(<span class="string">&quot;frame_content&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>如果没有以上两个属性，我们就用<code>find_element()</code>获取这个frame的元素，把他传入<code>switch_to.frame()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element = wait.until(EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//*[@id=&quot;ext-gen1044&quot;]/iframe&#x27;</span>)))</span><br><span class="line">browser.switch_to.frame(element)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>如果<code>click()</code>某个元素之后，弹出一个新窗口，那么selenium同样无法获取新窗口的元素，这里就用到了<code>switch_to.window()</code>的方法</strong></p><p>以下方法就是关闭第一个窗口切换到第二个窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handles = browser.window_handles  <span class="comment"># 获取当前窗口句柄集合</span></span><br><span class="line"><span class="built_in">print</span>(handles)</span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> handles:  <span class="comment"># 切换窗口</span></span><br><span class="line">    <span class="keyword">if</span> handle != browser.current_window_handle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;switch to second window&#x27;</span>, handle)</span><br><span class="line">        browser.close()  <span class="comment"># 关闭第一个窗口</span></span><br><span class="line">        browser.switch_to.window(handle)  <span class="comment"># 切换到第二个窗口</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="完整代码1"><a href="#完整代码1" class="headerlink" title="完整代码1"></a>完整代码1</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver  <span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">&quot;--mute-audio&quot;</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=chrome_options)</span><br><span class="line"><span class="comment"># 反屏蔽</span></span><br><span class="line">browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置延迟等待对象</span></span><br><span class="line">wait=WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://passport2.chaoxing.com/login?fid=&amp;newversion=true&amp;refer=http%3A%2F%2Fi.chaoxing.com&quot;</span> <span class="comment">#这里改成自己学校的学习通登录地址</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.maximize_window()  <span class="comment"># 窗口最大化</span></span><br><span class="line"></span><br><span class="line">inp=<span class="string">&#x27;15975027211&#x27;</span></span><br><span class="line">inp2=<span class="string">&#x27;@Qq2670387848&#x27;</span></span><br><span class="line">username=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;phone&quot;]&#x27;</span>)</span><br><span class="line">password=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;pwd&quot;]&#x27;</span>)</span><br><span class="line">username.send_keys(inp)</span><br><span class="line">password.send_keys(inp2)</span><br><span class="line"></span><br><span class="line">login=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;loginBtn&quot;]&#x27;</span>)</span><br><span class="line">login.click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">course=browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;first57734&quot;]&#x27;</span>)</span><br><span class="line">course.click()</span><br><span class="line"></span><br><span class="line">browser.switch_to.frame(<span class="string">&quot;frame_content&quot;</span>)</span><br><span class="line"></span><br><span class="line">course1=wait.until(EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//*[@id=&quot;c_220056940&quot;]/div[2]/h3/a/span&#x27;</span>)))</span><br><span class="line">course1.click()</span><br><span class="line"></span><br><span class="line">handles = browser.window_handles  <span class="comment"># 获取当前窗口句柄集合</span></span><br><span class="line"><span class="built_in">print</span>(handles)</span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> handles:  <span class="comment"># 切换窗口</span></span><br><span class="line">    <span class="keyword">if</span> handle != browser.current_window_handle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;switch to second window&#x27;</span>, handle)</span><br><span class="line">        browser.close()  <span class="comment"># 关闭第一个窗口</span></span><br><span class="line">        browser.switch_to.window(handle)  <span class="comment"># 切换到第二个窗口</span></span><br><span class="line"></span><br><span class="line">browser.switch_to.frame(<span class="string">&quot;frame_content-zj&quot;</span>)</span><br><span class="line"></span><br><span class="line">item=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">&#x27;#fanyaChapter &gt; div &gt; div.chapter_body.xs_table &gt; div.chapter_td &gt; div:nth-child(2) &gt; div.catalog_level &gt; ul &gt; li:nth-child(1) &gt; div &gt; div &gt; div.catalog_name&#x27;</span>)))</span><br><span class="line">item.click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    handles = browser.window_handles  <span class="comment"># 获取当前窗口句柄集合</span></span><br><span class="line">    <span class="built_in">print</span>(handles)</span><br><span class="line">    <span class="keyword">for</span> handle <span class="keyword">in</span> handles:  <span class="comment"># 切换窗口</span></span><br><span class="line">        <span class="keyword">if</span> handle != browser.current_window_handle:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;switch to second window&#x27;</span>, handle)</span><br><span class="line">            browser.close()  <span class="comment"># 关闭第一个窗口</span></span><br><span class="line">            browser.switch_to.window(handle)  <span class="comment"># 切换到第二个窗口</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    browser.switch_to.frame(<span class="string">&quot;iframe&quot;</span>)</span><br><span class="line"></span><br><span class="line">    element = wait.until(EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//*[@id=&quot;ext-gen1044&quot;]/iframe&#x27;</span>)))</span><br><span class="line">    browser.switch_to.frame(element)</span><br><span class="line"></span><br><span class="line">    play=wait.until(EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//*[@id=&quot;video&quot;]/button&#x27;</span>)))</span><br><span class="line">    play.click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">180</span>)</span><br><span class="line">    browser.refresh()</span><br></pre></td></tr></table></figure><h1 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_web_driver</span>(<span class="params">url</span>):</span><br><span class="line">    options = webdriver.ChromeOptions()</span><br><span class="line">    options.add_argument(<span class="string">&quot;--mute-audio&quot;</span>)</span><br><span class="line">    <span class="comment"># 打开浏览器</span></span><br><span class="line">    browser = webdriver.Chrome(options=options)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#反屏蔽</span></span><br><span class="line">    browser.execute_cdp_cmd(<span class="string">&#x27;Page.addScriptToEvaluateOnNewDocument&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;Object.defineProperty(navigator, &quot;webdriver&quot;, &#123;get: () =&gt; undefined&#125;)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    browser.get(url)</span><br><span class="line">    browser.maximize_window()</span><br><span class="line">    <span class="keyword">return</span> browser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">browser,user_name,password</span>):</span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    login_button = wait.until(EC.element_to_be_clickable((By.XPATH,<span class="string">&#x27;//*[@id=&quot;y-user-account&quot;]/span/a[2]&#x27;</span>)))</span><br><span class="line">    login_button.click()</span><br><span class="line">    <span class="comment"># 填写账号</span></span><br><span class="line">    wait.until(EC.element_to_be_clickable((By.XPATH,<span class="string">&#x27;//*[@id=&quot;account-txt&quot;]&#x27;</span>))).send_keys(user_name)</span><br><span class="line">    <span class="comment"># 填写密码</span></span><br><span class="line">    browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;password-txt&quot;]&#x27;</span>).send_keys(password)</span><br><span class="line">    <span class="comment"># 点击登录</span></span><br><span class="line">    browser.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;login-btn&quot;]&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">browser</span>):</span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    a=wait.until(EC.element_to_be_clickable((By.XPATH, <span class="string">&#x27;//*[@id=&quot;YOOC_MENU&quot;]&#x27;</span>)))</span><br><span class="line">    a.click()</span><br><span class="line"></span><br><span class="line">    handles = browser.window_handles  <span class="comment"># 获取当前窗口句柄集合</span></span><br><span class="line">    <span class="built_in">print</span>(handles)</span><br><span class="line">    <span class="keyword">for</span> handle <span class="keyword">in</span> handles:  <span class="comment"># 切换窗口</span></span><br><span class="line">        <span class="keyword">if</span> handle != browser.current_window_handle:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;switch to second window&#x27;</span>, handle)</span><br><span class="line">            browser.close()  <span class="comment"># 关闭第一个窗口</span></span><br><span class="line">            browser.switch_to.window(handle)  <span class="comment"># 切换到第二个窗口</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 定位元素</span></span><br><span class="line">    hover_element = browser.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[2]/div/div[2]/div[2]/div[1]&#x27;</span>)</span><br><span class="line">    <span class="comment"># 对该元素执行悬停操作</span></span><br><span class="line">    ActionChains(browser).move_to_element(hover_element).perform()</span><br><span class="line">    <span class="comment"># 等待几秒看看效果</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    browser.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[2]/div/div[2]/div[2]/div[2]/ul/li[2]/a&#x27;</span>).click()</span><br><span class="line">    browser.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[2]/div[2]/table/tbody/tr/td/table[2]/tbody/tr/td[2]/a/h1&#x27;</span>).click()</span><br><span class="line">    browser.find_element(By.XPATH, <span class="string">&#x27;/html/body/div[2]/div/div[2]/div/a&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        browser.find_element(By.XPATH, <span class="string">f&#x27;/html/body/div[3]/div/div[2]/ul/li[<span class="subst">&#123;<span class="number">26</span>+i&#125;</span>]/a/h4&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">8</span>)</span><br><span class="line">        <span class="comment"># 定位元素</span></span><br><span class="line">        hover_element = browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;video&quot;]&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对该元素执行悬停操作</span></span><br><span class="line">        ActionChains(browser).move_to_element(hover_element).perform()</span><br><span class="line">        <span class="comment"># 等待几秒看看效果</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        browser.find_element(By.XPATH, <span class="string">&#x27;//*[@id=&quot;video&quot;]&#x27;</span>).click()</span><br><span class="line">        time.sleep(<span class="number">20</span>*<span class="number">60</span>)</span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    user_name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    password=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    brower=create_web_driver(<span class="string">&quot;https://www.yiban.cn/&quot;</span>)</span><br><span class="line">    login(brower,user_name,password)</span><br><span class="line">    action(brower)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql dataType</title>
      <link href="/2021/12/03/SQL/mysql-dataType/"/>
      <url>/2021/12/03/SQL/mysql-dataType/</url>
      
        <content type="html"><![CDATA[<h3 id="String-Data-Types"><a href="#String-Data-Types" class="headerlink" title="String Data Types"></a>String Data Types</h3><table><thead><tr><th align="left">Data type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">CHAR(size)</td><td align="left">A FIXED length string (can contain letters, numbers, and special characters). The <em>size</em> parameter specifies the column length in characters - can be from 0 to 255. Default is 1</td></tr><tr><td align="left">VARCHAR(size)</td><td align="left">A VARIABLE length string (can contain letters, numbers, and special characters). The <em>size</em> parameter specifies the maximum column length in characters - can be from 0 to 65535</td></tr><tr><td align="left">BINARY(size)</td><td align="left">Equal to CHAR(), but stores binary byte strings. The <em>size</em> parameter specifies the column length in bytes. Default is 1</td></tr><tr><td align="left">VARBINARY(size)</td><td align="left">Equal to VARCHAR(), but stores binary byte strings. The <em>size</em> parameter specifies the maximum column length in bytes.</td></tr><tr><td align="left">TINYBLOB</td><td align="left">For BLOBs (Binary Large OBjects). Max length: 255 bytes</td></tr><tr><td align="left">TINYTEXT</td><td align="left">Holds a string with a maximum length of 255 characters</td></tr><tr><td align="left">TEXT(size)</td><td align="left">Holds a string with a maximum length of 65,535 bytes</td></tr><tr><td align="left">BLOB(size)</td><td align="left">For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">Holds a string with a maximum length of 16,777,215 characters</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data</td></tr><tr><td align="left">LONGTEXT</td><td align="left">Holds a string with a maximum length of 4,294,967,295 characters</td></tr><tr><td align="left">LONGBLOB</td><td align="left">For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data</td></tr><tr><td align="left">ENUM(val1, val2, val3, …)</td><td align="left">A string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted. The values are sorted in the order you enter them</td></tr><tr><td align="left">SET(val1, val2, val3, …)</td><td align="left">A string object that can have 0 or more values, chosen from a list of possible values. You can list up to 64 values in a SET list</td></tr></tbody></table><hr><hr><h3 id="Numeric-Data-Types"><a href="#Numeric-Data-Types" class="headerlink" title="Numeric Data Types"></a>Numeric Data Types</h3><table><thead><tr><th align="left">Data type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">BIT(<em>size</em>)</td><td align="left">A bit-value type. The number of bits per value is specified in <em>size</em>. The <em>size</em> parameter can hold a value from 1 to 64. The default value for <em>size</em> is 1.</td></tr><tr><td align="left">TINYINT(<em>size</em>)</td><td align="left">A very small integer. Signed range is from -128 to 127. Unsigned range is from 0 to 255. The <em>size</em> parameter specifies the maximum display width (which is 255)</td></tr><tr><td align="left">BOOL</td><td align="left">Zero is considered as false, nonzero values are considered as true.</td></tr><tr><td align="left">BOOLEAN</td><td align="left">Equal to BOOL</td></tr><tr><td align="left">SMALLINT(<em>size</em>)</td><td align="left">A small integer. Signed range is from -32768 to 32767. Unsigned range is from 0 to 65535. The <em>size</em> parameter specifies the maximum display width (which is 255)</td></tr><tr><td align="left">MEDIUMINT(<em>size</em>)</td><td align="left">A medium integer. Signed range is from -8388608 to 8388607. Unsigned range is from 0 to 16777215. The <em>size</em> parameter specifies the maximum display width (which is 255)</td></tr><tr><td align="left">INT(<em>size</em>)</td><td align="left">A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The <em>size</em> parameter specifies the maximum display width (which is 255)</td></tr><tr><td align="left">INTEGER(<em>size</em>)</td><td align="left">Equal to INT(size)</td></tr><tr><td align="left">BIGINT(<em>size</em>)</td><td align="left">A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The <em>size</em> parameter specifies the maximum display width (which is 255)</td></tr><tr><td align="left">FLOAT(<em>size</em>, <em>d</em>)</td><td align="left">A floating point number. The total number of digits is specified in <em>size</em>. The number of digits after the decimal point is specified in the <em>d</em> parameter. This syntax is deprecated in MySQL 8.0.17, and it will be removed in future MySQL versions</td></tr><tr><td align="left">FLOAT(<em>p</em>)</td><td align="left">A floating point number. MySQL uses the <em>p</em> value to determine whether to use FLOAT or DOUBLE for the resulting data type. If <em>p</em> is from 0 to 24, the data type becomes FLOAT(). If <em>p</em> is from 25 to 53, the data type becomes DOUBLE()</td></tr><tr><td align="left">DOUBLE(<em>size</em>, <em>d</em>)</td><td align="left">A normal-size floating point number. The total number of digits is specified in <em>size</em>. The number of digits after the decimal point is specified in the <em>d</em> parameter</td></tr><tr><td align="left">DOUBLE PRECISION(<em>size</em>, <em>d</em>)</td><td align="left"></td></tr><tr><td align="left">DECIMAL(<em>size</em>, <em>d</em>)</td><td align="left">An exact fixed-point number. The total number of digits is specified in <em>size</em>. The number of digits after the decimal point is specified in the <em>d</em> parameter. The maximum number for <em>size</em> is 65. The maximum number for <em>d</em> is 30. The default value for <em>size</em> is 10. The default value for <em>d</em> is 0.</td></tr><tr><td align="left">DEC(<em>size</em>, <em>d</em>)</td><td align="left">Equal to DECIMAL(size,d)</td></tr></tbody></table><p><strong>Note:</strong> All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.</p><h3 id="Date-and-Time-Data-Types"><a href="#Date-and-Time-Data-Types" class="headerlink" title="Date and Time Data Types"></a>Date and Time Data Types</h3><table><thead><tr><th align="left">Data type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">A date. Format: YYYY-MM-DD. The supported range is from ‘1000-01-01’ to ‘9999-12-31’</td></tr><tr><td align="left">DATETIME(<em>fsp</em>)</td><td align="left">A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from ‘1000-01-01 00:00:00’ to ‘9999-12-31 23:59:59’. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time</td></tr><tr><td align="left">TIMESTAMP(<em>fsp</em>)</td><td align="left">A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch (‘1970-01-01 00:00:00’ UTC). Format: YYYY-MM-DD hh:mm:ss. The supported range is from ‘1970-01-01 00:00:01’ UTC to ‘2038-01-09 03:14:07’ UTC. Automatic initialization and updating to the current date and time can be specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP in the column definition</td></tr><tr><td align="left">TIME(<em>fsp</em>)</td><td align="left">A time. Format: hh:mm:ss. The supported range is from ‘-838:59:59’ to ‘838:59:59’</td></tr><tr><td align="left">YEAR</td><td align="left">A year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000. MySQL 8.0 does not support year in two-digit format.</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python MySQL</title>
      <link href="/2021/11/30/Python/Python-MySQL/"/>
      <url>/2021/11/30/Python/Python-MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Creating-Connection"><a href="#Creating-Connection" class="headerlink" title="Creating Connection"></a>Creating Connection</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">mydb = pymysql.connect(</span><br><span class="line">  host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password=<span class="string">&quot;123456&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Creating-a-Database"><a href="#Creating-a-Database" class="headerlink" title="Creating a Database"></a>Creating a Database</h1><p>We created a database named “mydatabase”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mycursor = mydb.cursor()</span><br><span class="line"></span><br><span class="line">mycursor.execute(<span class="string">&quot;CREATE DATABASE mydatabase&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Check-if-Database-Exists"><a href="#Check-if-Database-Exists" class="headerlink" title="Check if Database Exists"></a>Check if Database Exists</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mycursor = mydb.cursor()</span><br><span class="line"></span><br><span class="line">mycursor.execute(<span class="string">&quot;SHOW DATABASES&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycursor:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="access-the-database-when-making-the-connection"><a href="#access-the-database-when-making-the-connection" class="headerlink" title="access the database when making the connection"></a>access the database when making the connection</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mydb = pymysql.connect(</span><br><span class="line">  host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">  password=<span class="string">&quot;123456&quot;</span>,</span><br><span class="line">  db=<span class="string">&quot;mydatabase&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Creating-Table"><a href="#Creating-Table" class="headerlink" title="Creating Table"></a>Creating Table</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">&quot;CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Check-if-Table-Exists"><a href="#Check-if-Table-Exists" class="headerlink" title="Check if Table Exists"></a>Check if Table Exists</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">&quot;SHOW TABLES&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycursor:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="Primary-key"><a href="#Primary-key" class="headerlink" title="Primary key"></a>Primary key</h2><h1 id="Insert-Into-Table"><a href="#Insert-Into-Table" class="headerlink" title="Insert Into Table"></a>Insert Into Table</h1><p>Now, we insert some values into the “customers” table</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">&quot;INSERT INTO customers (name, address) VALUES (%s, %s)&quot;</span></span><br><span class="line">val = (<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Highway 21&quot;</span>)</span><br><span class="line">mycursor.execute(sql, val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># change the table</span></span><br><span class="line">mydb.commit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mycursor.rowcount, <span class="string">&quot;record inserted.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Insert-Multiple-Rows"><a href="#Insert-Multiple-Rows" class="headerlink" title="Insert Multiple Rows"></a>Insert Multiple Rows</h2><p>To insert multiple rows into a table, use the <code>executemany()</code> method.</p><p>The second parameter of the <code>executemany()</code> method is a list of tuples, containing the data you want to insert:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">&quot;INSERT INTO customers (name, address) VALUES (%s, %s)&quot;</span></span><br><span class="line">val = [</span><br><span class="line">  (<span class="string">&#x27;Peter&#x27;</span>, <span class="string">&#x27;Lowstreet 4&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Amy&#x27;</span>, <span class="string">&#x27;Apple st 652&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Hannah&#x27;</span>, <span class="string">&#x27;Mountain 21&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Valley 345&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Sandy&#x27;</span>, <span class="string">&#x27;Ocean blvd 2&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Betty&#x27;</span>, <span class="string">&#x27;Green Grass 1&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Richard&#x27;</span>, <span class="string">&#x27;Sky st 331&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Susan&#x27;</span>, <span class="string">&#x27;One way 98&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Vicky&#x27;</span>, <span class="string">&#x27;Yellow Garden 2&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Ben&#x27;</span>, <span class="string">&#x27;Park Lane 38&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;William&#x27;</span>, <span class="string">&#x27;Central st 954&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Chuck&#x27;</span>, <span class="string">&#x27;Main Road 989&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;Viola&#x27;</span>, <span class="string">&#x27;Sideway 1633&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">mycursor.executemany(sql, val)</span><br><span class="line"></span><br><span class="line">mydb.commit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mycursor.rowcount, <span class="string">&quot;was inserted.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas</title>
      <link href="/2021/11/23/Python/pandas/"/>
      <url>/2021/11/23/Python/pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-pandas"><a href="#What-is-pandas" class="headerlink" title="What is pandas?"></a>What is pandas?</h1><p>Pandas is a Python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data.</p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><h2 id="Creating-a-Series"><a href="#Creating-a-Series" class="headerlink" title="Creating a Series"></a>Creating a Series</h2><p>You can create a Series by putting a <code>list</code> or <code>dictionary</code> as the parameter to the method <code>pd.Series()</code> .</p><p>The Series is a <strong>one-dimensional array</strong> holding data of any type.</p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>The label is the index of the element in the Series. </p><h3 id="using-list"><a href="#using-list" class="headerlink" title="using list"></a>using list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0    1</span><br><span class="line">1    7</span><br><span class="line">2    2</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>This label can be used to access a specified value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(myvar[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>With the <code>index</code> argument, you can name your own labels.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myvar=pd.Series(a, index=[<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x    1</span><br><span class="line">y    7</span><br><span class="line">z    2</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="using-dictionary"><a href="#using-dictionary" class="headerlink" title="using dictionary"></a>using dictionary</h3><p>Dictionary is a storage to store <code>key/value</code> pairs. </p><p>So when you make dictionary as the parameter, the <code>key</code> will become the <code>label</code> of the Series. </p><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p><code>DataFrame</code> is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns.</p><p>As an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&quot;calories&quot;</span>:[<span class="number">420</span>, <span class="number">380</span>, <span class="number">390</span>],</span><br><span class="line">    <span class="string">&quot;duration&quot;</span>:[<span class="number">50</span>,<span class="number">40</span>,<span class="number">45</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># one dimension array</span></span><br><span class="line">myvar=pd.Series(data)</span><br><span class="line"><span class="comment"># two dimension array</span></span><br><span class="line">myvar2=pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myvar)</span><br><span class="line"><span class="built_in">print</span>(myvar2)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">calories    [420, 380, 390]</span><br><span class="line">duration       [50, 40, 45]</span><br><span class="line">dtype: object</span><br><span class="line">   calories  duration</span><br><span class="line">0       420        50</span><br><span class="line">1       380        40</span><br><span class="line">2       390        45</span><br></pre></td></tr></table></figure><h2 id="local-a-row"><a href="#local-a-row" class="headerlink" title="local a row"></a>local a row</h2><p>Pandas use the <code>loc</code> attribute to return one or more specified row(s)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(myvar2.loc[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calories    420</span><br><span class="line">duration     50</span><br></pre></td></tr></table></figure><p>This example returns a Pandas <strong>Series</strong>.</p><h2 id="local-multiple-row"><a href="#local-multiple-row" class="headerlink" title="local multiple row"></a>local multiple row</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[[<span class="number">0</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   calories  duration</span><br><span class="line">0       420        50</span><br><span class="line">1       380        40</span><br></pre></td></tr></table></figure><h1 id="Read-CSV"><a href="#Read-CSV" class="headerlink" title="Read CSV"></a>Read CSV</h1><p>Load the CSV into a DataFrame:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string()) </span><br></pre></td></tr></table></figure><h1 id="Data-Cleaning"><a href="#Data-Cleaning" class="headerlink" title="Data Cleaning"></a>Data Cleaning</h1><p>Data cleaning means fixing bad data in your data set.</p><p>Bad data could be:</p><ul><li>Empty cells</li><li>Data in wrong format</li><li>Wrong data</li><li>Duplicates</li></ul><h2 id="Empty-Cells"><a href="#Empty-Cells" class="headerlink" title="Empty Cells"></a>Empty Cells</h2><ol><li><p>One way to deal with empty cells is to <strong>remove rows that contain empty cells</strong>. </p><p>This is usually OK, since data sets can be very big, and removing a few rows will not have a big impact on the result.</p><p><strong>Example</strong></p><p>Return a new Data Frame with no empty cells:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_df = df.dropna()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_df.to_string())</span><br></pre></td></tr></table></figure><p>By default, the <code>dropna()</code> method returns a <em>new</em> DataFrame, and will not change the original.</p><p>If you want to change the original DataFrame, use the <code>inplace = True</code> argument:</p><p>Now, the <code>dropna(inplace = True)</code> will NOT return a new DataFrame, but it will remove all rows containg NULL values from the original DataFrame.</p><p><strong>Example</strong></p><p>Remove all rows with NULL values:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df.dropna(inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure></li><li><p>Another way of dealing with empty cells is to insert a <em>new</em> value instead.</p><p>The <code>fillna()</code> method allows us to replace empty cells with a value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(<span class="number">130</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>To only replace empty values for one column, specify the <em>column name</em> for the DataFrame:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;Calories&quot;</span>].fillna(<span class="number">130</span>, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Data-of-Wrong-Format"><a href="#Data-of-Wrong-Format" class="headerlink" title="Data of Wrong Format"></a>Data of Wrong Format</h2><p>Pandas has a <code>to_datetime()</code> method for this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Date&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;Date&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="Wrong-Data"><a href="#Wrong-Data" class="headerlink" title="Wrong Data"></a>Wrong Data</h2><ol><li><p>Replace Value</p><p>Set “Duration” &#x3D; 45 in row 7:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">7</span>, <span class="string">&#x27;Duration&#x27;</span>] = <span class="number">45</span></span><br></pre></td></tr></table></figure><p>To replace wrong data for larger data sets you can create some rules, e.g. set some boundaries for legal values, and replace any values that are outside of the boundaries.</p><p>Loop through all values in the “Duration” column.</p><p>If the value is higher than 120, set it to 120:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line"> <span class="keyword">if</span> df.loc[x, <span class="string">&quot;Duration&quot;</span>] &gt; <span class="number">120</span>:</span><br><span class="line">  df.loc[x, <span class="string">&quot;Duration&quot;</span>] = <span class="number">120</span></span><br></pre></td></tr></table></figure></li><li><p>Remove Row</p><p>Delete rows where “Duration” is higher than 120:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> df.index:</span><br><span class="line"> <span class="keyword">if</span> df.loc[x, <span class="string">&quot;Duration&quot;</span>] &gt; <span class="number">120</span>:</span><br><span class="line">  df.drop(x, inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Duplicates"><a href="#Duplicates" class="headerlink" title="Duplicates"></a>Duplicates</h2><p>To discover duplicates, we can use the <code>duplicated()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.drop_duplicates(inplace = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Plotting"><a href="#Plotting" class="headerlink" title="Plotting"></a>Plotting</h2><p>Pandas uses the <code>plot()</code> method to create diagrams.</p><p><code>df.plot(kind = &#39;scatter&#39;, x = &#39;Duration&#39;, y = &#39;Maxpulse&#39;)</code></p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;Amazon.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># original DataFram</span></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># filling the NaN row</span></span><br><span class="line">df.fillna(<span class="number">4.0</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Formating the Date</span></span><br><span class="line">df[<span class="string">&#x27;评论日期&#x27;</span>]=pd.to_datetime(df[<span class="string">&#x27;评论日期&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Removing Dupulicates</span></span><br><span class="line">df.drop_duplicates(inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the cLeaned DataFram</span></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show the Diagram</span></span><br><span class="line">df.plot(kind = <span class="string">&#x27;scatter&#x27;</span>,x = <span class="string">&#x27;评论日期&#x27;</span>, y = <span class="string">&#x27;评分&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="Read-JSON"><a href="#Read-JSON" class="headerlink" title="Read JSON"></a>Read JSON</h1><p><strong>JSON &#x3D; Python Dictionary</strong></p><p>JSON objects have the same format as Python dictionaries.</p><p>JSON is plain text, but has the format of an object, and is well known in the world of programming, including Pandas.</p><p>Load the JSON file into a DataFrame:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_json(<span class="string">&#x27;data.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;Duration&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:<span class="number">60</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:<span class="number">45</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:<span class="number">45</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:<span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Pulse&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:<span class="number">110</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="number">117</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:<span class="number">103</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:<span class="number">109</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:<span class="number">117</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:<span class="number">102</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Maxpulse&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:<span class="number">130</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="number">145</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:<span class="number">135</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:<span class="number">175</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:<span class="number">148</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:<span class="number">127</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Calories&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>:<span class="number">409</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="number">479</span>,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>:<span class="number">340</span>,</span><br><span class="line">    <span class="string">&quot;3&quot;</span>:<span class="number">282</span>,</span><br><span class="line">    <span class="string">&quot;4&quot;</span>:<span class="number">406</span>,</span><br><span class="line">    <span class="string">&quot;5&quot;</span>:<span class="number">300</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df.to_string())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib</title>
      <link href="/2021/11/18/Python/Matplotlib/"/>
      <url>/2021/11/18/Python/Matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="pyplot"><a href="#pyplot" class="headerlink" title="pyplot"></a>pyplot</h1><p>Most of the Matplotlib utilities lies under the <code>pyplot</code> submodule, and are usually imported under the <code>plt</code> alias:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><h2 id="plot"><a href="#plot" class="headerlink" title="plot()"></a>plot()</h2><p>The <code>plot()</code> function is used to draw points in a diagram. <strong>This function takes two parameters for specifying points</strong> in the diagram. </p><p>Parameter1 is a array that define the range on x-axis. </p><p>Paramete21 is a array that define the range on y-axis. </p><p><strong>By default, the <code>plot()</code> function draws a line from point to point.</strong></p><h3 id="point-to-point"><a href="#point-to-point" class="headerlink" title="point to point"></a>point to point</h3><p><strong>Example</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x=np.array([<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">y=np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>So we draw a line from position(1,2) to (3,4)</p><p><img src="https://i.imgur.com/TvraGPY.png"></p><p>To plot only the markers, you can use <em>shortcut string notation</em> parameter ‘o’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y,<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/WmFCtH6.png"></p><h3 id="Multiple-points"><a href="#Multiple-points" class="headerlink" title="Multiple points"></a>Multiple points</h3><p>You can add more  elements in the <code>np.array()</code>, so that we can define more points.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=np.array([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>])</span><br><span class="line">y=np.array([<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure><p>As we can see, we draw a line from position(1,1) to (5,10) then to (7,1) and to (10,10)</p><p><img src="https://i.imgur.com/uqCY1xf.png"></p><h1 id="Scatter"><a href="#Scatter" class="headerlink" title="Scatter"></a>Scatter</h1><p>With Pyplot, you can use the <code>scatter()</code> function to draw a scatter plot.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">17</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">6</span>])</span><br><span class="line">y = np.array([<span class="number">99</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">88</span>,<span class="number">111</span>,<span class="number">86</span>,<span class="number">103</span>,<span class="number">87</span>,<span class="number">94</span>,<span class="number">78</span>,<span class="number">77</span>,<span class="number">85</span>,<span class="number">86</span>])</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="Bars"><a href="#Bars" class="headerlink" title="Bars"></a>Bars</h1><p>With Pyplot, you can use the <code>bar()</code> function to draw bar graphs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">plt.bar(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h1><p>A histogram is a graph showing <em>frequency</em> distributions.</p><p>It is a graph showing the number of observations within each given interval.</p><p>In Matplotlib, we use the <code>hist()</code> function to create histograms.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.random.normal(<span class="number">170</span>, <span class="number">10</span>, <span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">plt.hist(x)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><h1 id="Pie-Charts"><a href="#Pie-Charts" class="headerlink" title="Pie Charts"></a>Pie Charts</h1><p>You can use <code>pie()</code> function to draw pie charts. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">y = np.array([<span class="number">35</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">plt.pie(y)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p>Add labels to the pie chart with the <code>label</code> parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mylabels = [<span class="string">&quot;Apples&quot;</span>, <span class="string">&quot;Bananas&quot;</span>, <span class="string">&quot;Cherries&quot;</span>, <span class="string">&quot;Dates&quot;</span>]</span><br><span class="line"></span><br><span class="line">plt.pie(y, labels = mylabels)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expression</title>
      <link href="/2021/11/02/Python/regular-expression/"/>
      <url>/2021/11/02/Python/regular-expression/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Regular Expression, is a sequence of characters that forms a search pattern.</p><p>RegEx can be used to check if a string contains the specified search pattern.</p><h1 id="RegEx"><a href="#RegEx" class="headerlink" title="RegEx"></a>RegEx</h1><h2 id="Metacharacters"><a href="#Metacharacters" class="headerlink" title="Metacharacters"></a>Metacharacters</h2><p>Metacharacters are characters with a special meaning:</p><table><thead><tr><th align="left">Character</th><th align="left">Description</th><th>Example</th></tr></thead><tbody><tr><td align="left">[]</td><td align="left">A set of characters</td><td>“[a-m]”</td></tr><tr><td align="left">\</td><td align="left">Signals a special sequence (can also be used to escape special characters)</td><td>“\d”</td></tr><tr><td align="left">.</td><td align="left">Any character (except newline character)</td><td>“he..o”</td></tr><tr><td align="left">^</td><td align="left">Starts with</td><td>“^hello”</td></tr><tr><td align="left">$</td><td align="left">Ends with</td><td>“planet$”</td></tr><tr><td align="left">*</td><td align="left">Zero or more occurrences</td><td>“he.*o”</td></tr><tr><td align="left">+</td><td align="left">One or more occurrences</td><td>“he.+o”</td></tr><tr><td align="left">?</td><td align="left">Zero or one occurrences</td><td>“he.?o”</td></tr><tr><td align="left">{}</td><td align="left">Exactly the specified number of occurrences</td><td>“he{2}o”</td></tr></tbody></table><hr><h2 id="Special-Sequences"><a href="#Special-Sequences" class="headerlink" title="Special Sequences"></a>Special Sequences</h2><p>A special sequence is a <code>\</code> followed by one of the characters in the list below, and has a special meaning:</p><table><thead><tr><th align="left">Character</th><th align="left">Description</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left">\A</td><td align="left">Returns a match if the specified characters are at the beginning of the string</td><td align="left">“\AThe”</td></tr><tr><td align="left">\b</td><td align="left">Returns a match where the specified characters are at the beginning or at the end of a word (the “r” in the beginning is making sure that the string is being treated as a “raw string”)</td><td align="left">r”\bain” r”ain\b”</td></tr><tr><td align="left">\B</td><td align="left">Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word (the “r” in the beginning is making sure that the string is being treated as a “raw string”)</td><td align="left">r”\Bain” r”ain\B”</td></tr><tr><td align="left">\d</td><td align="left">Returns a match where the string contains digits (numbers from 0-9)</td><td align="left">“\d”</td></tr><tr><td align="left">\D</td><td align="left">Returns a match where the string DOES NOT contain digits</td><td align="left">“\D”</td></tr><tr><td align="left">\s</td><td align="left">Returns a match where the string contains a white space character</td><td align="left">“\s”</td></tr><tr><td align="left">\S</td><td align="left">Returns a match where the string DOES NOT contain a white space character</td><td align="left">“\S”</td></tr><tr><td align="left">\w</td><td align="left">Returns a match where the string contains any word characters (characters from a to Z, digits from 0-9, and the underscore _ character)</td><td align="left">“\w”</td></tr><tr><td align="left">\W</td><td align="left">Returns a match where the string DOES NOT contain any word characters</td><td align="left">“\W”</td></tr></tbody></table><hr><h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><p>A set is a set of characters inside a pair of square brackets <code>[]</code> with a special meaning:</p><table><thead><tr><th align="left">Set</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">[arn]</td><td align="left">Returns a match where one of the specified characters (<code>a</code>, <code>r</code>, or <code>n</code>) are present</td></tr><tr><td align="left">[a-n]</td><td align="left">Returns a match for any lower case character, alphabetically between <code>a</code> and <code>n</code></td></tr><tr><td align="left">[^arn]</td><td align="left">Returns a match for any character EXCEPT <code>a</code>, <code>r</code>, and <code>n</code></td></tr><tr><td align="left">[0123]</td><td align="left">Returns a match where any of the specified digits (<code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code>) are present</td></tr><tr><td align="left">[0-9]</td><td align="left">Returns a match for any digit between <code>0</code> and <code>9</code></td></tr><tr><td align="left"><code>[0-5][0-9]</code></td><td align="left">Returns a match for any two-digit numbers from <code>00</code> and <code>59</code></td></tr><tr><td align="left">[a-zA-Z]</td><td align="left">Returns a match for any character alphabetically between <code>a</code> and <code>z</code>, lower case OR upper case</td></tr><tr><td align="left">[+]</td><td align="left">In sets, <code>+</code>, <code>*</code>, <code>.</code>, &#96;</td></tr></tbody></table><h1 id="RegEx-Module"><a href="#RegEx-Module" class="headerlink" title="RegEx Module"></a>RegEx Module</h1><p>Python has a built-in package called <code>re</code>, which can be used to work with Regular Expressions.</p><p>The <code>re</code> module offers a set of functions that allows us to search a string for a match:</p><table><thead><tr><th align="left">Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3schools.com/python/python_regex.asp#findall">findall</a></td><td align="left">Returns a list containing all matches</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/python_regex.asp#search">search</a></td><td align="left">Returns a <a href="https://www.w3schools.com/python/python_regex.asp#matchobject">Match object</a> if there is a match anywhere in the string</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/python_regex.asp#split">split</a></td><td align="left">Returns a list where the string has been split at each match</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/python_regex.asp#sub">sub</a></td><td align="left">Replaces one or many matches with a string</td></tr></tbody></table><h1 id="Greedy-Matching"><a href="#Greedy-Matching" class="headerlink" title="Greedy Matching"></a>Greedy Matching</h1><p>RegEx does a greedy match by default. This means that the matchmaking will be as long as possible. Check out the example below. It refers to any match that ends in r and can be any character preceded by it. But it does not stop at the first letter r.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ber beer beeer beeeer</span><br></pre></td></tr></table></figure><p>RegEx: <code>.*r</code> matching all the text</p><h1 id="Lazy-Matching"><a href="#Lazy-Matching" class="headerlink" title="Lazy Matching"></a>Lazy Matching</h1><p>Lazy matchmaking, unlike greedy matching, stops at the first matching. For example, in the example below, add a ? after * to find the first match that ends with the letter r and is preceded by any character. It means that this match will stop at the first letter r.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ber beer beeer beeeer</span><br></pre></td></tr></table></figure><p>RegEx: <code>.*?r</code> matching the first word. </p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spider</title>
      <link href="/2021/11/02/Python/Spider/"/>
      <url>/2021/11/02/Python/Spider/</url>
      
        <content type="html"><![CDATA[<ol><li>发送请求</li><li>获取源码（re正则表达式，css（parsel），XPath）</li><li>提取数据</li><li>保存数据</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import parsel</span><br><span class="line">import csv</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def spider():</span><br><span class="line"></span><br><span class="line">    headers=&#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i=0</span><br><span class="line">    num=0</span><br><span class="line">    while True:</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        url=f&#x27;https://sz.lianjia.com/ershoufang/pg&#123;i+1&#125;/&#x27;</span><br><span class="line"></span><br><span class="line">        # 发送请求</span><br><span class="line">        response = requests.get(url=url,headers=headers)</span><br><span class="line">        # 获取源码</span><br><span class="line">        # 提取数据</span><br><span class="line"></span><br><span class="line">        selector=parsel.Selector(response.text)</span><br><span class="line">        href=selector.css(&#x27;div.leftContent  li  div.info.clear  div.title  a::attr(href)&#x27;).getall()</span><br><span class="line">        for link in href:</span><br><span class="line">            num = num + 1</span><br><span class="line">            html_data=requests.get(url=link,headers=headers).text</span><br><span class="line">            selector1 = parsel.Selector(html_data)</span><br><span class="line">            try:</span><br><span class="line">                title=selector1.css(&#x27;.title h1::text&#x27;).get()</span><br><span class="line">                price=selector1.css(&#x27;span.total::text&#x27;).get()</span><br><span class="line">                price_per_meter = selector1.css(&#x27;.unitPrice span::text&#x27;).get()</span><br><span class="line">                Type = selector1.css(&#x27;.room div.mainInfo::text&#x27;).get()</span><br><span class="line">                area = selector1.css(&#x27;.base &gt; div.content &gt; ul &gt; li:nth-child(3)::text&#x27;).get()</span><br><span class="line">                direction = selector1.css(&#x27;.base &gt; div.content &gt; ul &gt; li:nth-child(7)::text&#x27;).get()</span><br><span class="line">                furnished=selector1.css(&#x27;.base &gt; div.content &gt; ul &gt; li:nth-child(9) &gt; span::text&#x27;).get()</span><br><span class="line">                lift=selector1.css(&#x27;.base &gt; div.content &gt; ul &gt; li:nth-child(12) &gt; span::text&#x27;).get()</span><br><span class="line">                floors=selector1.css(&#x27;.base &gt; div.content &gt; ul &gt; li:nth-child(2)::text&#x27;).get()</span><br><span class="line">                year=selector1.css(&#x27;.subInfo.noHidden::text&#x27;).get()</span><br><span class="line">                data=[title, price, price_per_meter, Type, area, direction, furnished, lift, floors,year]</span><br><span class="line">                print(title, price, price_per_meter, Type, area, direction, furnished, lift, floors,year,sep=&#x27;|&#x27;)</span><br><span class="line">                write_csv(data)</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line">def write_csv(data_row):</span><br><span class="line">    path  = &quot;house1.csv&quot;</span><br><span class="line">    with open(path,&#x27;a&#x27;,newline=&#x27;&#x27;) as f:</span><br><span class="line">        csv_write = csv.writer(f)</span><br><span class="line">        csv_write.writerow(data_row)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    name = (&quot;title&quot;, &quot;price&quot;, &quot;price_per_meter&quot;, &quot;Type&quot;, &quot;area&quot;, &quot;direction&quot;, &quot;furnished&quot;, &quot;lift&quot;, &quot;floors&quot;, &quot;year&quot;)</span><br><span class="line">    path = &quot;house1.csv&quot;</span><br><span class="line">    with open(path,&#x27;a&#x27;,newline=&#x27;&#x27;) as f:</span><br><span class="line">        csv_write = csv.writer(f)</span><br><span class="line">        csv_write.writerow(name)</span><br><span class="line">    spider()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base_syntax</title>
      <link href="/2021/10/15/Python/python/"/>
      <url>/2021/10/15/Python/python/</url>
      
        <content type="html"><![CDATA[<p>Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.</p><ol><li><p>The way to run a python file is like this on the command line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\*Your Name*&gt;python helloworld.py</span><br></pre></td></tr></table></figure></li><li><p>Python can be run as a command line itself.</p><p>Type the following on the Windows, Mac or Linux command line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Your Name&gt;python</span><br></pre></td></tr></table></figure><p>Or, if the “python” command did not work, you can try “py”:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Your Name&gt;py</span><br></pre></td></tr></table></figure></li></ol><h1 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h1><p>Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.</p><p><strong>Python uses indentation to indicate a block of code.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span> &gt; <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Five is greater than two!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>The number of spaces is up to you as a programmer, but it has to be at least one.</strong></p><p><strong>You have to use the same number of spaces in the same block of code, otherwise Python will give you an error:</strong></p><p>Syntax Error:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span> &gt; <span class="number">2</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;Five is greater than two!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Five is greater than two!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><ul><li><p>In Python, variables are created when you assign a value to it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line">y=<span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure></li><li><p>Variables do not need to be declared with any particular <em>type</em>, and can even change type after they have been set.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span></span><br><span class="line">x=<span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></li><li><p><strong>String variables can be declared either by using single or double quotes:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="comment"># is the same as</span></span><br><span class="line">x = <span class="string">&#x27;John&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>Casting</p><p>If you want to specify the data type of a variable, this can be done with casting.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">str</span>(<span class="number">3</span>)    <span class="comment"># x will be &#x27;3&#x27;</span></span><br><span class="line">y = <span class="built_in">int</span>(<span class="number">3</span>)    <span class="comment"># y will be 3</span></span><br><span class="line">z = <span class="built_in">float</span>(<span class="number">3</span>)  <span class="comment"># z will be 3.0</span></span><br></pre></td></tr></table></figure></li><li><p>Get the Type</p><p>You can get the data type of a variable with the <code>type()</code> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(y))</span><br></pre></td></tr></table></figure></li><li><p>Variable name</p><ul><li>A variable name must start with a letter or the underscore character</li><li>A variable name cannot start with a number</li><li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )</li><li>Variable names are case-sensitive (age, Age and AGE are three different variables)</li><li>A variable name cannot be any of the Python keywords.</li></ul></li><li><p>Output Variable</p><p>In the <code>print()</code> function, you output multiple variables, separated by a comma:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot;Python&quot;</span></span><br><span class="line">y=<span class="string">&quot;is&quot;</span></span><br><span class="line">z=<span class="string">&quot;awesome&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x,y,z)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python is awesome</span></span><br></pre></td></tr></table></figure><p>You can also use the <code>+</code> operator to output multiple variables:</p><p>(But <code>+</code> will not separate the word by space. In the string , the function of <code>+</code> is concatenating the strings)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;Python&quot;</span></span><br><span class="line">y = <span class="string">&quot;is&quot;</span></span><br><span class="line">z = <span class="string">&quot;awesome&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x + <span class="string">&#x27; &#x27;</span> + y + <span class="string">&#x27; &#x27;</span> + z)</span><br></pre></td></tr></table></figure><p>For numbers, the <code>+</code> character works as a mathematical operator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br></pre></td></tr></table></figure><p>In the <code>print()</code> function, when you try to combine a string and a number with the <code>+</code> operator, Python will give you an error:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br></pre></td></tr></table></figure><p>The best way to output multiple variables in the <code>print()</code> function is to separate them with commas, which even support different data types:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="string">&quot;John&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x, y)</span><br></pre></td></tr></table></figure></li><li><p>Global Variables</p><p>Variables that are created outside of a function (as in all of the examples above) are known as global variables. Global variables can be used by everyone, both inside of functions and outside.</p><p>If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;awesome&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>():</span><br><span class="line">  x = <span class="string">&quot;fantastic&quot;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Python is &quot;</span> + x)</span><br><span class="line"></span><br><span class="line">myfunc()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python is &quot;</span> + x)</span><br></pre></td></tr></table></figure></li><li><p>Global Keyword</p><p>To create a global variable inside a function, you can use the <code>global</code> keyword.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>():</span><br><span class="line">  <span class="keyword">global</span> x</span><br><span class="line">  x = <span class="string">&quot;fantastic&quot;</span></span><br><span class="line"></span><br><span class="line">myfunc()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python is &quot;</span> + x)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><p>Python has the following data types built-in by default, in these categories:</p><table><thead><tr><th>Text Type:</th><th><code>str</code></th></tr></thead><tbody><tr><td>Numeric Types:</td><td><code>int</code>, <code>float</code>, <code>complex</code></td></tr><tr><td>Sequence Types:</td><td><code>list</code>, <code>tuple</code>, <code>range</code></td></tr><tr><td>Mapping Type:</td><td><code>dict</code></td></tr><tr><td>Set Types:</td><td><code>set</code>, <code>frozenset</code></td></tr><tr><td>Boolean Type:</td><td><code>bool</code></td></tr><tr><td>Binary Types:</td><td><code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></td></tr><tr><td>None Type:</td><td><code>NoneType</code></td></tr></tbody></table><h2 id="Setting-the-data-type"><a href="#Setting-the-data-type" class="headerlink" title="Setting the data type"></a>Setting the data type</h2><table><thead><tr><th align="left">Example</th><th align="left">Data Type</th></tr></thead><tbody><tr><td align="left">x &#x3D; “Hello World”</td><td align="left">str</td></tr><tr><td align="left">x &#x3D; 20</td><td align="left">int</td></tr><tr><td align="left">x &#x3D; 20.5</td><td align="left">float</td></tr><tr><td align="left">x &#x3D; 1j</td><td align="left">complex</td></tr><tr><td align="left">x &#x3D; [“apple”, “banana”, “cherry”]</td><td align="left">list</td></tr><tr><td align="left">x &#x3D; (“apple”, “banana”, “cherry”)</td><td align="left">tuple</td></tr><tr><td align="left">x &#x3D; range(6)</td><td align="left">range</td></tr><tr><td align="left">x &#x3D; {“name” : “John”, “age” : 36}</td><td align="left">dict</td></tr><tr><td align="left">x &#x3D; {“apple”, “banana”, “cherry”}</td><td align="left">set</td></tr><tr><td align="left">x &#x3D; frozenset({“apple”, “banana”, “cherry”})</td><td align="left">frozenset</td></tr><tr><td align="left">x &#x3D; True</td><td align="left">bool</td></tr><tr><td align="left">x &#x3D; b”Hello”</td><td align="left">bytes</td></tr><tr><td align="left">x &#x3D; bytearray(5)</td><td align="left">bytearray</td></tr><tr><td align="left">x &#x3D; memoryview(bytes(5))</td><td align="left">memoryview</td></tr><tr><td align="left">x &#x3D; None</td><td align="left">NoneType</td></tr></tbody></table><ul><li><p>Get the data types</p><p>You can get the data type of any object by using the <code>type()</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"><span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><p>Strings in python are surrounded by either single quotation marks, or double quotation marks.</p><p>‘hello’ is the same as “hello”.</p><h2 id="Multiline-Strings"><a href="#Multiline-Strings" class="headerlink" title="Multiline Strings"></a>Multiline Strings</h2><p>You can assign a multiline string to a variable by using three quotes, Or three single quotes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;&quot;&quot;Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="string">consectetur adipiscing elit,</span></span><br><span class="line"><span class="string">sed do eiusmod tempor incididunt</span></span><br><span class="line"><span class="string">ut labore et dolore magna aliqua.&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = <span class="string">&#x27;&#x27;&#x27;Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="string">consectetur adipiscing elit,</span></span><br><span class="line"><span class="string">sed do eiusmod tempor incididunt</span></span><br><span class="line"><span class="string">ut labore et dolore magna aliqua.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h2 id="Strings-are-Arrays"><a href="#Strings-are-Arrays" class="headerlink" title="Strings are Arrays"></a>Strings are Arrays</h2><p>Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.</p><h2 id="Looping-Through-a-String"><a href="#Looping-Through-a-String" class="headerlink" title="Looping Through a String"></a>Looping Through a String</h2><p>Since strings are arrays, we can loop through the characters in a string, with a <code>for</code> loop.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="String-Length"><a href="#String-Length" class="headerlink" title="String Length"></a>String Length</h2><p>To get the length of a string, use the <code>len()</code> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br></pre></td></tr></table></figure><h2 id="Check-String"><a href="#Check-String" class="headerlink" title="Check String"></a>Check String</h2><p>To check if a certain phrase or character is present in a string, we can use the keyword <code>in</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">&quot;The best things in life are free!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free&quot;</span> <span class="keyword">in</span> txt)</span><br></pre></td></tr></table></figure><h2 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h2><p>You can return a range of characters by using the slice syntax.</p><p>Specify the start index and the end index, separated by a colon, to return a part of the string.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">2</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>By leaving out the start index, the range will start at the first character:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>By leaving out the <em>end</em> index, the range will go to the end:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><h2 id="Modify-Strings"><a href="#Modify-Strings" class="headerlink" title="Modify Strings"></a>Modify Strings</h2><p>Python has a set of built-in methods that you can use on strings.</p><p>The <code>upper()</code> method returns the string in upper case:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.upper())</span><br></pre></td></tr></table></figure><p>The <code>lower()</code> method returns the string in lower case:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.lower())</span><br></pre></td></tr></table></figure><p>The <code>strip()</code> method removes any whitespace from the beginning or the end:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot; Hello, World! &quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.strip())</span><br><span class="line"><span class="comment"># returns &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><p>The <code>replace()</code> method replaces a string with another string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&quot;H&quot;</span>, <span class="string">&quot;J&quot;</span>))</span><br></pre></td></tr></table></figure><p>The <code>split()</code> method returns a list where the text between the specified separator becomes the list items.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line"><span class="comment"># returns [&#x27;Hello&#x27;, &#x27; World!&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="Python-Collections"><a href="#Python-Collections" class="headerlink" title="Python Collections"></a>Python Collections</h1><p>There are four collection data types in the Python programming language:</p><ul><li><code>List</code>is a collection which is ordered and changeable. Allows duplicate members.</li><li><code>Tuple</code> is a collection which is ordered and <strong>unchangeable.</strong> Allows duplicate members.</li><li><code>Set</code> is a collection which is <strong>unordered, unchangeable, and unindexed. No duplicate members</strong>.</li><li><code>Dictionary</code> is a collection which is ordered and changeable. <strong>No duplicate members.</strong></li></ul><p>When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.</p><p><code>Unordered</code> means that the items in a set do not have a defined order. Set items can appear in a different order every time you use them, and cannot be referred to by index or key.</p><p><code>Unchangeable</code> means that we cannot change the items after the set has been created.</p><p><code>Duplicates Not Allowed</code> Sets cannot have two items with the same value.</p><h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><p>Lists are used to store multiple items in <strong>a single variable</strong>.</p><p><code>Lists</code> are one of 4 built-in data types in Python used to store collections of data, the other 3 are <code>Tuple</code>, <code>Set</code>, and <code>Dictionary</code>, all with different qualities and usage.</p><p>List items are ordered, changeable, and allow duplicate values.</p><ul><li><p><code>Lists</code> are created using <code>square brackets</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li><li><p>A list can contain different data types:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&quot;abc&quot;</span>, <span class="number">34</span>, <span class="literal">True</span>, <span class="number">40</span>, <span class="string">&quot;male&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="The-list-Constructor"><a href="#The-list-Constructor" class="headerlink" title="The list() Constructor"></a>The list() Constructor</h2><p>It is also possible to use the list() constructor when creating a new list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = <span class="built_in">list</span>((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)) <span class="comment"># note the double round-brackets</span></span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br><span class="line"><span class="comment"># [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="List-Length"><a href="#List-Length" class="headerlink" title="List Length"></a>List Length</h2><p>To determine how many items a list has, use the <code>len()</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(thislist))</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Data-Types-1"><a href="#Data-Types-1" class="headerlink" title="Data Types"></a>Data Types</h2><p>List items can be of any data type. A list can contain different data types:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&quot;abc&quot;</span>, <span class="number">34</span>, <span class="literal">True</span>, <span class="number">40</span>, <span class="string">&quot;male&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="Access-List-Items"><a href="#Access-List-Items" class="headerlink" title="Access List Items"></a>Access List Items</h2><p>List items are indexed and you can access them by referring to the index number:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(thislist[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(thislist[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apple</span><br><span class="line">cherry</span><br></pre></td></tr></table></figure><h2 id="Range-of-Indexes"><a href="#Range-of-Indexes" class="headerlink" title="Range of Indexes"></a>Range of Indexes</h2><p>You can specify a range of indexes by specifying where to start and where to end the range.</p><p>When specifying a range, the return value will be a new list with the specified items.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;melon&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(thislist[<span class="number">2</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The search will start at index 2 (included) and end at index 5 (<strong>not included</strong>). Remember that the first item has index 0.</p><p>By leaving out the start value, the range will start at the first item:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;melon&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(thislist[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;]</span><br></pre></td></tr></table></figure><p>By leaving out the end value, the range will go on to the end of the list:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;melon&quot;</span>, <span class="string">&quot;mango&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(thislist[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;kiwi&#x27;</span>, <span class="string">&#x27;melon&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="Insert-items"><a href="#Insert-items" class="headerlink" title="Insert items"></a>Insert items</h2><p>To insert a new list item, without replacing any of the existing values, we can use the <code>insert()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.insert(<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;hello&#x27;, &#x27;cherry&#x27;]</span><br></pre></td></tr></table></figure><h2 id="Append-Items"><a href="#Append-Items" class="headerlink" title="Append Items"></a>Append Items</h2><p>To add an item to the end of the list, use the append() method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="Extend-List"><a href="#Extend-List" class="headerlink" title="Extend List"></a>Extend List</h2><p>To append elements from <em>another list</em> to the current list, use the <code>extend()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">tropical = [<span class="string">&quot;mango&quot;</span>, <span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;papaya&quot;</span>]</span><br><span class="line">thislist.extend(tropical)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;mango&#x27;, &#x27;pineapple&#x27;, &#x27;papaya&#x27;]</span><br></pre></td></tr></table></figure><h2 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h2><p>The <code>remove()</code> method removes the specified item.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;apple&#x27;, &#x27;cherry&#x27;]</span><br></pre></td></tr></table></figure><p>The <code>pop()</code> method removes the specified index.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;apple&#x27;, &#x27;cherry&#x27;]</span><br></pre></td></tr></table></figure><h2 id="Clear-the-List"><a href="#Clear-the-List" class="headerlink" title="Clear the List"></a>Clear the List</h2><p>The <code>clear()</code> method empties the list.</p><p>The list still remains, but it has no content.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">thislist.clear()</span><br><span class="line"><span class="built_in">print</span>(thislist)</span><br></pre></td></tr></table></figure><h2 id="Loop-Through-a-List"><a href="#Loop-Through-a-List" class="headerlink" title="Loop Through a List"></a>Loop Through a List</h2><p>You can loop through the list items by using a <code>for</code> loop:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thislist:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="Loop-Through-the-Index-Numbers"><a href="#Loop-Through-the-Index-Numbers" class="headerlink" title="Loop Through the Index Numbers"></a>Loop Through the Index Numbers</h2><p>You can also loop through the list items by referring to their index number.</p><p>Use the <code>range()</code> and <code>len()</code> functions to create a suitable iterable.</p><p><code>range(5)</code> function: Create a sequence of numbers from 0 to 4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(thislist)):</span><br><span class="line">  <span class="built_in">print</span>(thislist[i])</span><br></pre></td></tr></table></figure><h2 id="Using-a-While-Loop"><a href="#Using-a-While-Loop" class="headerlink" title="Using a While Loop"></a>Using a While Loop</h2><p>You can loop through the list items by using a <code>while</code> loop.</p><p>Use the <code>len()</code> function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes.</p><p>Remember to increase the index by 1 after each iteration.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(thislist):</span><br><span class="line">  <span class="built_in">print</span>(thislist[i])</span><br><span class="line">  i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Looping-Using-List-Comprehension"><a href="#Looping-Using-List-Comprehension" class="headerlink" title="Looping Using List Comprehension"></a>Looping Using List Comprehension</h2><p>List Comprehension offers the shortest syntax for looping through lists:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thislist = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">[<span class="built_in">print</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> thislist]</span><br></pre></td></tr></table></figure><h2 id="List-Methods"><a href="#List-Methods" class="headerlink" title="List Methods"></a>List Methods</h2><p>Python has a set of built-in methods that you can use on lists.</p><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_append.asp">append()</a></td><td align="left">Adds an element at the end of the list</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_clear.asp">clear()</a></td><td align="left">Removes all the elements from the list</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_copy.asp">copy()</a></td><td align="left">Returns a copy of the list</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_count.asp">count()</a></td><td align="left">Returns the number of elements with the specified value</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_extend.asp">extend()</a></td><td align="left">Add the elements of a list (or any iterable), to the end of the current list</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_index.asp">index()</a></td><td align="left">Returns the index of the first element with the specified value</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_insert.asp">insert()</a></td><td align="left">Adds an element at the specified position</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_pop.asp">pop()</a></td><td align="left">Removes the element at the specified position</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_remove.asp">remove()</a></td><td align="left">Removes the item with the specified value</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_reverse.asp">reverse()</a></td><td align="left">Reverses the order of the list</td></tr><tr><td align="left"><a href="https://www.w3schools.com/python/ref_list_sort.asp">sort()</a></td><td align="left">Sorts the list</td></tr></tbody></table><h1 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h1><p>Tuples are used to store multiple items in a single variable.</p><p>A tuple is a collection which is ordered and <strong>unchangeable</strong>.</p><p>Tuples are written with <strong>round brackets</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br></pre></td></tr></table></figure><h2 id="Create-Tuple-With-One-Item"><a href="#Create-Tuple-With-One-Item" class="headerlink" title="Create Tuple With One Item"></a>Create Tuple With One Item</h2><p>To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(thistuple))</span><br><span class="line"></span><br><span class="line"><span class="comment">#NOT a tuple</span></span><br><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(thistuple))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="The-tuple-Constructor"><a href="#The-tuple-Constructor" class="headerlink" title="The tuple() Constructor"></a>The tuple() Constructor</h2><p>It is also possible to use the tuple() constructor to make a tuple.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thistuple = <span class="built_in">tuple</span>((<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)) <span class="comment"># note the double round-brackets</span></span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br></pre></td></tr></table></figure><h2 id="Access-Tuple-Items"><a href="#Access-Tuple-Items" class="headerlink" title="Access Tuple Items"></a>Access Tuple Items</h2><p>You can access tuple items by referring to the index number, inside square brackets:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thistuple[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>You can specify a range of indexes by specifying where to start and where to end the range.</p><p>When specifying a range, the return value will be a new tuple with the specified items.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;melon&quot;</span>, <span class="string">&quot;mango&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thistuple[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#(&#x27;cherry&#x27;, &#x27;orange&#x27;, &#x27;kiwi&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="Add-Items"><a href="#Add-Items" class="headerlink" title="Add Items"></a>Add Items</h2><p>Since tuples are immutable, they do not have a build-in <code>append()</code> method, but there are other ways to add items to a tuple.</p><ol><li><p><strong>Convert into a list</strong>: Just like the workaround for <em>changing</em> a tuple, you can convert it into a list, add your item(s), and convert it back into a tuple.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = <span class="built_in">list</span>(thistuple)</span><br><span class="line">y.append(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line">thistuple = <span class="built_in">tuple</span>(y)</span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br><span class="line"><span class="comment">#(&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;orange&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Add tuple to a tuple</strong>. You are allowed to add tuples to tuples, so if you want to add one item, (or many), create a new tuple with the item(s), and add it to the existing tuple:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = (<span class="string">&quot;orange&quot;</span>,)</span><br><span class="line">thistuple += y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(thistuple)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Remove-Items"><a href="#Remove-Items" class="headerlink" title="Remove Items"></a>Remove Items</h2><p>Tuples are <strong>unchangeable</strong>, so you cannot remove items from it, but you can use the same workaround as we used for changing and adding tuple items:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Convert the <span class="built_in">tuple</span> into a <span class="built_in">list</span>, remove <span class="string">&quot;apple&quot;</span>, <span class="keyword">and</span> convert it back into a <span class="built_in">tuple</span>:</span><br><span class="line"></span><br><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">y = <span class="built_in">list</span>(thistuple)</span><br><span class="line">y.remove(<span class="string">&quot;apple&quot;</span>)</span><br><span class="line">thistuple = <span class="built_in">tuple</span>(y)</span><br></pre></td></tr></table></figure><h2 id="Loop-Through-a-Tuple"><a href="#Loop-Through-a-Tuple" class="headerlink" title="Loop Through a Tuple"></a>Loop Through a Tuple</h2><p>Iterate through the items and print the values:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thistuple:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>You can also loop through the tuple items by referring to their index number.</p><p>Use the <code>range()</code> and <code>len()</code> functions to create a suitable iterable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(thistuple)):</span><br><span class="line">    <span class="built_in">print</span>(thistuple[i])</span><br></pre></td></tr></table></figure><h2 id="Using-a-While-Loop-1"><a href="#Using-a-While-Loop-1" class="headerlink" title="Using a While Loop"></a>Using a While Loop</h2><p>You can loop through the tuple items by using a <code>while</code> loop. </p><p>Use the <code>len()</code> function to determine the length of the tuple, then start at 0 and loop your way through the tuple items by referring to their indexes.</p><p>Remember to increase the index by 1 after each iteration.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thistuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">i = <span class="number">0</span>   <span class="comment">#define a variable i stared at 0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(thistuple):</span><br><span class="line">    <span class="built_in">print</span>(thistuple[i])</span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>Sets are written with curly brackets.</p><p>A set is a collection which is <strong>unordered</strong>, unchangeable, <em>unindexed</em>, and Duplicates Not Allowed. <strong>So you cannot be sure in which order the items will appear.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br><span class="line"><span class="comment"># &#123;&#x27;banana&#x27;, &#x27;apple&#x27;, &#x27;cherry&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Access-Items"><a href="#Access-Items" class="headerlink" title="Access Items"></a>Access Items</h2><p>You cannot access items in a set by referring to an index or a key.</p><p>But you can loop through the set items using a <code>for</code> loop, or ask if a specified value is present in a set, by using the <code>in</code> keyword.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thisset:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>Check if “banana” is present in the set:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;banana&quot;</span> <span class="keyword">in</span> thisset)</span><br></pre></td></tr></table></figure><h2 id="Add-Items-1"><a href="#Add-Items-1" class="headerlink" title="Add Items"></a>Add Items</h2><p>Add an item to a set, using the <code>add()</code> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">thisset.add(<span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><h2 id="Add-Sets"><a href="#Add-Sets" class="headerlink" title="Add Sets"></a>Add Sets</h2><p>To add items from another set into the current set, use the <code>update()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">tropical = &#123;<span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;mango&quot;</span>, <span class="string">&quot;papaya&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">thisset.update(tropical)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><p>The object in the <code>update()</code> method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">mylist = [<span class="string">&quot;kiwi&quot;</span>, <span class="string">&quot;orange&quot;</span>]</span><br><span class="line"></span><br><span class="line">thisset.update(mylist)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><h2 id="Remove-Item"><a href="#Remove-Item" class="headerlink" title="Remove Item"></a>Remove Item</h2><p>To remove an item in a set, use the <code>remove()</code>, or the <code>discard()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">thisset.remove(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><h1 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h1><p><strong>Dictionaries are used to store data values in key:value pairs.</strong></p><p>A dictionary is a collection which is ordered, changeable and <strong>do not allow duplicates</strong>.</p><p>Dictionary items are presented in key:value pairs, and can be referred to by using the key name.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thisdict=&#123;</span><br><span class="line">    <span class="string">&quot;brand&quot;</span>:<span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>:<span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">    <span class="string">&quot;year&quot;</span>:<span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict[<span class="string">&quot;brand&quot;</span>])</span><br><span class="line"><span class="comment"># Ford</span></span><br></pre></td></tr></table></figure><h2 id="The-dict-Constructor"><a href="#The-dict-Constructor" class="headerlink" title="The dict() Constructor"></a>The dict() Constructor</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisdict)</span><br></pre></td></tr></table></figure><h2 id="Accessing-Items"><a href="#Accessing-Items" class="headerlink" title="Accessing Items"></a>Accessing Items</h2><p>You can access the items of a dictionary by referring to its key name, inside square brackets:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisdict[<span class="string">&quot;name&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="Get-Keys"><a href="#Get-Keys" class="headerlink" title="Get Keys"></a>Get Keys</h2><p>The <code>keys()</code> method will return <strong>a list</strong> of all the keys in the dictionary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisdict.keys())</span><br><span class="line"><span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;country&#x27;])</span></span><br></pre></td></tr></table></figure><h2 id="Get-Values"><a href="#Get-Values" class="headerlink" title="Get Values"></a>Get Values</h2><p>The <code>values()</code> method will return a list of all the values in the dictionary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisdict.values())</span><br><span class="line"><span class="comment"># dict_values([&#x27;John&#x27;, 36, &#x27;Norway&#x27;])</span></span><br></pre></td></tr></table></figure><h2 id="Get-Items"><a href="#Get-Items" class="headerlink" title="Get Items"></a>Get Items</h2><p>The <code>items()</code> method will return each item in a dictionary, as tuples in a list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisdict.items())</span><br><span class="line"><span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;John&#x27;), (&#x27;age&#x27;, 36), (&#x27;country&#x27;, &#x27;Norway&#x27;)])</span></span><br></pre></td></tr></table></figure><h2 id="Change-Values"><a href="#Change-Values" class="headerlink" title="Change Values"></a>Change Values</h2><p>You can change the value of a specific item by referring to its key name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;year&quot;</span>: <span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line">thisdict[<span class="string">&quot;year&quot;</span>] = <span class="number">2018</span></span><br></pre></td></tr></table></figure><h2 id="Update-Dictionary"><a href="#Update-Dictionary" class="headerlink" title="Update Dictionary"></a>Update Dictionary</h2><p>The <code>update()</code> method will update the dictionary with the items from the given argument.</p><p>The argument must be a dictionary, or an iterable object with key:value pairs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;year&quot;</span>: <span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line">thisdict.update(&#123;<span class="string">&quot;year&quot;</span>: <span class="number">2020</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Adding-Items"><a href="#Adding-Items" class="headerlink" title="Adding Items"></a>Adding Items</h2><p>Adding an item to the dictionary is done by using a new index key and assigning a value to it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;year&quot;</span>: <span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line">thisdict[<span class="string">&quot;color&quot;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line"><span class="built_in">print</span>(thisdict)</span><br></pre></td></tr></table></figure><p>The <code>update()</code> method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;year&quot;</span>: <span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line">thisdict.update(&#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>The <code>update()</code> method will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.</p><h2 id="Removing-Items"><a href="#Removing-Items" class="headerlink" title="Removing Items"></a>Removing Items</h2><p>There are several methods to remove items from a dictionary:</p><p>The <code>pop()</code> method removes the item with the specified key name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;year&quot;</span>: <span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line">thisdict.pop(<span class="string">&quot;model&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisdict)</span><br></pre></td></tr></table></figure><p>The <code>clear()</code> method empties the dictionary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;Ford&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Mustang&quot;</span>,</span><br><span class="line">  <span class="string">&quot;year&quot;</span>: <span class="number">1964</span></span><br><span class="line">&#125;</span><br><span class="line">thisdict.clear()</span><br><span class="line"><span class="built_in">print</span>(thisdict)</span><br></pre></td></tr></table></figure><h2 id="Loop-Through-a-Dictionary"><a href="#Loop-Through-a-Dictionary" class="headerlink" title="Loop Through a Dictionary"></a>Loop Through a Dictionary</h2><p>When looping through a dictionary, the return value are the <em><strong>keys</strong></em> of the dictionary, but there are methods to return the <em>values</em> as well.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thisdict:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># age</span></span><br><span class="line"><span class="comment"># country</span></span><br></pre></td></tr></table></figure><p>You can use the <code>keys()</code> method to return the keys of a dictionary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thisdict.keys():</span><br><span class="line"> <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>Return the values</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thisdict:</span><br><span class="line">    <span class="built_in">print</span>(thisdict[x])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># John</span></span><br><span class="line"><span class="comment"># 36</span></span><br><span class="line"><span class="comment"># Norway</span></span><br></pre></td></tr></table></figure><p>You can also use the <code>values()</code> method to return values of a dictionary:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> thisdict.values():</span><br><span class="line">     <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p>Loop through both <em>keys</em> and <em>values</em>, by using the <code>items()</code> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">thisdict = <span class="built_in">dict</span>(name = <span class="string">&quot;John&quot;</span>, age = <span class="number">36</span>, country = <span class="string">&quot;Norway&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> thisdict.items():</span><br><span class="line">    <span class="built_in">print</span>(x,y)</span><br><span class="line">    </span><br><span class="line">name John</span><br><span class="line">age <span class="number">36</span></span><br><span class="line">country Norway</span><br></pre></td></tr></table></figure><h2 id="Copy-a-Dictionary"><a href="#Copy-a-Dictionary" class="headerlink" title="Copy a Dictionary"></a>Copy a Dictionary</h2><p>You cannot copy a dictionary simply by typing <code>dict2 = dict1</code>, because: <code>dict2</code> will only be a <em>reference</em> to <code>dict1</code>, and changes made in <code>dict1</code> will automatically also be made in <code>dict2</code>.</p><p>There are ways to make a copy, one way is to use the built-in Dictionary method <code>copy()</code>.</p><h1 id="If-…-Else"><a href="#If-…-Else" class="headerlink" title="If … Else"></a>If … Else</h1><h2 id="Conditions-and-If-statements"><a href="#Conditions-and-If-statements" class="headerlink" title="Conditions and If statements"></a>Conditions and If statements</h2><p>Python supports the usual logical conditions from mathematics:</p><ul><li>Equals: a &#x3D;&#x3D; b</li><li>Not Equals: a !&#x3D; b</li><li>Less than: a &lt; b</li><li>Less than or equal to: a &lt;&#x3D; b</li><li>Greater than: a &gt; b</li><li>Greater than or equal to: a &gt;&#x3D; b</li></ul><p>These conditions can be used in several ways, most commonly in “if statements” and loops.</p><h2 id="If-statements"><a href="#If-statements" class="headerlink" title="If statements"></a>If statements</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">33</span></span><br><span class="line">b = <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span> b &gt; a:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;b is greater than a&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Elif"><a href="#Elif" class="headerlink" title="Elif"></a>Elif</h2><p>The elif keyword is Python’s way of saying “if the previous conditions were not true, then try this condition”.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">33</span></span><br><span class="line">b = <span class="number">33</span></span><br><span class="line"><span class="keyword">if</span> b &gt; a:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;b is greater than a&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a == b:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;a and b are equal&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Else"><a href="#Else" class="headerlink" title="Else"></a>Else</h2><p>The else keyword catches anything which isn’t caught by the preceding conditions.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">200</span></span><br><span class="line">b = <span class="number">33</span></span><br><span class="line"><span class="keyword">if</span> b &gt; a:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;b is greater than a&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a == b:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;a and b are equal&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;a is greater than b&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="And"><a href="#And" class="headerlink" title="And"></a>And</h2><p>The and keyword is a logical operator, and is used to combine conditional statements:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">200</span></span><br><span class="line">b = <span class="number">33</span></span><br><span class="line">c = <span class="number">500</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b <span class="keyword">and</span> c &gt; a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Both conditions are True&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Or"><a href="#Or" class="headerlink" title="Or"></a>Or</h2><p>The <code>or</code> keyword is a logical operator, and is used to combine conditional statements:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">200</span></span><br><span class="line">b = <span class="number">33</span></span><br><span class="line">c = <span class="number">500</span></span><br><span class="line"><span class="keyword">if</span> a &gt; b <span class="keyword">or</span> a &gt; c:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;At least one of the conditions is True&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h2><p>The <code>not</code> keyword is a logical operator, and is used to reverse the result of the conditional statement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">33</span></span><br><span class="line">b = <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a &gt; b:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;a is NOT greater than b&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="The-pass-Statement"><a href="#The-pass-Statement" class="headerlink" title="The pass Statement"></a>The pass Statement</h2><p><code>if</code> statements cannot be empty, but if you for some reason have an <code>if</code> statement with no content, put in the <code>pass</code> statement to avoid getting an error.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">33</span></span><br><span class="line">b = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b &gt; a:</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h1><p>Python has two primitive loop commands:</p><ul><li>while loops</li><li>for loops</li></ul><h2 id="The-while-Loop"><a href="#The-while-Loop" class="headerlink" title="The while Loop"></a>The while Loop</h2><p>With the <code>while</code> loop we can execute a set of statements as long as <strong>a condition is true.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> remember to increment i, or else the loop will continue forever.</p><p>With the <code>break</code> statement we can stop the loop even if the while condition is true:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">6</span>:</span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>With the <code>continue</code> statement we can stop the current iteration, and continue with the next:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">6</span>:</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="The-For-Loops"><a href="#The-For-Loops" class="headerlink" title="The For Loops"></a>The For Loops</h2><p>A <code>for</code> loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</p><p>This is less like the <code>for</code> keyword in other programming languages, and works more like <strong>an iterator method</strong> as found in other object-orientated programming languages.</p><p>With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&quot;banana&quot;</span>:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="The-range-Function"><a href="#The-range-Function" class="headerlink" title="The range() Function"></a>The range() Function</h2><p>To loop through a set of code a specified number of times, we can use the range() function,</p><p>The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Note that range(6) is not the values of 0 to 6, but the values 0 to 5.</strong></p><p>The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">6</span>):</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, <strong>3</strong>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>A function is a block of code which only runs when it is called.</p><p>You can pass data, known as parameters, into a function.</p><p>A function can return data as a result.</p><h2 id="Creating-a-Function"><a href="#Creating-a-Function" class="headerlink" title="Creating a Function"></a>Creating a Function</h2><p>In Python a function is defined using the <code>def</code> keyword:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello from a function&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Parameters-or-Arguments"><a href="#Parameters-or-Arguments" class="headerlink" title="Parameters or Arguments?"></a>Parameters or Arguments?</h2><p>The terms <em>parameter</em> and <em>argument</em> can be used for the same thing: information that are passed into a function.</p><p>From a function’s perspective:</p><p>A parameter is the variable listed inside the parentheses in the function definition.</p><p>An argument is the value that is sent to the function when it is called.</p><br><p>Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.</p><p>The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">fname</span>):</span><br><span class="line">  <span class="built_in">print</span>(fname + <span class="string">&quot; Refsnes&quot;</span>)</span><br><span class="line"></span><br><span class="line">my_function(<span class="string">&quot;Emil&quot;</span>)</span><br><span class="line">my_function(<span class="string">&quot;Tobias&quot;</span>)</span><br><span class="line">my_function(<span class="string">&quot;Linus&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Arbitrary-Arguments-args"><a href="#Arbitrary-Arguments-args" class="headerlink" title="Arbitrary Arguments, *args"></a>Arbitrary Arguments, *args</h2><p>If you do not know how many arguments that will be passed into your function, add a <code>*</code> before the parameter name in the function definition.</p><p>This way the function will receive a <em>tuple</em> of arguments, and can access the items accordingly:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">*kids</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;The youngest child is &quot;</span> + kids[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">my_function(<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Keyword-Arguments"><a href="#Keyword-Arguments" class="headerlink" title="Keyword Arguments"></a>Keyword Arguments</h2><p>You can also send arguments with the <em>key</em> &#x3D; <em>value</em> syntax.</p><p>This way the order of the arguments does not matter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">child3, child2, child1</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;The youngest child is &quot;</span> + child3)</span><br><span class="line"></span><br><span class="line">my_function(child1 = <span class="string">&quot;Emil&quot;</span>, child2 = <span class="string">&quot;Tobias&quot;</span>, child3 = <span class="string">&quot;Linus&quot;</span>)</span><br></pre></td></tr></table></figure><p>You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">food</span>):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> food:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"></span><br><span class="line">my_function(fruits)</span><br></pre></td></tr></table></figure><h2 id="Return-Values"><a href="#Return-Values" class="headerlink" title="Return Values"></a>Return Values</h2><p>To let a function return a value, use the <code>return</code> statement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span> * x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_function(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(my_function(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(my_function(<span class="number">9</span>))</span><br></pre></td></tr></table></figure><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p><strong>The process of repeating a function, each time applying it to the result of the previous stage.</strong></p><p>Python also accepts function recursion, which means a defined function can call itself.</p><p>The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.</p><p>As a example which is a function that counts the factorial:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tri_recursion</span>(<span class="params">k</span>):</span><br><span class="line">  <span class="keyword">if</span>(k &gt; <span class="number">0</span>):</span><br><span class="line">    result = k + tri_recursion(k - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\nRecursion Example Results&quot;</span>)</span><br><span class="line">tri_recursion(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Recursion Example Results</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br><span class="line">15</span><br><span class="line">21</span><br></pre></td></tr></table></figure><p><strong>As you can see, every time the statement <code>result = k + tri_recursion(k - 1)</code> is based on the previous  result.</strong></p><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>A lambda function is a small anonymous function.</p><p>A lambda function can take <strong>any number of arguments</strong>, but can only have <strong>one expression</strong>.</p><p><code>lambda *arguments* : *expression*</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a : a + <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">5</span>))     </span><br><span class="line"><span class="comment"># We pass the value 5 to a lambda function, which then executes the expression 5+10.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a,b :a*b </span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">4</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p><strong>Note:</strong> Python does not have built-in support for Arrays, but Python Lists can be used instead.</p><h1 id="Classes-Objects"><a href="#Classes-Objects" class="headerlink" title="Classes&#x2F;Objects"></a>Classes&#x2F;Objects</h1><p>Python is an object oriented programming language.</p><p><strong>Almost everything in Python is an object, with its <code>properties</code> and <code>methods</code>.</strong></p><p>A Class is like an object constructor, or a “blueprint” for creating objects.</p><h2 id="Create-a-class"><a href="#Create-a-class" class="headerlink" title="Create a class"></a>Create a class</h2><p>Create a class named MyClass, with a property named x:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">x = <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Create-an-Object"><a href="#Create-an-Object" class="headerlink" title="Create an Object"></a>Create an Object</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1=MyClass()</span><br><span class="line"><span class="built_in">print</span>(p1.x)</span><br></pre></td></tr></table></figure><h2 id="The-init-function"><a href="#The-init-function" class="headerlink" title="The __init__() function"></a>The <code>__init__()</code> function</h2><p>The examples above are classes and objects in their simplest form, and are not really useful in real life applications.</p><p>To understand the meaning of classes we have to understand the built-in <strong>init</strong>() function.</p><p>All classes have a function called <code>__init__()</code>, <strong>which is always executed when the class is being initiated. Note: The <code>__init__()</code> function is called automatically every time the class is being used to create a new object.</strong> </p><p>Use the <code>__init__()</code> function to assign values to object properties, or other operations that are necessary to do when the object is being created:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name=name</span><br><span class="line">        <span class="variable language_">self</span>.age=age</span><br><span class="line"></span><br><span class="line">p1=Person(<span class="string">&quot;ferry&quot;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.name)</span><br><span class="line"><span class="built_in">print</span>(p1.age)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ferry</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h1 id="Object-Methods"><a href="#Object-Methods" class="headerlink" title="Object Methods"></a>Object Methods</h1><p>Objects can also contain methods. Methods in objects are functions that belong to the object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name=name</span><br><span class="line">        <span class="variable language_">self</span>.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, my name is &quot;</span>+ <span class="variable language_">self</span>.name)</span><br><span class="line">        </span><br><span class="line">p1=Person(<span class="string">&quot;ferry&quot;</span>, <span class="number">20</span>)</span><br><span class="line">p1.greeting()</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, my name is ferry</span><br></pre></td></tr></table></figure><h2 id="The-self-Parameter"><a href="#The-self-Parameter" class="headerlink" title="The self Parameter"></a>The self Parameter</h2><p>The <code>self</code> parameter is a reference to the current instance of the class, <strong>and is used to access variables that belongs to the class.</strong></p><p>It does not have to be named <code>self</code> , you can call it whatever you like, but it has to be the first parameter of any function in the class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Use the words *mysillyobject* <span class="keyword">and</span> *abc* instead of *<span class="variable language_">self</span>*:</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">mysillyobject, name, age</span>):</span><br><span class="line">  mysillyobject.name = name</span><br><span class="line">  mysillyobject.age = age</span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">abc</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello my name is &quot;</span> + abc.name)</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&quot;John&quot;</span>, <span class="number">36</span>)</span><br><span class="line">p1.myfunc()</span><br></pre></td></tr></table></figure><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Inheritance allows us to define a class that inherits all the methods and properties from another class.</p><p><strong>Parent class</strong> is the class being inherited from, also called base class.</p><p><strong>Child class</strong> is the class that inherits from another class, also called derived class.</p><h3 id="Create-a-Child-Class"><a href="#Create-a-Child-Class" class="headerlink" title="Create a Child Class"></a>Create a Child Class</h3><p>To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, fname, lname</span>):</span><br><span class="line">    <span class="variable language_">self</span>.firstname = fname</span><br><span class="line">    <span class="variable language_">self</span>.lastname = lname</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Note:</strong> Use the <code>pass</code> keyword when you do not want to add any other properties or methods to the class.</p><h3 id="super-Function"><a href="#super-Function" class="headerlink" title="super() Function"></a>super() Function</h3><p><code>super()</code> function that will make the child class inherit all the methods and properties from its parent:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, fname, lname</span>):</span><br><span class="line">  <span class="built_in">super</span>().__init__(fname, lname)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Iterator-vs-Iterable"><a href="#Iterator-vs-Iterable" class="headerlink" title="Iterator vs Iterable"></a>Iterator vs Iterable</h2><p>An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.</p><p><strong>If you have learned C language, you can take an iterator in Python as an point in C</strong></p><p>Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable <em>containers</em> which you can get an iterator from. All these objects have a <code>iter()</code> method which is used to get an iterator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mytuple = (<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>)</span><br><span class="line">myit = <span class="built_in">iter</span>(mytuple)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myit))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myit))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(myit))</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apple</span><br><span class="line">banana</span><br><span class="line">cherry</span><br></pre></td></tr></table></figure><h1 id="Try-Except"><a href="#Try-Except" class="headerlink" title="Try &amp; Except"></a>Try &amp; Except</h1><ul><li><p>The <code>try</code> block lets you test a block of code for errors.</p></li><li><p>The <code>except</code> block lets you handle the error.</p></li><li><p>The <code>finally</code> block lets you execute code, regardless of the result of the try- and except blocks.</p></li></ul><p>As an example, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;An exception occurred&quot;</span>)</span><br></pre></td></tr></table></figure><p>The try block generate the except, because the x variable is not defined. </p><p>Since the <code>try</code> block raises an error, the <code>except</code> block will be executed.</p><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An exception occurred</span><br></pre></td></tr></table></figure><p>If there have not a try block, the program will crash and raise a error.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;try_except.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    print(x)</span><br><span class="line">NameError: name &#x27;x&#x27; is not defined</span><br></pre></td></tr></table></figure><h2 id="Many-Exceptions"><a href="#Many-Exceptions" class="headerlink" title="Many Exceptions"></a>Many Exceptions</h2><p>You can define as many exceptions as you want. </p><p>And also you can execute a special except block for a special kind of error.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Variable x is not defined&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Something else went wrong&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Variable x is not defined</span><br></pre></td></tr></table></figure><h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><p>A variable is only available from inside the region it is created. This is called <strong>scope</strong>.</p><h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>Consider a module to be the same as a code library.</p><p>A file containing a set of functions you want to include in your application.</p><p>The module can contain functions, but also variables of all types (arrays, dictionaries, objects etc)</p><h2 id="Create-a-Module"><a href="#Create-a-Module" class="headerlink" title="Create a Module"></a>Create a Module</h2><p>To create a module just save the code you want in a file with the file extension <code>.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">person1 = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">36</span>,</span><br><span class="line">  <span class="string">&quot;country&quot;</span>: <span class="string">&quot;Norway&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name)</span><br></pre></td></tr></table></figure><p>Save this code in a file named <code>mymodule.py</code></p><h2 id="Use-a-Module"><a href="#Use-a-Module" class="headerlink" title="Use a Module"></a>Use a Module</h2><p>Now we can use the module we just created, by using the <code>import</code> statement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line"></span><br><span class="line">mymodule.greeting(<span class="string">&quot;Jonathan&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(myModule.person1)</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> When using a function from a module, use the syntax: <code>module_name.variable_name</code>.</p><h2 id="Re-naming-a-Module"><a href="#Re-naming-a-Module" class="headerlink" title="Re-naming a Module"></a>Re-naming a Module</h2><p>You can create an alias when you import a module, by using the <code>as</code> keyword:</p><p>Create an alias for mymodule called mx:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mymodule <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">a = mx.person1[<span class="string">&quot;age&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h2 id="dir-Function"><a href="#dir-Function" class="headerlink" title="dir() Function"></a><code>dir()</code> Function</h2><p>There is a built-in function to list all the function names (or variable names) in a module. The <code>dir()</code> function:</p><p>List all the defined names belonging to the platform module:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">dir</span>(platform)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h2 id="Import-From-Module"><a href="#Import-From-Module" class="headerlink" title="Import From Module"></a>Import From Module</h2><p>You can choose to <strong>import only parts from a module</strong>, by using the <code>from</code> keyword.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymodule <span class="keyword">import</span> person1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (person1[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure><h1 id="File-Handling"><a href="#File-Handling" class="headerlink" title="File Handling"></a>File Handling</h1><p>Python has several functions for creating, reading, updating, and deleting files.</p><h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><p>The key function for working with files in Python is the <code>open()</code> function.</p><p>The <code>open()</code> function takes two parameters; <em>filename</em>, and <em>mode</em>.</p><p>There are four different methods (modes) for opening a file:</p><p><code>&quot;r&quot;</code> - Read - Default value. Opens a file for reading, error if the file does not exist</p><p><code>&quot;a&quot;</code> - Append - Opens a file for appending, creates the file if it does not exist</p><p><code>&quot;w&quot;</code> - Write - Opens a file for writing, creates the file if it does not exist</p><p>​Using <code>&quot;w&quot;</code> you won’t be able to read the file. </p><p><code>&quot;x&quot;</code> - Create - Creates the specified file, returns an error if the file exists</p><h2 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h2><p>The <code>open()</code> function returns a file object, which has a <code>read()</code> method for reading the content of the file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demofile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure><h2 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h2><p>To write to an existing file, you must add a parameter to the <code>open()</code> function:</p><p><code>&quot;a&quot;</code> - Append - will append to the end of the file</p><p><code>&quot;w&quot;</code> - Write - will overwrite any existing content</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demofile2.txt&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;Now the file has more content!&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> the “w” method will overwrite the entire file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demofile3.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;Woops! I have deleted the content!&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h2><p>It is a good practice to always close the file when you are done with it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;demofile.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.readline())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="Delete-a-File"><a href="#Delete-a-File" class="headerlink" title="Delete a File"></a>Delete a File</h2><p>To delete a file, you must import the OS module, and run its <code>os.remove()</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&quot;demofile.txt&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="with-open"><a href="#with-open" class="headerlink" title="with open"></a>with open</h1><p>When you use <code>with</code> statement with <code>open</code> function, you do not need to close the file at the end, because <code>with</code> would automatically close it for you.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;text.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;welcome&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;text.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=f.read()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h1 id="JSON-in-Python"><a href="#JSON-in-Python" class="headerlink" title="JSON in Python"></a>JSON in Python</h1><p>Python has a built-in package called <code>json</code>, which can be used to work with JSON data.</p><p>If you have a JSON string, you can parse it by using the <code>json.loads()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># some JSON:</span></span><br><span class="line">x =  <span class="string">&#x27;&#123; &quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30, &quot;city&quot;:&quot;New York&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># parse x:</span></span><br><span class="line">y = json.loads(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the result is a Python dictionary:</span></span><br><span class="line"><span class="built_in">print</span>(y[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure><p>If you have a Python object, you can convert it into a JSON string by using the <code>json.dumps()</code> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># a Python object (dict):</span></span><br><span class="line">x = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># convert into JSON:</span></span><br><span class="line">y = json.dumps(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the result is a JSON string:</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h1 id="if-name-main"><a href="#if-name-main" class="headerlink" title="if __name__ == &quot;__main__&quot;"></a><code>if __name__ == &quot;__main__&quot;</code></h1><p>Python files are called modules and they are identified by the <code>.py</code> file extension. A module can define functions, classes, and variables.</p><p><code>__name__</code> is a model name. When a model is executed, <code>__name__</code> equal to <code>__main__</code>. When a model is not executed, <code>__name__</code> equal to its file name. </p><p>It’s boilerplate code that protects users from accidentally invoking the script when they didn’t intend to.</p><p>It allows the code in the module to be importable by other modules, without executing the code block beneath on import.</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>database</title>
      <link href="/2021/06/23/SQL/database/"/>
      <url>/2021/06/23/SQL/database/</url>
      
        <content type="html"><![CDATA[<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><h2 id="create-database"><a href="#create-database" class="headerlink" title="create database"></a>create database</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database database_name;</span><br></pre></td></tr></table></figure><h2 id="delete-database"><a href="#delete-database" class="headerlink" title="delete database"></a>delete database</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database database_name;</span><br></pre></td></tr></table></figure><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><h2 id="create-table"><a href="#create-table" class="headerlink" title="create table"></a>create table</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> table_name (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    column3 datatype,</span><br><span class="line">   ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The column parameters specify the names of the columns of the table.</p><p>The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> Persons (</span><br><span class="line">    PersonID <span class="type">int</span>,</span><br><span class="line">    LastName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">PersonID</th><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="alter-table"><a href="#alter-table" class="headerlink" title="alter table"></a>alter table</h2><p>The <code>alter table</code> statement can allows you to <code>add</code>, <code>alter column</code> and <code>drop column</code> for a table. </p><ul><li><p>add</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> column_name datatype;</span><br></pre></td></tr></table></figure></li><li><p>alter column</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> column_name datatype;</span><br></pre></td></tr></table></figure></li><li><p>drop column</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> table_name (</span><br><span class="line">    column1 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    column2 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    column3 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>As you see, the constraints are used to <strong>specify rules for the columns</strong>. </p><p>The following constraints are commonly used in SQL:</p><ul><li><p><code>NOT NULL</code> - Ensures that a column cannot have a NULL value</p></li><li><p><code>UNIQUE</code> - Ensures that all values in a column are different</p></li><li><p><code>PRIMARY KEY</code> - A combination of a <code>NOT NULL</code> and <code>UNIQUE</code>. Uniquely identifies each row in a table</p><p><strong>(However, you can have many <code>UNIQUE</code> constraints per table, but only one <code>PRIMARY KEY</code> constraint per table.)</strong></p></li><li><p><code>FOREIGN KEY</code> - Prevents actions that would destroy links between tables</p></li><li><p><code>CHECK</code> - Ensures that the values in a column satisfies a specific condition</p></li><li><p><code>DEFAULT</code> - Sets a default value for a column if no value is specified</p></li><li><p><code>CREATE INDEX</code> - Used to create and retrieve data from the database very quickly</p></li></ul><h2 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">    ID int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Age int,</span><br><span class="line">    UNIQUE (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To name a <code>UNIQUE</code> constraint, and to define a <code>UNIQUE</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">    ID int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Age int,</span><br><span class="line">    CONSTRAINT UC_Person UNIQUE (ID,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>If want to add a unique constraint on the table that already exists, use the following syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use Teach;</span><br><span class="line">alter table t</span><br><span class="line">add unique (TNO);</span><br></pre></td></tr></table></figure><br><p>To drop a unique constraint, use the following syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use Teach;</span><br><span class="line">alter table t</span><br><span class="line">drop index TNO;</span><br></pre></td></tr></table></figure><h2 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h2><p>The PRIMARY KEY contain UNIQUE values, and also can not contain NULL value. </p><p><strong>A table can have only one PRIMARY KEY, but a PRIMARY KEY can consist of multiple columns(field).</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">    ID int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Age int,</span><br><span class="line">    PRIMARY KEY (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To allow naming of a <code>PRIMARY KEY</code> constraint, and for defining a <code>PRIMARY KEY</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">    ID int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Age int,</span><br><span class="line">    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>To create a <code>PRIMARY KEY</code> constraint on the “ID” column when the table is already created, use the following SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use Teach;</span><br><span class="line">alter table s</span><br><span class="line">add primary key (SNo);</span><br></pre></td></tr></table></figure><p>To allow naming of a <code>PRIMARY KEY</code> constraint, and for defining a <code>PRIMARY KEY</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);</span><br></pre></td></tr></table></figure><p>To drop a <code>PRIMARY KEY</code> constraint, use the following SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><h2 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h2><p>The relationship between the PRIMARY KEY and FOREIGN KEY is that the FOREIGN KEY refers to the PRIMARY KEY, so that the table with foreign key is a child table, and the table with primary key is parent table. </p><p>The function of the foreign key prevent invalid data from being inserted into the foreign column. </p><p>Just like this:</p><h3 id="Persons-Table"><a href="#Persons-Table" class="headerlink" title="Persons Table"></a>Persons Table</h3><table><thead><tr><th align="left">PersonID</th><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Age</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Hansen</td><td align="left">Ola</td><td align="left">30</td></tr><tr><td align="left">2</td><td align="left">Svendson</td><td align="left">Tove</td><td align="left">23</td></tr><tr><td align="left">3</td><td align="left">Pettersen</td><td align="left">Kari</td><td align="left">20</td></tr></tbody></table><h3 id="Orders-Table"><a href="#Orders-Table" class="headerlink" title="Orders Table"></a>Orders Table</h3><table><thead><tr><th align="left">OrderID</th><th align="left">OrderNumber</th><th align="left">PersonID</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">77895</td><td align="left">3</td></tr><tr><td align="left">2</td><td align="left">44678</td><td align="left">3</td></tr><tr><td align="left">3</td><td align="left">22456</td><td align="left">2</td></tr><tr><td align="left">4</td><td align="left">24562</td><td align="left">1</td></tr></tbody></table><p><strong>MySQL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (</span><br><span class="line">    OrderID int NOT NULL,</span><br><span class="line">    OrderNumber int NOT NULL,</span><br><span class="line">    PersonID int,</span><br><span class="line">    PRIMARY KEY (OrderID),</span><br><span class="line">    FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> Orders (</span><br><span class="line">  OrderID <span class="type">int</span> <span class="keyword">NOT NULL</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  OrderNumber <span class="type">int</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  PersonID <span class="type">int</span> <span class="keyword">FOREIGN KEY</span> <span class="keyword">REFERENCES</span> Persons(PersonID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>To allow naming of a <code>FOREIGN KEY</code> constraint, and for defining a <code>FOREIGN KEY</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Orders (</span><br><span class="line">  OrderID int NOT NULL,</span><br><span class="line">  OrderNumber int NOT NULL,</span><br><span class="line">  PersonID int,</span><br><span class="line">  PRIMARY KEY (OrderID),</span><br><span class="line">  CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)</span><br><span class="line">  REFERENCES Persons(PersonID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>To create a <code>FOREIGN KEY</code> constraint on the “PersonID” column when the “Orders” table is already created, use the following SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</span><br></pre></td></tr></table></figure><p>To allow naming of a <code>FOREIGN KEY</code> constraint, and for defining a <code>FOREIGN KEY</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">ADD CONSTRAINT FK_PersonOrder</span><br><span class="line">FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);</span><br></pre></td></tr></table></figure><p>To drop a <code>FOREIGN KEY</code> constraint, use the following SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Orders</span><br><span class="line">DROP FOREIGN KEY FK_PersonOrder;</span><br></pre></td></tr></table></figure><h2 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h2><p>The <code>check</code> constraint is used to limit the value range that can be placed in the column. </p><p><strong>MySQL</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">    ID int NOT NULL,</span><br><span class="line">    LastName varchar(255) NOT NULL,</span><br><span class="line">    FirstName varchar(255),</span><br><span class="line">    Age int,</span><br><span class="line">    CHECK (Age&gt;=18)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SQL Server &#x2F; Oracle &#x2F; MS Access:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> Persons (</span><br><span class="line">  ID <span class="type">int</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">  Age <span class="type">int</span> <span class="keyword">CHECK</span> (Age<span class="operator">&gt;=</span><span class="number">18</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>To allow naming of a <code>CHECK</code> constraint, and for defining a <code>CHECK</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Persons (</span><br><span class="line">  ID int NOT NULL,</span><br><span class="line">  LastName varchar(255) NOT NULL,</span><br><span class="line">  FirstName varchar(255),</span><br><span class="line">  Age int,</span><br><span class="line">  City varchar(255),</span><br><span class="line">  CONSTRAINT CHK_Person CHECK (Age&gt;=18 AND City=&#x27;Sandnes&#x27;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><p>To create a <code>CHECK</code> constraint on the “Age” column when the table is already created, use the following SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CHECK (Age&gt;=18);</span><br></pre></td></tr></table></figure><p>To allow naming of a <code>CHECK</code> constraint, and for defining a <code>CHECK</code> constraint on multiple columns, use the following SQL syntax:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;=18 AND City=&#x27;Sandnes&#x27;);</span><br></pre></td></tr></table></figure><p>To drop a <code>CHECK</code> constraint, use the following SQL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">DROP CHECK CHK_PersonAge;</span><br></pre></td></tr></table></figure><h1 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h1><p>A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_name AS</span><br><span class="line">SELECT column1, column2, ...</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition;</span><br></pre></td></tr></table></figure><p>The following SQL creates a view that shows all customers from Brazil:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW [Brazil Customers] AS</span><br><span class="line">SELECT CustomerName, ContactName</span><br><span class="line">FROM Customers</span><br><span class="line">WHERE Country = &#x27;Brazil&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM [Brazil Customers];</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><table><thead><tr><th align="left">CustomerName</th><th align="left">ContactName</th></tr></thead><tbody><tr><td align="left">Comércio Mineiro</td><td align="left">Pedro Afonso</td></tr><tr><td align="left">Familia Arquibaldo</td><td align="left">Aria Cruz</td></tr><tr><td align="left">Gourmet Lanchonetes</td><td align="left">André Fonseca</td></tr><tr><td align="left">Hanari Carnes</td><td align="left">Mario Pontes</td></tr><tr><td align="left">Que Delícia</td><td align="left">Bernardo Batista</td></tr><tr><td align="left">Queen Cozinha</td><td align="left">Lúcia Carvalho</td></tr><tr><td align="left">Ricardo Adocicados</td><td align="left">Janete Limeira</td></tr><tr><td align="left">Tradição Hipermercados</td><td align="left">Anabela Domingues</td></tr><tr><td align="left">Wellington Importadora</td><td align="left">Paula Parente</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Statement</title>
      <link href="/2021/06/22/SQL/SQL/"/>
      <url>/2021/06/22/SQL/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>SQL stands for Structured Query Language. </p><p>SQL lets you access and manipulate database. </p><h2 id="Using-SQL-in-Your-Web-Site"><a href="#Using-SQL-in-Your-Web-Site" class="headerlink" title="Using SQL in Your Web Site"></a>Using SQL in Your Web Site</h2><p>To build a web site that shows data from a database, you will need:</p><ul><li>An RDBMS database program (i.e. MS Access, SQL Server, MySQL)</li><li>To use a server-side scripting language, like PHP or ASP</li><li>To use SQL to get the data you want</li><li>To use HTML &#x2F; CSS to style the page</li></ul><h1 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h1><p>The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.</p><p><strong>A filed</strong> is a column in table that is designed to maintain specific information about every record in the table.</p><p><strong>A record</strong> is a row that exists in the table. </p><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><p>A database most often contain one or more tables. Tables contain records (rows) with data.</p><h1 id="SQL-Statements"><a href="#SQL-Statements" class="headerlink" title="SQL Statements"></a>SQL Statements</h1><ul><li><code>SELECT</code> - extracts data from a database</li><li><code>UPDATE</code> - updates data in a database</li><li><code>DELETE</code> - deletes data from a database</li><li><code>INSERT INTO</code> - inserts new data into a database</li><li><code>CREATE DATABASE</code> - creates a new database</li><li><code>ALTER DATABASE</code> - modifies a database</li><li><code>CREATE TABLE</code> - creates a new table</li><li><code>ALTER TABLE</code> - modifies a table</li><li><code>DROP TABLE</code> - deletes a table</li><li><code>CREATE INDEX</code> - creates an index (search key)</li><li><code>DROP INDEX</code> - deletes an index</li></ul><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>The <code>select</code> allows you to select the filed(column) from the table. If you want to select all columns you should use <code>select * from table_name</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><br><p><code>select distinct</code> statement can satisfy you to list distinct(different) values of the columns, which means it delete the repetitive values. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><p>This statement add some conditions so that can extract the specify records you want. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The <code>WHERE</code> clause is not only used in <code>SELECT</code> statements, it is also used in <code>UPDATE</code>, <code>DELETE</code>, etc.!</p><h3 id="Text-Fields-vs-Numeric-Fields"><a href="#Text-Fields-vs-Numeric-Fields" class="headerlink" title="Text Fields vs. Numeric Fields"></a>Text Fields vs. Numeric Fields</h3><p>SQL requires single quotes around text values (most database systems will also allow double quotes).</p><p><strong>However, numeric fields should not be enclosed in quotes:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country<span class="operator">=</span><span class="string">&#x27;Mexico&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> CustomerID<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="Operators-in-The-WHERE-Clause"><a href="#Operators-in-The-WHERE-Clause" class="headerlink" title="Operators in The WHERE Clause"></a>Operators in The WHERE Clause</h3><ul><li><p>AND, OR, NOT</p><p>There can be contain more than one record by using  the <code>and</code> , <code>or</code> ,<code>not</code></p><ul><li><p><code>and</code></p><p>If the all the conditions separated by <code>and</code> are turn, the result is true. That means the extracted records are display by <code>where</code> if they fulfill all conditions. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> condition1 <span class="keyword">AND</span> condition2 <span class="keyword">AND</span> condition3 ...;</span><br></pre></td></tr></table></figure></li><li><p><code>or</code></p><p>If the any of the conditions separated by <code>or</code> are turn, the result is true. That means the extracted records are display by <code>where</code> if they fulfill one of the conditions. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> condition1 <span class="keyword">OR</span> condition2 <span class="keyword">OR</span> condition3 ...;</span><br></pre></td></tr></table></figure></li><li><p><code>not</code></p><p>The <code>NOT</code> operator displays a record if the condition(s) is NOT TRUE.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>The following operators can be used in the <code>WHERE</code> clause:</p><table><thead><tr><th align="left">Operator</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">Equal</td></tr><tr><td align="left">&gt;</td><td align="left">Greater than</td></tr><tr><td align="left">&lt;</td><td align="left">Less than</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">Greater than or equal</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">Less than or equal</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">Not equal. <strong>Note:</strong> In some versions of SQL this operator may be written as !&#x3D;</td></tr><tr><td align="left">BETWEEN</td><td align="left">Between a certain range</td></tr><tr><td align="left">LIKE</td><td align="left">Search for a pattern</td></tr><tr><td align="left">IN</td><td align="left">To specify multiple possible values for a column</td></tr></tbody></table></li></ul><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>The <code>LIKE</code> operator is used in a <code>WHERE</code> clause to search for a specified pattern in a column.</p><p>There are two wildcards often used in conjunction with the <code>LIKE</code> operator:</p><ul><li>The percent sign (%) represents zero, one, or multiple characters</li><li>The underscore sign (_) represents one, single character</li></ul><p><strong>Note:</strong> MS Access uses an asterisk (*) instead of the percent sign (%), and a question mark (?) instead of the underscore (_).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> columnN <span class="keyword">LIKE</span> <span class="keyword">pattern</span>;</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> CustomerName <span class="keyword">LIKE</span> <span class="string">&#x27;a%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="NOT-LIKE"><a href="#NOT-LIKE" class="headerlink" title="NOT LIKE"></a>NOT LIKE</h4><p>The following SQL statement selects all customers with a CustomerName that does NOT start with “a”:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> CustomerName <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;a%&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>The <code>IN</code> operator is a shorthand for multiple <code>OR</code> conditions. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure><h4 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Country <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;Germany&#x27;</span>, <span class="string">&#x27;France&#x27;</span>, <span class="string">&#x27;UK&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><p>The <code>BETWEEN</code> operator selects values within a given range. The values can be numbers, text, or dates.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure><h4 id="NOT-BETWEEN"><a href="#NOT-BETWEEN" class="headerlink" title="NOT BETWEEN"></a>NOT BETWEEN</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> Price <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">AND</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>The <code>IS NULL</code> operator is used to test for empty values (NULL values).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CustomerName, ContactName, Address</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>The <code>IS NOT NULL</code> operator is used to test for non-empty values (NOT NULL values).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CustomerName, ContactName, Address</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> Address <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><p>The <code>ORDER BY</code> keyword is used to sort the result-set in <strong>ascending or descending order</strong>.</p><p>The <code>ORDER BY</code> keyword sorts the records in ascending order by default. To sort the records in descending order, use the <code>DESC</code> keyword.</p><p><code>ORDER BY Country DESC;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1, column2, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><br><ul><li>ORDER BY Several Columns</li></ul><p>The following SQL statement selects all customers from the “Customers” table, sorted by the “Country” and the “CustomerName” column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Country, CustomerName;</span><br></pre></td></tr></table></figure><h2 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h2><p>There are two ways you can insert new record into a table. </p><ol><li><p>Specify both the column names and the values to be inserted:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> table_name (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure></li><li><p>If you add a whole record you needn’t specify the column name. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure></li></ol><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>The <code>UPDATE</code> statement is used to modify the existing records in a table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1 <span class="operator">=</span> value1, column2 <span class="operator">=</span> value2, ...</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>Be careful when updating records. If you omit the <code>WHERE</code> clause, ALL records will be updated!</strong></p><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><p>The <code>DELETE</code> statement is used to delete existing records in a table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p><strong>If you omit the <code>WHERE</code> clause, all records in the table will be deleted!</strong></p><h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><p>A <code>JOIN</code> clause is used to combine rows from two or more tables, based on a related column between them.</p><p><img src="https://i.imgur.com/iboSksO.gif" alt="inner join"></p><p><img src="https://i.imgur.com/QCVT6Tl.gif" alt="left join"></p><p><img src="https://i.imgur.com/aSsMfJ0.gif" alt="right join"></p><p><img src="https://i.imgur.com/aSsMfJ0.gif" alt="full join"></p><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><p>The <code>INNER JOIN</code> keyword selects records that have matching values in both tables.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure><br><p>Let’s look at a selection from the “<strong>Orders</strong>“ table:</p><table><thead><tr><th align="left">OrderID</th><th align="left">CustomerID</th><th align="left">OrderDate</th></tr></thead><tbody><tr><td align="left">10308</td><td align="left">2</td><td align="left">1996-09-18</td></tr><tr><td align="left">10309</td><td align="left">37</td><td align="left">1996-09-19</td></tr><tr><td align="left">10310</td><td align="left">77</td><td align="left">1996-09-20</td></tr></tbody></table><p>Then, look at a selection from the “<strong>Customers</strong>“ table:</p><table><thead><tr><th align="left">CustomerID</th><th align="left">CustomerName</th><th align="left">ContactName</th><th align="left">Country</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">Alfreds Futterkiste</td><td align="left">Maria Anders</td><td align="left">Germany</td></tr><tr><td align="left">2</td><td align="left">Ana Trujillo Emparedados y helados</td><td align="left">Ana Trujillo</td><td align="left">Mexico</td></tr><tr><td align="left">3</td><td align="left">Antonio Moreno Taquería</td><td align="left">Antonio Moreno</td><td align="left">Mexico</td></tr></tbody></table><p>Notice that the “CustomerID” column in the “Orders” table refers to the “CustomerID” in the “Customers” table. <strong>The relationship between the two tables above is the “CustomerID” column.</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Orders.OrderID, Customers.CustomerName, Orders.OrderDate</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Customers <span class="keyword">ON</span> Orders.CustomerID<span class="operator">=</span>Customers.CustomerID;</span><br></pre></td></tr></table></figure><p>and it will produce something like this:</p><table><thead><tr><th align="left">OrderID</th><th align="left">CustomerName</th><th align="left">OrderDate</th></tr></thead></table><h3 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h3><p>The <code>LEFT JOIN</code> keyword returns all records from the left table (table1), and the matching records from the right table (table2).</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h3><p>The <code>RIGHT JOIN</code> keyword returns all records from the right table (table2), and the matching records from the left table (table1). </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure><h3 id="FULL-JOIN"><a href="#FULL-JOIN" class="headerlink" title="FULL JOIN"></a>FULL JOIN</h3><p>The <code>FULL OUTER JOIN</code> keyword returns all records when there is <strong>a match</strong> in left (table1) or right (table2) table records.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h3 id="SELF-JOIN"><a href="#SELF-JOIN" class="headerlink" title="SELF JOIN"></a>SELF JOIN</h3><p>A self join is a regular join, but the table is <strong>joined with itself.</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1 T1, table1 T2</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line">#T1 <span class="keyword">and</span> T2 <span class="keyword">are</span> different <span class="keyword">table</span> aliases <span class="keyword">for</span> the same table.</span><br></pre></td></tr></table></figure><br><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p>The <code>GROUP BY</code> statement <strong>groups rows that have the same values into summary rows</strong>, <strong>like “find the number of customers in each country” and we group by the ‘country’</strong>. So the <code>GROUP BY</code> statement is often used with aggregate functions (<code>COUNT()</code>, <code>MAX()</code>, <code>MIN()</code>, <code>SUM()</code>, <code>AVG()</code>) to group the result-set by one or more columns.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name(s)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name(s);</span><br></pre></td></tr></table></figure><p>The following SQL statement lists the number of customers in each country:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(CustomerID), Country</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Country;</span><br></pre></td></tr></table></figure><h2 id="Having"><a href="#Having" class="headerlink" title="Having"></a>Having</h2><p>HAVING statement usually follows by the GROUP BY statement to show how many records in each group. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name(s)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE condition</span><br><span class="line">GROUP BY column_name(s)</span><br><span class="line">HAVING condition</span><br><span class="line">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure><p>The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(CustomerID), Country</span><br><span class="line">FROM Customers</span><br><span class="line">GROUP BY Country</span><br><span class="line">HAVING COUNT(CustomerID) &gt; 5;</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><h2 id="MIN"><a href="#MIN" class="headerlink" title="MIN()"></a>MIN()</h2><p>Export the smallest value of the selected column. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h2><p>Export the largest value of the selected column.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h2><p>The count function return the number of the rows of selected column. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h2><p>The <code>AVG()</code> function returns the average value of a numeric column. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h2 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h2><p>The <code>SUM()</code> function returns the total sum of a numeric column. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><h1 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h1><p>SQL aliases are used to give a table, or a column in a table, a temporary name.</p><p>An alias is created with the <code>AS</code> keyword.</p><h3 id="Alias-Column-Syntax"><a href="#Alias-Column-Syntax" class="headerlink" title="Alias Column Syntax"></a>Alias Column Syntax</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>column_name<span class="operator">*</span> <span class="keyword">AS</span> <span class="operator">*</span>alias_name<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">*</span>table_name;<span class="operator">*</span></span><br></pre></td></tr></table></figure><h3 id="Alias-Table-Syntax"><a href="#Alias-Table-Syntax" class="headerlink" title="Alias Table Syntax"></a>Alias Table Syntax</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>column_name(s)<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">*</span>table_name<span class="operator">*</span> <span class="keyword">AS</span> <span class="operator">*</span>alias_name;<span class="operator">*</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Concept</title>
      <link href="/2021/06/19/linux/Basic-Concept/"/>
      <url>/2021/06/19/linux/Basic-Concept/</url>
      
        <content type="html"><![CDATA[<h1 id="Processes-Management"><a href="#Processes-Management" class="headerlink" title="Processes Management"></a>Processes Management</h1><p>A process, in simple terms, is an instance of running program. </p><p>Whenever you issue a command in Linux, it creates or start a process. </p><h1 id="Processes-Types"><a href="#Processes-Types" class="headerlink" title="Processes Types"></a>Processes Types</h1><p>When you issue a command (a process), there are two ways you can run it. </p><ul><li><p>Foreground Process</p></li><li><p>Background Process</p><p>The simplest way to start a background process is to add an ampersand (<strong>&amp;</strong>) at the end of the command.</p></li></ul><h1 id="Checking-Running-Processes"><a href="#Checking-Running-Processes" class="headerlink" title="Checking Running Processes"></a>Checking Running Processes</h1><p>It is easy to see your own processes by using the <strong>ps</strong> command. </p><p>In addition, you can see more information of the processes by adding the <strong>-f</strong> option along with the <strong>ps</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ps -f</span><br><span class="line">UID      PID  PPID C STIME    TTY   TIME CMD</span><br><span class="line">amrood   6738 3662 0 10:23:03 pts/6 0:00 first_one</span><br><span class="line">amrood   6739 3662 0 10:22:54 pts/6 0:00 second_one</span><br><span class="line">amrood   3662 3657 0 08:10:53 pts/6 0:00 -ksh</span><br><span class="line">amrood   6892 3662 4 10:51:50 pts/6 0:00 ps -f</span><br></pre></td></tr></table></figure><p>Here is the description of all the fields displayed by <strong>ps -f</strong> command −</p><table><thead><tr><th align="center"></th><th align="center">Column &amp; Description</th></tr></thead><tbody><tr><td align="center"><strong>UID</strong></td><td align="center">User ID that this process belongs to (the person running it)</td></tr><tr><td align="center"><strong>PID</strong></td><td align="center">Process ID</td></tr><tr><td align="center"><strong>PPID</strong></td><td align="center">Parent process ID (the ID of the process that started it)</td></tr><tr><td align="center"><strong>C</strong></td><td align="center">CPU utilization of process</td></tr><tr><td align="center"><strong>STIME</strong></td><td align="center">Process start time</td></tr><tr><td align="center"><strong>TTY</strong></td><td align="center">Terminal type associated with the process</td></tr><tr><td align="center"><strong>TIME</strong></td><td align="center">CPU time taken by the process</td></tr><tr><td align="center"><strong>CMD</strong></td><td align="center">The command that started this process</td></tr></tbody></table><h1 id="Kill-Processes"><a href="#Kill-Processes" class="headerlink" title="Kill Processes"></a>Kill Processes</h1><ol><li><p>kill the foreground processes</p><p>Just by sending a <code>CTRL + c</code> keystroke, the foreground prosses exits. </p></li><li><p>kill the background processes</p><p>Firstly, you should get the PID of the background process using the <code>ps</code> command. After that, you can kill it with the <code>kill</code> command </p><p>**If the process ignores the kill, you can use <code>kill -9</code> followed by the PID. **</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>basic operations</title>
      <link href="/2021/06/18/linux/basic-operations/"/>
      <url>/2021/06/18/linux/basic-operations/</url>
      
        <content type="html"><![CDATA[<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><h2 id="Listing-File"><a href="#Listing-File" class="headerlink" title="Listing File"></a>Listing File</h2><ul><li><p><code>ls</code>- listing files in current directory</p><p><code>ls -l</code>  will help you get more information of the files</p><p>To list the invisible files, specify the <strong>-a</strong> option to <strong>ls</strong> −</p></li></ul><h2 id="Copying-Files"><a href="#Copying-Files" class="headerlink" title="Copying Files"></a>Copying Files</h2><p>To make a copy of a file use the <strong>cp</strong> command. The basic syntax of the command is −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> source_file destination_file</span></span><br></pre></td></tr></table></figure><h2 id="Renaming-Files"><a href="#Renaming-Files" class="headerlink" title="Renaming Files"></a>Renaming Files</h2><p>To change the name of a file, use the <strong>mv</strong> command. Following is the basic syntax −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> old_file new_file</span></span><br></pre></td></tr></table></figure><p>The <strong>mv</strong> command will move the existing file completely into the new file. In this case, you will find only <strong>newfile</strong> in your current directory.</p><h1 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h1><p> <code>mkdir [name]</code> create a directory</p><p><code>rmdir [name]</code> remove a directory, but it only to be useful with the empty directory. </p><p><code>rm -rf [name]</code> can remove the files or directories permanently. </p><h2 id="Changing-Directories"><a href="#Changing-Directories" class="headerlink" title="Changing Directories"></a>Changing Directories</h2><p>You can use it to change to any directory by specifying a valid absolute or relative path. The syntax is as given below −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">cd</span> <span class="built_in">dirname</span></span></span><br></pre></td></tr></table></figure><h1 id="File-Permission"><a href="#File-Permission" class="headerlink" title="File Permission"></a>File Permission</h1><p>Every file in Unix has the following attributes −</p><ul><li><strong>Owner permissions</strong> − The owner’s permissions determine what actions the owner of the file can perform on the file.</li><li><strong>Group permissions</strong> − The group’s permissions determine what actions a user, who is a member of the group that a file belongs to, can perform on the file.</li><li><strong>Other (world) permissions</strong> − The permissions for others indicate what action all other users can perform on the file.</li></ul><p>The permissions are broken into groups of threes, and each position in the group denotes a specific permission, <strong>in this order: read (r), write (w), execute (x) −</strong></p><ul><li>The first three characters (2-4) represent the permissions for the file’s owner. For example, <strong>-rwxr-xr–</strong> represents that the owner has read (r), write (w) and execute (x) permission.</li><li>The second group of three characters (5-7) consists of the permissions for the group to which the file belongs. For example, <strong>-rwxr-xr–</strong> represents that the group has read (r) and execute (x) permission, but no write permission.</li><li>The last group of three characters (8-10) represents the permissions for everyone else. For example, <strong>-rwxr-xr–</strong> represents that there is <strong>read (r)</strong> only permission.</li></ul><p>When we use <code>ls -l</code> command, the permission information will be shown. </p><p><img src="https://i.imgur.com/uSwxH68.png"></p><p>The first character represent what type it is. </p><p><code>-</code> represents a file</p><p><code>d</code> represents a directory</p><h2 id="Change-Permission"><a href="#Change-Permission" class="headerlink" title="Change Permission"></a>Change Permission</h2><p>We have two modes to change the permission of files. </p><h3 id="Symbolic-Mode"><a href="#Symbolic-Mode" class="headerlink" title="Symbolic Mode"></a>Symbolic Mode</h3><p><code>a</code> -&gt;all（user，group，other）<br><code>u</code> -&gt;user<br><code>g</code> -&gt;group<br><code>o</code> -&gt;other</p><table><thead><tr><th align="center"></th><th align="center">Chmod operator &amp; Description</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">Adds the designated permission(s) to a file or directory.</td></tr><tr><td align="center">-</td><td align="center">Removes the designated permission(s) from a file or directory.</td></tr><tr><td align="center">&#x3D;</td><td align="center">Sets the designated permission(s).</td></tr></tbody></table><p><strong>Example</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">chmod</span> o+wx testfile</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">ls</span> -l testfile</span></span><br><span class="line">-rwxrwxrwx  1 amrood   users 1024  Nov 2 00:10  testfile</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">chmod</span> u-x testfile</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">ls</span> -l testfile</span></span><br><span class="line">-rw-rwxrwx  1 amrood   users 1024  Nov 2 00:10  testfile</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">chmod</span> g = rx testfile</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">ls</span> -l testfile</span></span><br><span class="line">-rw-r-xrwx  1 amrood   users 1024  Nov 2 00:10  testfile</span><br></pre></td></tr></table></figure><h3 id="Absolute-Permissions"><a href="#Absolute-Permissions" class="headerlink" title="Absolute Permissions"></a>Absolute Permissions</h3><p>The second way to modify permissions with the chmod command is to use a number to specify each set of permissions for the file.</p><p>Each permission is assigned a value, as the following table shows, and the total of each set of permissions provides a number for that set.</p><table><thead><tr><th align="center">Number</th><th align="center">Octal Permission Representation</th><th align="center">Ref</th></tr></thead><tbody><tr><td align="center"><strong>0</strong></td><td align="center">No permission</td><td align="center">—</td></tr><tr><td align="center"><strong>1</strong></td><td align="center">Execute permission</td><td align="center">–x</td></tr><tr><td align="center"><strong>2</strong></td><td align="center">Write permission</td><td align="center">-w-</td></tr><tr><td align="center"><strong>3</strong></td><td align="center">Execute and write permission: 1 (execute) + 2 (write) &#x3D; 3</td><td align="center">-wx</td></tr><tr><td align="center"><strong>4</strong></td><td align="center">Read permission</td><td align="center">r–</td></tr><tr><td align="center"><strong>5</strong></td><td align="center">Read and execute permission: 4 (read) + 1 (execute) &#x3D; 5</td><td align="center">r-x</td></tr><tr><td align="center"><strong>6</strong></td><td align="center">Read and write permission: 4 (read) + 2 (write) &#x3D; 6</td><td align="center">rw-</td></tr><tr><td align="center"><strong>7</strong></td><td align="center">All permissions: 4 (read) + 2 (write) + 1 (execute) &#x3D; 7</td><td align="center">rwx</td></tr></tbody></table><p>Here’s an example using the testfile. Running <strong>ls -1</strong> on the testfile shows that the file’s permissions are as follows −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ls -l testfile</span><br><span class="line">-rwxrwxr--  1 amrood   users 1024  Nov 2 00:10  testfile</span><br></pre></td></tr></table></figure><p>Then each example <strong>chmod</strong> command from the preceding table is run on the testfile, followed by <strong>ls –l</strong>, so you can see the permission changes −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 testfile</span><br><span class="line">$ls -l testfile</span><br><span class="line">-rwxr-xr-x  1 amrood   users 1024  Nov 2 00:10  testfile</span><br><span class="line">$chmod 743 testfile</span><br><span class="line">$ls -l testfile</span><br><span class="line">-rwxr---wx  1 amrood   users 1024  Nov 2 00:10  testfile</span><br><span class="line">$chmod 043 testfile</span><br><span class="line">$ls -l testfile</span><br><span class="line">----r---wx  1 amrood   users 1024  Nov 2 00:10  testfile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell &amp; Shell scripts</title>
      <link href="/2021/06/17/linux/shell/"/>
      <url>/2021/06/17/linux/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Users communicate with the kernel through a program known as the <strong>shell</strong>. </p><p>The shell is a command line interpreter; it translates commands entered by the user and converts them into a language that is understood by the kernel.</p><p><strong>Shell</strong> is an environment in which we can run our commands, programs, and shell scripts. A shell provides an interface to your Linux System. It gathers your inputs and executes programs based on that input. </p><p>The shell is, after all, a real programming language, complete with variables, control structures, and so forth.</p><h1 id="Shell-Scripts"><a href="#Shell-Scripts" class="headerlink" title="Shell Scripts"></a>Shell Scripts</h1><p>The basic concept of a shell script is a list of commands, which are listed in the order of execution. A good shell script will have comments, preceded by # sign, describing the steps.</p><ol><li><p>Create</p><p>The <code>.sh</code> file is start by using <code>#! /bin/sh</code> , which alert the system that shell scripts are as follows.</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo -e &quot;Hello World! \a \n&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ol start="2"><li>Comments</li></ol><p>We can add some comments by using <code>#</code> in the begin of a line.</p><ol start="3"><li><p>Execute</p><p>Make the script executable and execute it. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh ;./test.sh</span><br></pre></td></tr></table></figure></li></ol><p><strong>Example</strong></p><p>The following script uses the <strong>read</strong> command which takes the input from the keyboard and assigns it as the value of the variable PERSON and finally prints it on STDOUT.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;What is your name?&quot;</span><br><span class="line">read PERSON</span><br><span class="line">echo &quot;Hello, $PERSON&quot;</span><br></pre></td></tr></table></figure><p>Here is a sample run of the script −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$./test.sh</span><br><span class="line">What is your name?</span><br><span class="line">Zara Ali</span><br><span class="line">Hello, Zara Ali</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="The-execution-sequence-of-commands"><a href="#The-execution-sequence-of-commands" class="headerlink" title="The execution sequence of commands"></a>The execution sequence of commands</h2><ul><li><p><code>;</code></p><p>The commands can be combined in a line by using the <code>;</code> to sperate them.</p><p>**It is noticeable that the commands will be executed from left to right and the fail of the previous commands don’t prevent the later ones. **</p></li><li><p><code>&amp;&amp;</code></p><p>This operator just like the previous one but <strong>the obvious difference is that if the previous commands don’t be executed successfully, the later commands won’t be executed.</strong> </p></li><li><p><code>||</code></p><p>**ONLY the fail of the previous command can the later ones be executed. **</p></li></ul><h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><p>Variable is nothing more than a pointer to the actual value. </p><h2 id="Defining-Variables"><a href="#Defining-Variables" class="headerlink" title="Defining Variables"></a>Defining Variables</h2><p><font color="red">Remember that there are not spaces between the ‘&#x3D;’. <font></font></font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable_name=variable_value</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">erro:</span><br><span class="line">name = ferry</span><br><span class="line">name= ferry chan</span><br><span class="line">correct:</span><br><span class="line">name=ferry</span><br><span class="line">name=&quot;ferry chan&quot;</span><br></pre></td></tr></table></figure><ul><li><p>The default type of variable is string type. If you want to perform arithmetic operations, you should declare the type of variables using the <code>declare</code> command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare [-aAfFgilnrtux] [-p] [name[=value] ...]</span><br><span class="line"></span><br><span class="line">Options which set attributes:</span><br><span class="line">    -ato make NAMEs indexed arrays (if supported)</span><br><span class="line">    -ito make NAMEs have the `integer&#x27; attribute</span><br><span class="line">    -xto make NAMEs export</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sum</span>=10+10</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$sum</span></span></span><br><span class="line">10+10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sum</span>=$((<span class="number">10</span>+<span class="number">10</span>))</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$sum</span></span></span><br><span class="line">20</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">declare</span> -i <span class="built_in">sum</span>=10+10</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="built_in">sum</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Accessing-Values"><a href="#Accessing-Values" class="headerlink" title="Accessing Values"></a>Accessing Values</h2><p>To access the value stored in a variable, prefix its name with the dollar sign (<strong>$</strong>) </p><h2 id="Unsetting-Variables"><a href="#Unsetting-Variables" class="headerlink" title="Unsetting Variables"></a>Unsetting Variables</h2><p>Following is the syntax to unset a defined variable using the <strong>unset</strong> command −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure><h2 id="Special-Variable"><a href="#Special-Variable" class="headerlink" title="Special Variable"></a>Special Variable</h2><table><thead><tr><th align="center">Sr.No.</th><th align="center">Variable &amp; Description</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>$0</strong>The filename of the current script.</td></tr><tr><td align="center">2</td><td align="center"><strong>$n</strong>These variables correspond to the arguments with which a script was invoked. Here <strong>n</strong> is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).</td></tr><tr><td align="center">3</td><td align="center">**$#**The number of arguments supplied to a script.</td></tr><tr><td align="center">4</td><td align="center">**$**<em>All the arguments are double quoted. If a script receives two arguments, $</em> is equivalent to $1 $2.</td></tr><tr><td align="center">5</td><td align="center">**$@**All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.</td></tr><tr><td align="center">6</td><td align="center">**$?**The exit status of the last command executed.</td></tr><tr><td align="center">7</td><td align="center">**$$**The process number of the current shell. For shell scripts, this is the process ID under which they are executing.</td></tr><tr><td align="center">8</td><td align="center">**$!**The process number of the last background command.</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;The script name is        ==&gt; $&#123;0&#125;&quot;</span><br><span class="line">echo &quot;Total parameter number is         ==&gt;$#&quot;</span><br><span class="line">echo &quot;Your whole parameter is           ==&gt;&#x27;$@&#x27;&quot;</span><br><span class="line">echo &quot;The 1st parameter         ==&gt;$&#123;1&#125;&quot;</span><br><span class="line">echo &quot;The second parameter      ==&gt;$&#123;2&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The script name is==&gt; ./how_paras.sh</span><br><span class="line">Total parameter number is==&gt;3</span><br><span class="line">Your whole parameter is ==&gt;&#x27;a b c&#x27;</span><br><span class="line">The 1st parameter==&gt;a</span><br><span class="line">The second parameter ==&gt;b</span><br></pre></td></tr></table></figure><h3 id="Exit-Status"><a href="#Exit-Status" class="headerlink" title="Exit Status"></a>Exit Status</h3><p>The <strong>$?</strong> variable represents the exit status of the previous command.</p><p>Exit status is a numerical value returned by every command upon its completion. As a rule, most commands return an exit status of 0 if they were successful, and 1 if they were unsuccessful.</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">NAME[0]=&quot;Zara&quot;</span><br><span class="line">NAME[1]=&quot;Qadir&quot;</span><br><span class="line">NAME[2]=&quot;Mahnaz&quot;</span><br><span class="line">NAME[3]=&quot;Ayan&quot;</span><br><span class="line">NAME[4]=&quot;Daisy&quot;</span><br><span class="line">echo &quot;First Method: $&#123;NAME[*]&#125;&quot;</span><br><span class="line">echo &quot;Second Method: $&#123;NAME[@]&#125;&quot;</span><br></pre></td></tr></table></figure><h1 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><ul><li><p><code>$((expression))</code></p><p>We usually use it to calculate and return the result. </p><figure class="highlight shell"><figcaption><span>factorial</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Enter the value of n, I will calculate the factorial of n:&quot; n</span><br><span class="line">s=$n</span><br><span class="line">while [ $n -gt 1 ]</span><br><span class="line">do</span><br><span class="line">n=$((n-1))</span><br><span class="line">s=$(($s*$n))</span><br><span class="line">done</span><br><span class="line">echo -e &quot;The factorial is $s&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>expr</code> or <code>awk</code></p><p>Bourne shell didn’t originally have any mechanism to perform simple arithmetic operations but it uses external programs, either <strong>awk</strong> or <strong>expr</strong>.</p><p>The following example shows how to add two numbers −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo &quot;Total value : $val&quot;</span><br></pre></td></tr></table></figure><p><font color="red">It is noticeable that the <code>$()</code> and two &#96; can output the information of the executed command. <font>  </font></font></p><p>The above script will generate the following result −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Total value : 4</span><br></pre></td></tr></table></figure><p>The following points need to be considered while adding −</p><ul><li>There must be spaces between operators and expressions. For example, 2+2 is not correct; it should be written as 2 + 2.</li><li>The complete expression should be enclosed between <strong>&#96;&#96;</strong>, called the backtick.</li></ul></li></ul><h2 id="Quoting"><a href="#Quoting" class="headerlink" title="Quoting"></a>Quoting</h2><ol><li><p>double quoting</p><p>The double quote ( “quote” ) protects everything enclosed between two double quote marks except $, ‘, “ and .</p><p>(Use the double quotes when you want only <strong>variables and command substitution</strong>.)</p></li><li><p>The single quote</p><p>The single quote ( ‘quote’ ) protects everything enclosed between two single quote marks. It is used to <strong>turn off the special meaning</strong> of all characters.</p></li></ol><h1 id><a href="#" class="headerlink" title="[]"></a>[]</h1><p>It is very important to understand that <strong>all the conditional expressions should be placed inside square braces with spaces around them.</strong> For example, <strong>[ $a -le $b ]</strong> is correct whereas, <strong>[$a -le $b]</strong> is incorrect.</p><p>In addition, there are two spaces around the operator. </p><h2 id="Arithmetic-Operators"><a href="#Arithmetic-Operators" class="headerlink" title="Arithmetic Operators"></a>Arithmetic Operators</h2><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">+ (Addition)</td><td align="center">Adds values on either side of the operator</td><td align="center"><code>expr $a + $b</code> will give 30</td></tr><tr><td align="center">- (Subtraction)</td><td align="center">Subtracts right hand operand from left hand operand</td><td align="center"><code>expr $a - $b</code> will give -10</td></tr><tr><td align="center">* (Multiplication)</td><td align="center">Multiplies values on either side of the operator</td><td align="center"><code>expr $a \* $b</code> will give 200</td></tr><tr><td align="center">&#x2F; (Division)</td><td align="center">Divides left hand operand by right hand operand</td><td align="center"><code>expr $b / $a</code> will give 2</td></tr><tr><td align="center">% (Modulus)</td><td align="center">Divides left hand operand by right hand operand and returns remainder</td><td align="center"><code>expr $b % $a</code> will give 0</td></tr><tr><td align="center">&#x3D; (Assignment)</td><td align="center">Assigns right operand in left operand</td><td align="center">a &#x3D; $b would assign value of b into a</td></tr><tr><td align="center">&#x3D;&#x3D; (Equality)</td><td align="center">Compares two numbers, if both are same then returns true.</td><td align="center">[ $a &#x3D;&#x3D; $b ] would return false.</td></tr><tr><td align="center">!&#x3D; (Not Equality)</td><td align="center">Compares two numbers, if both are different then returns true.</td><td align="center">[ $a !&#x3D; $b ] would return true.</td></tr></tbody></table><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><p>Assume variable <strong>a</strong> holds 10 and variable <strong>b</strong> holds 20 then −</p><table><thead><tr><th align="center">Operator</th><th align="center">Description</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center"><strong>-eq</strong>(equal)</td><td align="center">Checks if the value of two operands are equal or not; if yes, then the condition becomes true.</td><td align="center">[ $a -eq $b ] is not true.</td></tr><tr><td align="center"><strong>-ne</strong>(not equal)</td><td align="center">Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true.</td><td align="center">[ $a -ne $b ] is true.</td></tr><tr><td align="center"><strong>-gt</strong>(greater than)</td><td align="center">Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true.</td><td align="center">[ $a -gt $b ] is not true.</td></tr><tr><td align="center"><strong>-lt</strong>(less than)</td><td align="center">Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true.</td><td align="center">[ $a -lt $b ] is true.</td></tr><tr><td align="center"><strong>-ge</strong>(greater or equal)</td><td align="center">Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true.</td><td align="center">[ $a -ge $b ] is not true.</td></tr><tr><td align="center"><strong>-le</strong>(less or equal)</td><td align="center">Checks if the value of left operand is less than or equal to the value of right operand; if yes, then the condition becomes true.</td><td align="center">[ $a -le $b ] is true.</td></tr></tbody></table><h1 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h1><p>Unix Shell supports conditional statements which are used to perform different actions based on different conditions.</p><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if [ expression 1 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 1 is true</span><br><span class="line">elif [ expression 2 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 2 is true</span><br><span class="line">elif [ expression 3 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 3 is true</span><br><span class="line">else</span><br><span class="line">   Statement(s) to be executed if no expression is true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a is equal to b&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a is greater than b&quot;</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a is less than b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;None of the condition met&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h1><h2 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while [ condition ]</span><br><span class="line">do</span><br><span class="line">   command1</span><br><span class="line">   command2</span><br><span class="line">   command3</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (( EXP1; EXP2; EXP3 ))</span><br><span class="line">do</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">command3</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for VARIABLE in 1 2 3 4 5 .. N</span><br><span class="line">do</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line">while [ &quot;$a&quot; -lt 10 ]    # this is loop1</span><br><span class="line">do</span><br><span class="line">   b=&quot;$a&quot;</span><br><span class="line">   while [ &quot;$b&quot; -ge 0 ]  # this is loop2</span><br><span class="line">   do</span><br><span class="line">      echo -n &quot;$b &quot;</span><br><span class="line">      b=`expr $b - 1`</span><br><span class="line">   done</span><br><span class="line">   echo</span><br><span class="line">   a=`expr $a + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1 0</span><br><span class="line">2 1 0</span><br><span class="line">3 2 1 0</span><br><span class="line">4 3 2 1 0</span><br><span class="line">5 4 3 2 1 0</span><br><span class="line">6 5 4 3 2 1 0</span><br><span class="line">7 6 5 4 3 2 1 0</span><br><span class="line">8 7 6 5 4 3 2 1 0</span><br><span class="line">9 8 7 6 5 4 3 2 1 0</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong></p><ol><li>It is important to note how <strong>echo -n</strong> works here. Here <strong>-n</strong> option lets echo avoid printing a new line character.</li><li>Among the <code>[]</code>, we use a condition statement with <strong>two spaces between it</strong>. <code>[ condition ]</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for((i=1;i&lt;=9;i++))</span><br><span class="line">do</span><br><span class="line">for((j=1;j&lt;=i;j++))</span><br><span class="line">do</span><br><span class="line">echo -n &quot;$i*$j=$(($i*$j)) &quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1*1=1</span><br><span class="line">2*1=2 2*2=4</span><br><span class="line">3*1=3 3*2=6 3*3=9</span><br><span class="line">4*1=4 4*2=8 4*3=12 4*4=16</span><br><span class="line">5*1=5 5*2=10 5*3=15 5*4=20 5*5=25</span><br><span class="line">6*1=6 6*2=12 6*3=18 6*4=24 6*5=30 6*6=36</span><br><span class="line">7*1=7 7*2=14 7*3=21 7*4=28 7*5=35 7*6=42 7*7=49</span><br><span class="line">8*1=8 8*2=16 8*3=24 8*4=32 8*5=40 8*6=48 8*7=56 8*8=64</span><br><span class="line">9*1=9 9*2=18 9*3=27 9*4=36 9*5=45 9*6=54 9*7=63 9*8=72 9*9=81</span><br></pre></td></tr></table></figure><h1 id="Substitution"><a href="#Substitution" class="headerlink" title="Substitution"></a>Substitution</h1><p>The <strong>-e</strong> option enables the interpretation of backslash escapes. </p><p>The printing value of the variable is substituted by its value. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">echo -e &quot;Value of a is $a \n&quot;</span><br></pre></td></tr></table></figure><h2 id="Command-Substitution"><a href="#Command-Substitution" class="headerlink" title="Command Substitution"></a>Command Substitution</h2><p>Command substitution is the mechanism by which the shell performs a given set of commands and then substitutes their output in the place of the commands.</p><h3 id="Syntax-2"><a href="#Syntax-2" class="headerlink" title="Syntax"></a>Syntax</h3><p>The command substitution is performed when a command is given as −</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`command`</span><br></pre></td></tr></table></figure><p><strong>Example</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">DATE=`date`</span><br><span class="line">echo &quot;Date is $DATE&quot;</span><br></pre></td></tr></table></figure><p>Upon execution, you will receive the following result −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date is Thu Jul  2 03:59:57 MST 2009</span><br></pre></td></tr></table></figure><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Define your <span class="keyword">function</span> here</span></span><br><span class="line">Hello () &#123;</span><br><span class="line">   echo &quot;Hello World&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Invoke your <span class="keyword">function</span></span></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>Upon execution, you will receive the following output −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure><h2 id="Pass-Parameters-to-a-Function"><a href="#Pass-Parameters-to-a-Function" class="headerlink" title="Pass Parameters to a Function"></a>Pass Parameters to a Function</h2><p>You can define a function that will accept parameters while calling the function. These parameters would be represented by <strong>$1</strong>, <strong>$2</strong> and so on.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Define your <span class="keyword">function</span> here</span></span><br><span class="line">Hello () &#123;</span><br><span class="line">   echo &quot;Hello World $1 $2&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Invoke your <span class="keyword">function</span></span></span><br><span class="line">Hello Zara Ali</span><br></pre></td></tr></table></figure><p>Upon execution, you will receive the following result −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Zara Ali</span><br></pre></td></tr></table></figure><h2 id="Returning-Values-from-Functions"><a href="#Returning-Values-from-Functions" class="headerlink" title="Returning Values from Functions"></a>Returning Values from Functions</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Define your <span class="keyword">function</span> here</span></span><br><span class="line">Hello () &#123;</span><br><span class="line">   echo &quot;Hello World $1 $2&quot;</span><br><span class="line">   return 10</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Invoke your <span class="keyword">function</span></span></span><br><span class="line">Hello Zara Ali</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Capture value returnd by last <span class="built_in">command</span></span></span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;Return value is $ret&quot;</span><br></pre></td></tr></table></figure><p>Upon execution, you will receive the following result −</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World Zara Ali</span><br><span class="line">Return value is 10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2021/05/03/JavaScript/JavaScript/"/>
      <url>/2021/05/03/JavaScript/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>JavaScript can change HTML content. </p><p>Firstly, we have to get the element, one of many JavaScript HTML method is <code>getElementById()</code></p><p>The  example below get the element id&#x3D;”demo”, and changes the element content to “Hello JavaScript!”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>JavaScript can change HTML content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&#x27;document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;&#x27;</span>&gt;</span>Click Me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript also can change HTML Attribute Values, HTML Styles (CSS)…</p><h2 id="JavaScript-Keywords"><a href="#JavaScript-Keywords" class="headerlink" title="JavaScript Keywords"></a>JavaScript Keywords</h2><table><thead><tr><th align="left">Keyword</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">var</td><td align="left">Declares a variable</td></tr><tr><td align="left">let</td><td align="left">Declares a block variable</td></tr><tr><td align="left">const</td><td align="left">Declares a block constant</td></tr><tr><td align="left">if</td><td align="left">Marks a block of statements to be executed on a condition</td></tr><tr><td align="left">switch</td><td align="left">Marks a block of statements to be executed in different cases</td></tr><tr><td align="left">for</td><td align="left">Marks a block of statements to be executed in a loop</td></tr><tr><td align="left">function</td><td align="left">Declares a function</td></tr><tr><td align="left">return</td><td align="left">Exits a function</td></tr><tr><td align="left">try</td><td align="left">Implements error handling to a block of statements</td></tr></tbody></table><h1 id="JavaScript-Where-To"><a href="#JavaScript-Where-To" class="headerlink" title="JavaScript Where To"></a>JavaScript Where To</h1><p>In HTML, JavaScript code is inserted between <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code> tags.</p><p>JavaScript function can be called when an <strong>event</strong> occurs, like when the user clicks a button.</p><p><strong>Scripts can be placed in the <code>&lt;body&gt;</code>, or in the <code>&lt;head&gt;</code> section of an HTML page, or in both.</strong></p><h2 id="JavaScript-file"><a href="#JavaScript-file" class="headerlink" title="JavaScript file"></a>JavaScript file</h2><p>Scripts can also be placed in external files:</p><p>JavaScript files have the  files extension <code>.js</code></p><p><strong>To use the external JS file, we should put the JS file name in the <code>scr</code> attribute of  the <code>&lt;script&gt;</code> tag</strong></p><p>The script will behave as if it was located exactly where the <code>&lt;script&gt;</code> tag is located.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myScript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>html file</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JavaScript in Head<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>A paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>Try it!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myJs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>JS file</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Paragraph changed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-Output"><a href="#JavaScript-Output" class="headerlink" title="JavaScript Output"></a>JavaScript Output</h1><p>JavaScript can “display” data in different ways:</p><ul><li><p>Writing into an HTML element, using <code>innerHTML</code>.</p></li><li><p>Writing into the HTML output using <code>document.write()</code>.</p></li><li><p>Writing into an alert box, using <code>window.alert()</code>. </p><p>(window object is the global scope object, that means that variables, properties by default belong the window object. This also means that specifying the window keyword is optional. )</p></li><li><p>Writing into the browser console, using <code>console.log()</code>.</p></li></ul><h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><p>JavaScript variables are containers for storing data values.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span>x=<span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> y=<span class="number">6</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> z=x+y;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>= z;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript variables can hold numbers like 100 and text values like “John Doe”.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> first_name =<span class="string">&quot;Ferry&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> last_name=<span class="string">&quot;Chan&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;My name is &quot;</span>+first_name+last_name;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-Data-Types"><a href="#JavaScript-Data-Types" class="headerlink" title="JavaScript Data Types"></a>JavaScript Data Types</h1><p>JavaScript has 8 Datatypes</p><p>\1. String<br>\2. Number<br>\3. Bigint<br>\4. Boolean<br>\5. Undefined<br>\6. Null<br>\7. Symbol<br>\8. Object</p><p>The Object Datatype</p><p>The object data type can contain:</p><p>\1. An object(JavaScript objects are written with curly braces <code>&#123;&#125;</code>.)</p><p><code>const person = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;&#125;;</code></p><p>\2. An array(JavaScript arrays are written with square brackets.)</p><p><code>const cars = [&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;];</code></p><p>\3. A date</p><p>JavaScript has dynamic types. This means that the same variable can be used to hold different data types:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Numbers:</span></span><br><span class="line"><span class="keyword">let</span> length = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">let</span> weight = <span class="number">7.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Strings:</span></span><br><span class="line"><span class="keyword">let</span> color = <span class="string">&quot;Yellow&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&quot;Johnson&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Booleans</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object:</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array object:</span></span><br><span class="line"><span class="keyword">const</span> cars = [<span class="string">&quot;Saab&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Date object:</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2022-03-25&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>A JS function is a block of code designed to perform a particular task, which is executed when something invokes it. </p><p><strong>JavaScript function can be invoked on anywhere or be invoked when a event occur.</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;test()&quot;</span>&gt;</span>click me to invoketest()<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;test() was invoked&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;Hello&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">f</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p><strong>Objects are variables too. But objects can contain many values.</strong></p><p>In real life, a car is an <strong>object</strong>.</p><p>A car has <strong>properties</strong> like weight and color, and <strong>methods</strong> like start and stop</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="string">&quot;Fiat&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> car = &#123;<span class="attr">type</span>:<span class="string">&quot;Fiat&quot;</span>, <span class="attr">model</span>:<span class="string">&quot;500&quot;</span>, <span class="attr">color</span>:<span class="string">&quot;white&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="Object-Properties"><a href="#Object-Properties" class="headerlink" title="Object Properties"></a>Object Properties</h2><p>The <strong>name:values</strong> pairs in JavaScript objects are called <strong>properties</strong>:</p><p>You can access object properties in two ways:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objectName.<span class="property">propertyName</span></span><br><span class="line">objectName[<span class="string">&quot;propertyName&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="Object-Methods"><a href="#Object-Methods" class="headerlink" title="Object Methods"></a>Object Methods</h2><p>Methods are stored in properties as <strong>function definitions</strong>.</p><table><thead><tr><th align="left">Property</th><th align="left">Property Value</th></tr></thead><tbody><tr><td align="left">firstName</td><td align="left">John</td></tr><tr><td align="left">lastName</td><td align="left">Doe</td></tr><tr><td align="left">age</td><td align="left">50</td></tr><tr><td align="left">eyeColor</td><td align="left">blue</td></tr><tr><td align="left">fullName</td><td align="left">function() {return this.firstName + “ “ + this.lastName;}</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">  lastName : <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">  id       : <span class="number">5566</span>,</span><br><span class="line">  fullName : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="JS-Events"><a href="#JS-Events" class="headerlink" title="JS Events"></a>JS Events</h1><p>An HTML event can be something the browser does, or something a user does.</p><p>Here are some examples of HTML events:</p><ul><li>An HTML web page has finished loading</li><li>An HTML input field was changed</li><li>An HTML button was clicked</li></ul><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON is a format for storing and transporting data.</p><p>JSON is often used when data is sent from a server to a web page.</p><h2 id="What-is-JSON"><a href="#What-is-JSON" class="headerlink" title="What is JSON?"></a>What is JSON?</h2><ul><li>JSON stands for <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation</li><li>JSON is a lightweight data interchange format</li><li>JSON is language <strong>independent</strong></li><li>JSON is “self-describing” and easy to understand</li></ul><p>* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. <strong>Code for reading and generating JSON data can be written in any programming language.</strong></p><h2 id="JSON-Syntax-Rules"><a href="#JSON-Syntax-Rules" class="headerlink" title="JSON Syntax Rules"></a>JSON Syntax Rules</h2><ul><li>Data is in name&#x2F;value pairs</li><li>Data is separated by commas</li><li>Curly braces hold objects</li><li>Square brackets hold arrays</li></ul><h2 id="JSON-Example"><a href="#JSON-Example" class="headerlink" title="JSON Example"></a>JSON Example</h2><p>This JSON syntax defines an employees object: an array of 3 employee records (objects):</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;employees&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="string">&quot;John&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Doe&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anna&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Smith&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Peter&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Jones&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>In the example above, the object “employees” is an array. It contains three objects.</p><p>Each object is a record of a person (with a first name and a last name).</p><h1 id="JavaScript-Debugging"><a href="#JavaScript-Debugging" class="headerlink" title="JavaScript Debugging"></a>JavaScript Debugging</h1><p>Normally, you activate debugging in your browser with the F12 key, and select “Console” in the debugger menu.</p><p>If your browser supports debugging, you can use <code>console.log()</code> to display JavaScript values in the debugger window:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">a = <span class="number">5</span>;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line">c = a + b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM(Document Object Model)"></a>DOM(Document Object Model)</h1><p>When a web page is loaded, the browser creates a <strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel of the page.</p><p>The document object represent a page. </p><p>With the object model, JavaScript gets all the power it needs to create dynamic HTML. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;Hello World!&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the example above, we use the method, <code>getElementById(&quot;&quot;)</code>, to get the element “demo”, and exert the <code>innerHTML</code> property to acquire the content of the “demo” element. Eventually, the content was changed to “Hello World”</p><h2 id="Finding-HTML-Elements"><a href="#Finding-HTML-Elements" class="headerlink" title="Finding HTML Elements"></a>Finding HTML Elements</h2><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">document.getElementById(<em>id</em>)</td><td align="left">Find an element by element id</td></tr><tr><td align="left">document.getElementsByTagName(<em>name</em>)</td><td align="left">Find elements by tag name</td></tr><tr><td align="left">document.getElementsByClassName(<em>name</em>)</td><td align="left">Find elements by class name</td></tr></tbody></table><hr><h2 id="Changing-HTML-Elements"><a href="#Changing-HTML-Elements" class="headerlink" title="Changing HTML Elements"></a>Changing HTML Elements</h2><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><em>element</em>.innerHTML &#x3D; <em>new html content</em></td><td align="left">Change the inner HTML of an element</td></tr><tr><td align="left"><em>element</em>.<em>attribute &#x3D; new value</em></td><td align="left">Change the attribute value of an HTML element</td></tr><tr><td align="left"><em>element</em>.style.<em>property &#x3D; new style</em></td><td align="left">Change the style of an HTML element</td></tr><tr><td align="left">Method</td><td align="left">Description</td></tr><tr><td align="left"><em>element</em>.setAttribute*(attribute, value)*</td><td align="left">Change the attribute value of an HTML element</td></tr></tbody></table><hr><h2 id="Adding-and-Deleting-Elements"><a href="#Adding-and-Deleting-Elements" class="headerlink" title="Adding and Deleting Elements"></a>Adding and Deleting Elements</h2><table><thead><tr><th align="left">Method</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">document.createElement(<em>element</em>)</td><td align="left">Create an HTML element</td></tr><tr><td align="left">document.removeChild(<em>element</em>)</td><td align="left">Remove an HTML element</td></tr><tr><td align="left">document.appendChild(<em>element</em>)</td><td align="left">Add an HTML element</td></tr><tr><td align="left">document.replaceChild(<em>new, old</em>)</td><td align="left">Replace an HTML element</td></tr><tr><td align="left">document.write(<em>text</em>)</td><td align="left">Write into the HTML output stream</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSO</title>
      <link href="/2021/01/21/algorithm/PSO/"/>
      <url>/2021/01/21/algorithm/PSO/</url>
      
        <content type="html"><![CDATA[<h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>该算法，通过追随当前搜索到的最优值来寻找全局最优</p><p>试着想一下一群鸟在寻找食物，在这个区域中只有一只虫子，所有的鸟都不知道它在哪。但是它们知道自己的当前位置距离食物有多远，它们通过相互联系，知道离食物最近的鸟的位置，同时各只鸟在位置不停变化时候离食物的距离也不断变化。</p><p>现在把鸟抽象为粒子。</p><ol><li>粒子仅具有两个属性：速度V和位置X。粒子i在N维空间的位置表示为矢量Xi＝(x1，x2，…，xN)，飞行速度表示为矢量Vi＝(v1，v2，…，vN)。</li><li>它们知道自己到目前为止发现的最好位置(<code>pbest</code>)和现在的位置<code>Xi</code></li><li>每个粒子还知道到目前为止整个群体中所有粒子发现的最好位置(<code>gbest</code>)(gbest是pbest中的最好值)</li></ol><p>最终，粒子就是通过自己的经验和同伴中最好的经验来决定下一步的运动。 </p><h2 id="粒子速度和位置的更新"><a href="#粒子速度和位置的更新" class="headerlink" title="粒子速度和位置的更新"></a>粒子速度和位置的更新</h2><p><img src="https://i.imgur.com/1k2i2Gy.png"></p><p>该公式是从上面公式中的一个改进，增加了一个惯性因子。</p><p><img src="https://i.imgur.com/gZlglie.png"></p><p>这两条公式称为标准的PSO算法。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>举例<code>y=-x*(x-2)</code> 该函数，让PSO寻找该顶点的y值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlgorithmPSO</span> &#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">2</span>; <span class="comment">//粒子个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span>[] y;</span><br><span class="line">    <span class="type">double</span>[] x;<span class="comment">//每个粒子位置</span></span><br><span class="line">    <span class="type">double</span>[] v;<span class="comment">//每个粒子速度v</span></span><br><span class="line">    <span class="comment">//学习因子</span></span><br><span class="line">    <span class="type">double</span> c1=<span class="number">2</span>;</span><br><span class="line">    <span class="type">double</span> c2=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> pbest[];<span class="comment">//每个粒子走过的最好位置</span></span><br><span class="line">    <span class="type">double</span> gbest;<span class="comment">//是pbest中最好的值</span></span><br><span class="line">    <span class="type">double</span> vmax=<span class="number">0.1</span>; <span class="comment">//速度最大值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//适应度计算函数，每个粒子都有它的适应度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fitnessFunction</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            y[i]=-<span class="number">1</span>*x[i]*(x[i]-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123; <span class="comment">//初始化</span></span><br><span class="line">        x=<span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        v=<span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        y=<span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        pbest=<span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">        <span class="comment">/***</span></span><br><span class="line"><span class="comment">         * 本来是应该随机产生的，为了方便演示，我这里手动随机落两个点，分别落在最大值两边</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        x[<span class="number">0</span>]=<span class="number">0.0</span>;</span><br><span class="line">        x[<span class="number">1</span>]=<span class="number">2.0</span>;</span><br><span class="line">        v[<span class="number">0</span>]=<span class="number">0.01</span>;</span><br><span class="line">        v[<span class="number">1</span>]=<span class="number">0.02</span>;</span><br><span class="line">        fitnessFunction();</span><br><span class="line">        <span class="comment">//初始化当前个体最优位置，并找到群体最优位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            pbest[i]=y[i];</span><br><span class="line">            <span class="keyword">if</span>(y[i]&gt;gbest) gbest=y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;算法开始，起始最优解:&quot;</span>+gbest);</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMAX</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//粒子群算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PSO</span><span class="params">(<span class="type">int</span> max)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;max;i++)&#123;<span class="comment">//迭代次数max</span></span><br><span class="line">            <span class="type">double</span> w=<span class="number">0.4</span>;<span class="comment">//惯性因子</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="comment">//更新位置和速度</span></span><br><span class="line">                v[j]=w*v[j]+c1*Math.random()*(pbest[j]-x[j])+c2*Math.random()*(gbest-x[j]);</span><br><span class="line">                <span class="keyword">if</span>(v[j]&gt;vmax) </span><br><span class="line">                    v[j]=vmax;<span class="comment">//控制速度不超过最大值</span></span><br><span class="line"></span><br><span class="line">                x[j]+=v[j];<span class="comment">//位置变化</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//越界判断，范围限定在[0, 2]</span></span><br><span class="line">                <span class="keyword">if</span>(x[j]&gt;<span class="number">2</span>) x[j]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(x[j]&lt;<span class="number">0</span>) x[j]=<span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            fitnessFunction();<span class="comment">//更改y值</span></span><br><span class="line">            <span class="comment">//更新pbest和gbest</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                pbest[j]=getMAX(y[j],pbest[j]);</span><br><span class="line">                <span class="keyword">if</span>(pbest[j]&gt;gbest) </span><br><span class="line">                    gbest=pbest[j];</span><br><span class="line">                System.out.println(<span class="string">&quot;粒子n&quot;</span>+j+<span class="string">&quot;: x = &quot;</span>+x[j]+<span class="string">&quot;  &quot;</span>+<span class="string">&quot;v = &quot;</span>+v[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;次迭代，全局最优解 gbest = &quot;</span>+gbest);</span><br><span class="line">            System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    AlgorithmPSO ts=<span class="keyword">new</span> <span class="title class_">AlgorithmPSO</span>();</span><br><span class="line">        ts.init();</span><br><span class="line">        ts.PSO(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">算法开始，起始最优解:0.0</span><br><span class="line"></span><br><span class="line">粒子n0: x = 0.004  v = 0.004</span><br><span class="line">粒子n1: x = 0.0  v = -5.50216355503498</span><br><span class="line">第1次迭代，全局最优解 gbest = 0.007984</span><br><span class="line"></span><br><span class="line">粒子n0: x = 0.014336945856940293  v = 0.010336945856940293</span><br><span class="line">粒子n1: x = 0.0  v = -2.187807943275182</span><br><span class="line">第2次迭代，全局最优解 gbest = 0.02846834369737575</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">粒子n0: x = 0.9999999999963437  v = -7.097994640685072E-12</span><br><span class="line">粒子n1: x = 1.0000000000000309  v = 4.865719800421376E-14</span><br><span class="line">第100次迭代，全局最优解 gbest = 1.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merge Sort</title>
      <link href="/2020/12/27/algorithm/Merge-Sort/"/>
      <url>/2020/12/27/algorithm/Merge-Sort/</url>
      
        <content type="html"><![CDATA[<h1 id="原地归并排序"><a href="#原地归并排序" class="headerlink" title="原地归并排序"></a>原地归并排序</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>有这样的一个问题，要使得两个有序的数组，合并成一个有序的数组。归并排序就是以这样的想法递归地对一个无序的数组进行排序。</p><p>先来思考：如何才能能将两个有序的数组，合并成一个有序的数组。</p><p>因为两个数组是有序的，所以使用指针指向这两个数组的首元，一一进行比较。</p><ul><li>较小的一方放在新数组的前面，并且往后移动指针。</li><li>如果，指针越过了数组范围，那么就把另一个数组的所有元素放到新数组的最后面。</li></ul><p><img src="https://i.imgur.com/OBcuBsP.png"></p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><ul><li>格外开通一个辅助数组<code>aux[]</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">less_</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> aux[maxsize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">        aux[k] = a[k];<span class="comment">//辅助数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = lo; k &lt;= hi; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi)</span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">less_</span>(aux[j], aux[i]))</span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,   <span class="number">0</span>,<span class="number">2</span>&#125;;<span class="comment">//先决条件，左右两边都有序</span></span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> lo=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> hi=length<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mid=(lo+hi)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge</span>(a, lo, mid, hi);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无需开通额外数组"><a href="#无需开通额外数组" class="headerlink" title="无需开通额外数组"></a>无需开通额外数组</h1><p>上一算法中，需要开通额外数组复制数据。下面的算法<strong>不是针对一个数组的排序</strong>（其实前面的两个是我们自己拆分的，这里是<strong>真的两个数组</strong>），他能将有序A数组和有序B数组合并，并排序，最终结果放到A（前提A够大）</p><p><img src="https://i.imgur.com/p3QtX2B.png"></p><h2 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h2><p>这里稍微修改了一下：</p><ul><li>限定A的数组长度<code>na+nb</code></li><li>把大的一方往A最后放，并<code>--1</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">comb</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> &amp;na, <span class="type">int</span> B[], <span class="type">int</span> nb)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(na+nb&gt;MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i=na, j=nb;</span><br><span class="line">    <span class="keyword">while</span> (j&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>||A[i<span class="number">-1</span>]&lt;B[j<span class="number">-1</span>])&#123;</span><br><span class="line">            A[j+i<span class="number">-1</span>]=B[j<span class="number">-1</span>];</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            A[j+i<span class="number">-1</span>]=A[i<span class="number">-1</span>];</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    na=na+nb;</span><br><span class="line">    <span class="keyword">return</span> na;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> na=<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> nb=<span class="number">3</span>;</span><br><span class="line">    <span class="comment">// merge(l);</span></span><br><span class="line">    <span class="type">int</span> a[MAXSIZE]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[MAXSIZE]=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">comb</span>(a,na,b,nb);</span><br><span class="line">    <span class="built_in">display</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h1><ol><li>有两个递增数组A,B。组成将A，B中相同的元素进行从大到小排序的数组C<ul><li>因为是C从大到小，而A，B递增，所以指针首先指向A，B的最后。</li><li>根据归并排序的算法思想，非常简单</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> na, <span class="type">int</span> b[], <span class="type">int</span> nb, <span class="type">int</span> c[], <span class="type">int</span> &amp;nc)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=na<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> j=nb<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; i&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==b[j])&#123;</span><br><span class="line">            c[k]=a[i];</span><br><span class="line">            k++;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&lt;b[j])&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nc=k;</span><br><span class="line">    <span class="keyword">return</span> nc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">int</span> c[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cout&lt;&lt;c[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="type">int</span> c[<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> na=<span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> nb=<span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> nc=<span class="built_in">merge</span>(a,<span class="number">4</span>,b,<span class="number">4</span>,c,nc);</span><br><span class="line">    <span class="built_in">display</span>(c,nc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组名的传递</title>
      <link href="/2020/12/26/fatal/%E6%95%B0%E7%BB%84%E5%90%8D%E7%9A%84%E4%BC%A0%E9%80%92/"/>
      <url>/2020/12/26/fatal/%E6%95%B0%E7%BB%84%E5%90%8D%E7%9A%84%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">t</span><span class="params">(<span class="type">int</span>* a)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;<span class="comment">//8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">t</span>(a);</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显cout的那么两行，是同样的，但为什么输出一个是8，一个20呢？我们已知64位的gcc中一个pointer是由8bytes的。所以，传递数组名（地址）给函数，<code>sizeof</code>计算的是a的指针大小，不是整个数组的大小。</p><p>此技巧仅适用于数组，不适用于指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(b) / <span class="keyword">sizeof</span>(b[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fatal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The reference datatype</title>
      <link href="/2020/12/24/java/The-reference-datatype/"/>
      <url>/2020/12/24/java/The-reference-datatype/</url>
      
        <content type="html"><![CDATA[<h1 id="Reference-datatypes"><a href="#Reference-datatypes" class="headerlink" title="Reference datatypes"></a>Reference datatypes</h1><p>**The reference variables are just like the pointers in C. **</p><p>Reference datatypes in java are those which contains reference&#x2F;address of dynamically created objects. These are not predefined like primitive data types.</p><p>Following are the reference types in Java.</p><ul><li><strong>class types</strong> − This reference type points to an object of a <strong>class</strong>.</li><li><strong>array types</strong> − This reference type points to an <strong>array</strong>.</li><li><strong>interface types</strong> − This reference type points to an object of a class which implements an interface.</li></ul><p><img src="https://i.imgur.com/0ZQBoQM.jpeg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hiding of the reference</title>
      <link href="/2020/12/23/fatal/Repeatedly%20Allocate%20or%20Define/"/>
      <url>/2020/12/23/fatal/Repeatedly%20Allocate%20or%20Define/</url>
      
        <content type="html"><![CDATA[<p>Today, I made a serious error, which is allocating the memory of reference variable repeatedly. </p><p>However, if I did it, the complier will throw a error. Why did I create two references that have the same names but the complier didn’t throw the error?</p><p>The reason is that I create a reference outside the method and the other reference that has the same name was created inside the method. This may be fatal. Because the first reference would be hided while the program was running in the block&#x2F;method and created the other total different variable but they had the same name.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">JTextField t1;</span><br><span class="line"></span><br><span class="line">Calc()&#123;</span><br><span class="line">init();</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">JTextField t1=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">10</span>);<span class="comment">//error</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fatal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数和小数</title>
      <link href="/2020/12/19/fatal/%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0/"/>
      <url>/2020/12/19/fatal/%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="int-float"><a href="#int-float" class="headerlink" title="int &amp; float"></a>int &amp; float</h1><ul><li><p>前提</p><p>我们已经知道int是整形(只能输出整数)，float是浮点型（能输出小数）</p></li><li><p>仍需知道一点</p><p>在两个int类型进行运算的时候，C默认会把计算结果变成int。那么：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&quot;%f&quot;</span>, <span class="number">1</span>/<span class="number">2</span>);<span class="comment">//0.000000</span></span><br></pre></td></tr></table></figure><p>为什么结果是小数，但又是0呢？</p><p><strong>因为先算<code>1/2=0</code>，再将int类型的0，变成float</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, <span class="number">1.0</span>/<span class="number">2</span>); <span class="comment">//0.500000</span></span><br></pre></td></tr></table></figure><p>这里的1.0是double型，在计算前先把2变成double，再计算。那么就是得到double型的值0.500000。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>计算的时候要<strong>留意数字的类型，防止结果的出乎意料</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> fatal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Menu</title>
      <link href="/2020/12/18/java/swing/MenuBar/"/>
      <url>/2020/12/18/java/swing/MenuBar/</url>
      
        <content type="html"><![CDATA[<p><code>JMenuBar</code>（菜单条），这一栏可以装菜单。</p><p><code>JMenu</code>(菜单)，<strong>只有菜单才能有分支</strong></p><p><code>JMenuItem</code>（菜单项目），最终选项</p><p>菜单和菜单条能用<code>add</code>中嵌套菜单，和菜单项目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"><span class="comment">//声明组件</span></span><br><span class="line">JMenuBar m;</span><br><span class="line">JMenu menu, subMenu, save_as,option;</span><br><span class="line">JMenuItem item1, item2, save, desktop, document;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">()</span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">this</span>.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"><span class="built_in">this</span>.setTitle(<span class="string">&quot;Menu&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//新建组件</span></span><br><span class="line">m=<span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">menu=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;菜单&quot;</span>);</span><br><span class="line">subMenu=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">item1=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">item2=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;文件夹&quot;</span>);</span><br><span class="line">save=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">save_as=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;保存到&quot;</span>);</span><br><span class="line">desktop=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;桌面&quot;</span>, <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;a.jpg&quot;</span>));<span class="comment">//加载图片</span></span><br><span class="line">document=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;文档&quot;</span>);</span><br><span class="line">option=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;选项&quot;</span>);</span><br><span class="line"><span class="comment">//添加组件</span></span><br><span class="line">add(m);<span class="comment">//添加菜单条</span></span><br><span class="line">m.add(menu);<span class="comment">//将菜单添加到菜单条中</span></span><br><span class="line">menu.add(subMenu);<span class="comment">//将菜单添加到菜单中，菜单里还有菜单（菜单才能出现分支）</span></span><br><span class="line"></span><br><span class="line">subMenu.add(item1);<span class="comment">//将菜单项目添加到菜单中</span></span><br><span class="line">subMenu.add(item2);</span><br><span class="line">menu.add(save);</span><br><span class="line">menu.add(save_as);</span><br><span class="line">save_as.add(desktop);</span><br><span class="line">save_as.add(document);</span><br><span class="line">m.add(option);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Menu m=<span class="keyword">new</span> <span class="title class_">Menu</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>效果</p><img src="https://i.imgur.com/KMfdbfx.png" style="zoom: 67%;"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">JMenuBar m;</span><br><span class="line">JMenu m1,m2;</span><br><span class="line">JMenuItem i1,i2,i3,i4,i5;</span><br><span class="line">JTextArea t;</span><br><span class="line">String name=<span class="string">&quot;file.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">Menu()&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">this</span>.setTitle(<span class="string">&quot;菜单&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setSize(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"><span class="built_in">this</span>.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"><span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">m=<span class="keyword">new</span> <span class="title class_">JMenuBar</span>();</span><br><span class="line">m1=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;新建&quot;</span>);</span><br><span class="line">m2=<span class="keyword">new</span> <span class="title class_">JMenu</span>(<span class="string">&quot;文件操作&quot;</span>);</span><br><span class="line">i1=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">i2=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;文件夹&quot;</span>);</span><br><span class="line">i3=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;写&quot;</span>);</span><br><span class="line">i4=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;读&quot;</span>);</span><br><span class="line">t=<span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">5</span>,<span class="number">20</span>);</span><br><span class="line">i5=<span class="keyword">new</span> <span class="title class_">JMenuItem</span>(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line"></span><br><span class="line">add(m);</span><br><span class="line">m.add(m1);</span><br><span class="line">m.add(m2);</span><br><span class="line">m1.add(i1);</span><br><span class="line">m1.add(i2);</span><br><span class="line">m2.add(i3);</span><br><span class="line">m2.add(i4);</span><br><span class="line">m2.add(i5);</span><br><span class="line">add(t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">i2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">i3.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">i4.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">i5.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">t.setEditable(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(i1)) &#123;</span><br><span class="line">File f=<span class="keyword">new</span> <span class="title class_">File</span>(name);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(f.createNewFile()) &#123;</span><br><span class="line">t.append(<span class="string">&quot;File created:&quot;</span> + f.getName()+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">t.append(<span class="string">&quot;The file already exists\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException ee) &#123;</span><br><span class="line">ee.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(i2)) &#123;</span><br><span class="line">File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;New Floader&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(f.mkdir()) &#123;</span><br><span class="line">t.append(<span class="string">&quot;Successfully make a directory\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">t.append(<span class="string">&quot;The directory already exsits\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(i3)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileWriter f=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(name);</span><br><span class="line">f.write(<span class="string">&quot;Some text...&quot;</span>);</span><br><span class="line">f.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(i4)) &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(name);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Scanner read=<span class="keyword">new</span> <span class="title class_">Scanner</span>(f);</span><br><span class="line"><span class="keyword">while</span>(read.hasNextLine()) &#123;</span><br><span class="line">String s=read.nextLine();</span><br><span class="line">t.append(s);</span><br><span class="line">&#125;</span><br><span class="line">read.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(i5)) &#123;</span><br><span class="line">File f=<span class="keyword">new</span> <span class="title class_">File</span>(name);</span><br><span class="line"><span class="keyword">if</span>(f.delete()) &#123;</span><br><span class="line">t.append(<span class="string">&quot;Successfully delete the file\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">t.append(<span class="string">&quot;Failed to delete the file\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Menu</span> <span class="variable">m</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Menu</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calculator</title>
      <link href="/2020/12/18/java/swing/Calculator/"/>
      <url>/2020/12/18/java/swing/Calculator/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/yROQFPR.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"><span class="comment">//声明组件</span></span><br><span class="line">JTextField t1, t2, t3;</span><br><span class="line">JButton add, sub, tim, div;</span><br><span class="line">JButton save;</span><br><span class="line"><span class="comment">//属性，变量</span></span><br><span class="line"><span class="type">double</span> result=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Calculator()&#123;</span><br><span class="line">init();</span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;Calculator&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"><span class="built_in">this</span>.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line"><span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//新建组件</span></span><br><span class="line">t1=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">10</span>);</span><br><span class="line">t2=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">10</span>);</span><br><span class="line">t3=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">20</span>);</span><br><span class="line">add=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">sub=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">tim=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">div=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">save=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;save&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加组件</span></span><br><span class="line">add(t1);</span><br><span class="line">add(t2);</span><br><span class="line">add(t3);</span><br><span class="line">add(add);</span><br><span class="line">add(sub);</span><br><span class="line">add(tim);</span><br><span class="line">add(div);</span><br><span class="line">add(save);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册监听</span></span><br><span class="line">t1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">t2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">t3.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">sub.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">add.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">tim.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">div.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">save.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//额外功能</span></span><br><span class="line">t3.setEditable(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String first=t1.getText();</span><br><span class="line">String second=t2.getText();</span><br><span class="line"><span class="type">double</span> <span class="variable">n1</span> <span class="operator">=</span>Double.parseDouble(first);</span><br><span class="line"><span class="type">double</span> n2=Double.parseDouble(second);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(add)) &#123;</span><br><span class="line">result=n1+n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(sub)) &#123;</span><br><span class="line">result=n1-n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(tim)) &#123;</span><br><span class="line">result=n1*n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(div)) &#123;</span><br><span class="line">result=n1/n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(save)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File myObj=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;result.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(myObj.createNewFile()) </span><br><span class="line">System.out.println(<span class="string">&quot;Successfully create the file &quot;</span>+myObj.getName());</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;The file already exists&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e1) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileWriter w=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;result.txt&quot;</span>);</span><br><span class="line">w.write(result+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Sucessfully wrote to the file&quot;</span>);</span><br><span class="line">w.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e1) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t3.setText(result+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">Calculator c=<span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.FlowLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">JButton b1,b2,b3,b4;</span><br><span class="line">JTextField t1,t2,t3;</span><br><span class="line"></span><br><span class="line">Calc()&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">this</span>.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">this</span>.setTitle(<span class="string">&quot;计算&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line"><span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">b1=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;加&quot;</span>);</span><br><span class="line">b2=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;减&quot;</span>);</span><br><span class="line">b3=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;乘&quot;</span>);</span><br><span class="line">b4=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;除&quot;</span>);</span><br><span class="line">t1=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">10</span>);</span><br><span class="line">t2=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">10</span>);</span><br><span class="line">t3=<span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">add(b1);</span><br><span class="line">add(b2);</span><br><span class="line">add(b3);</span><br><span class="line">add(b4);</span><br><span class="line">add(t1);</span><br><span class="line">add(t2);</span><br><span class="line">add(t3);</span><br><span class="line"></span><br><span class="line">t1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">t2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">b1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">b2.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">b3.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">b4.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">t3.setEditable(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> n1;</span><br><span class="line"><span class="type">double</span> n2;</span><br><span class="line"><span class="type">double</span> result=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e.getSource().equals(b1)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">n1=Double.parseDouble(t1.getText());</span><br><span class="line">n2=Double.parseDouble(t2.getText());</span><br><span class="line">result=n1+n2;</span><br><span class="line">t3.setText(String.valueOf(result));</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException ee) &#123;</span><br><span class="line">t3.setText(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(b2)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">n1=Double.parseDouble(t1.getText());</span><br><span class="line">n2=Double.parseDouble(t2.getText());</span><br><span class="line">result=n1-n2;</span><br><span class="line">t3.setText(String.valueOf(result));</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException ee) &#123;</span><br><span class="line">t3.setText(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(b3)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">n1=Double.parseDouble(t1.getText());</span><br><span class="line">n2=Double.parseDouble(t2.getText());</span><br><span class="line">result=n1*n2;</span><br><span class="line">t3.setText(String.valueOf(result));</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException ee) &#123;</span><br><span class="line">t3.setText(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e.getSource().equals(b4)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">n1=Double.parseDouble(t1.getText());</span><br><span class="line">n2=Double.parseDouble(t2.getText());</span><br><span class="line">result=n1*n2;</span><br><span class="line">t3.setText(String.valueOf(result));</span><br><span class="line">&#125;<span class="keyword">catch</span>(NumberFormatException ee) &#123;</span><br><span class="line">t3.setText(<span class="string">&quot;请输入数字&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">Calc c=<span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java syntax</title>
      <link href="/2020/12/13/java/java-syntax/"/>
      <url>/2020/12/13/java/java-syntax/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-conception"><a href="#Basic-conception" class="headerlink" title="Basic conception"></a>Basic conception</h1><ul><li><p>First, every line of the code must be in the class. </p></li><li><p>Second, a java file can have more than one class. However, there can only be <strong>one public class per java file</strong> and the name of public class must be the same name as its file name.</p></li></ul><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>A class can contain any of the following variable types.</p><ul><li><strong>Local variables</strong> − Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.</li><li><strong>Instance variables</strong> − Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.</li><li><strong>Class variables</strong> − Class variables are variables declared within a class, outside any method, with the static keyword.</li></ul><ul><li><p>float</p><p>The <code>float</code> data type can store fractional numbers from 3.4e−038 to 3.4e+038. <strong>Note that you should end the value with an “f”.</strong></p></li><li><p>static</p><p>In the example above, we created a <code>static</code> method, which means that it can be accessed without creating an object of the class, unlike <code>public</code>, which can only be accessed by objects.</p><ul><li><p>This instance method cannot override the static method from A</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> m;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">m=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;<span class="comment">//wrong</span></span><br><span class="line">m=<span class="number">222</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Non-Primitive Data Types</p><p>Non-primitive data types are called <strong>reference types</strong> because they refer to objects.</p><ul><li>Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer and is not defined by Java (except for <code>String</code>).</li><li>Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.</li><li>A primitive type has always a value, while non-primitive types can be <code>null</code>.</li><li>A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.</li><li>The size of a primitive type depends on the data type, while non-primitive types have all the same size.</li></ul></li><li><p>Type Casting</p><p>In Java, there are two types of casting:</p><ul><li><p><strong>Widening Casting</strong> (automatically) - converting a smaller type to a larger type size<br><code>byte</code> -&gt; <code>short</code> -&gt; <code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></p></li><li><p><strong>Narrowing Casting</strong> (manually) - converting a larger type to a smaller size type<br><code>double</code> -&gt; <code>float</code> -&gt; <code>long</code> -&gt; <code>int</code> -&gt; <code>char</code> -&gt; <code>short</code> -&gt; <code>byte</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> n=<span class="number">1.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">1.1</span>;</span><br><span class="line">m=n;<span class="comment">//Widening Casting(automatically)</span></span><br><span class="line">n=(<span class="type">float</span>)m;<span class="comment">//Narrowing Casting(manually)</span></span><br></pre></td></tr></table></figure></li><li><p>special character</p><p>The backslash (<code>\</code>) escape character turns special characters into string characters:</p><table><thead><tr><th align="center">Escape character</th><th align="left">Result</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><code>\&#39;</code></td><td align="left">‘</td><td align="left">Single quote</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="left">“</td><td align="left">Double quote</td></tr><tr><td align="center"><code>\\</code></td><td align="left">\</td><td align="left">Backslash</td></tr></tbody></table></li><li><p>Loop the Array</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (type variable : arrayname) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  String[] cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (String i : cars) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>constructor</p><p>Note that the constructor name must <strong>match the class name</strong>, and it cannot have a <strong>return type</strong> (like <code>void</code>).</p><p>Also note that the constructor is called when the object is created.</p><p>All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes.</p></li></ul><h2 id="Overload-the-method"><a href="#Overload-the-method" class="headerlink" title="Overload the method"></a>Overload the method</h2><p>After we overloaded  a method, there will be  <strong>two method that have the same name</strong> but have the differences that are <strong>the numbers or the type of the parameters</strong>. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">float</span> <span class="title function_">computer</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">g</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">float</span> <span class="title function_">computer</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y,<span class="type">double</span> z)</span> &#123;<span class="comment">//overload</span></span><br><span class="line"><span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h1><p>A package in Java is used to group related classes. Think of it as <strong>a folder in a file directory</strong>.</p><p> We use packages to avoid name conflicts.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">package</span>.name.Class;   <span class="comment">// Import a single class</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">package</span>.name.*;   <span class="comment">// Import the whole package</span></span><br></pre></td></tr></table></figure><h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><p>Inheritance can be defined as the process where one class acquires the properties (methods and fields) of another. With the use of the extends keyword, the subclasses will be able to inherit all the properties of the superclass <strong>except for the private properties of the superclass</strong>.</p><p>To inherit from a class, use the <code>extends</code> keyword.</p><p>We can inherit attributes and methods from one class to another</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculation</span>&#123;</span><br><span class="line"><span class="type">int</span> z;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addition</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">z=x+y;</span><br><span class="line">System.out.println(<span class="string">&quot;The sum of the given number: &quot;</span>+z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subtraction</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">z=x-y;</span><br><span class="line">System.out.println(<span class="string">&quot;The difference between the given number: &quot;</span>+z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">My_Calculation</span> <span class="keyword">extends</span> <span class="title class_">Calculation</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multiplication</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">z=x*y;</span><br><span class="line">System.out.println(<span class="string">&quot;The product of the given number: &quot;</span>+z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">20</span>, b=<span class="number">10</span>;</span><br><span class="line">My_Calculation c=<span class="keyword">new</span> <span class="title class_">My_Calculation</span>();</span><br><span class="line">c.addition(a, b);</span><br><span class="line">c.subtraction(a, b);</span><br><span class="line">c.multiplication(a, b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>If we create a reference variable to the superclass, it can only access the members of the superclass, so to access the members of both classes it is recommend to always create reference variables to the subclass.</li></ul><p><strong>Note</strong> − A subclass inherits all the members (fields, methods, and nested classes) from its superclass. <strong>Constructors are not members, so they are not inherited by subclasses</strong>, but the constructor of the superclass can be invoked from the subclass. (How do we invoke it? we just use the <code>super</code> keyword)</p><h2 id="The-super-keyword"><a href="#The-super-keyword" class="headerlink" title="The super keyword"></a>The super keyword</h2><p>The <strong>super</strong> keyword is similar to <strong>this</strong> keyword. Following are the scenarios where the super keyword is used.</p><ul><li><p>It is used to <strong>differentiate the members</strong> of superclass from the members of subclass, if they have same names.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Super_class</span>&#123;</span><br><span class="line"><span class="type">int</span> num=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;This is the display method of the super class&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub_class</span> <span class="keyword">extends</span> <span class="title class_">Super_class</span>&#123;</span><br><span class="line"><span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;This is the display method of the sub class&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">Sub_class sub=<span class="keyword">new</span> <span class="title class_">Sub_class</span>();</span><br><span class="line">sub.display();</span><br><span class="line"><span class="built_in">super</span>.display();</span><br><span class="line">System.out.println(<span class="string">&quot;value of the variable named num in sub class: &quot;</span>+num);</span><br><span class="line">System.out.println(<span class="string">&quot;value of the variable named num in super class: &quot;</span>+ <span class="built_in">super</span>.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Sub_class obj=<span class="keyword">new</span> <span class="title class_">Sub_class</span>();</span><br><span class="line">obj.method();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>It is used to <strong>invoke the superclass</strong> constructor from subclass.</p><p>If a class is inheriting the properties of another class, the subclass automatically acquires the default constructor of the superclass. But if you want to call a parameterized constructor of the superclass, you need to use the super keyword </p><p>As the following example, we use <code>super(val)</code> to call the parameterized constructor. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">SuperClass(<span class="type">int</span> age)&#123;</span><br><span class="line"><span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The value of varible named age in the super class name is &quot;</span>+ age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line"></span><br><span class="line">SubClass(<span class="type">int</span> age) &#123;</span><br><span class="line"><span class="built_in">super</span>(age);</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">SubClass s=<span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="number">19</span>);</span><br><span class="line">s.getAge();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>Let us use the <strong>instanceof</strong> operator to check determine whether Mammal is actually an Animal, and dog is actually an Animal.</p><p><code>(obj name) instanceof (class name)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mammal</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Mammal</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Mammal m=<span class="keyword">new</span> <span class="title class_">Mammal</span>();</span><br><span class="line">Dog d=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">System.out.println(m <span class="keyword">instanceof</span> Animal);</span><br><span class="line">System.out.println(d <span class="keyword">instanceof</span> Mammal);</span><br><span class="line">System.out.println(d <span class="keyword">instanceof</span> Animal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="Override-the-method"><a href="#Override-the-method" class="headerlink" title="Override the method"></a>Override the method</h2><p>After we override, the method in the subclass <strong>covers</strong> the method in the superclass that has the same name. Note that the method in the subclass must have the same <strong>name</strong>, <strong>the same numbers and same type of parameters</strong> as the superclass. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">float</span> <span class="title function_">computer</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">g</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">float</span> <span class="title function_">computer</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x*y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Even though b is a type of Animal it runs the move method in the Dog class</strong></p><p>In compile time, the check is made on the reference type. However, in the runtime, JVM figures out the object type and would run the method that belongs to that particular object.</p><p>As an example, the program will compile properly since Animal class has the method move. Then, at the runtime, it runs the method specific for that object. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Animals can move&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Dogs can walk and run&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();   <span class="comment">// Animal reference and object</span></span><br><span class="line">      <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();   <span class="comment">// Animal reference but Dog object</span></span><br><span class="line"></span><br><span class="line">      a.move();   <span class="comment">// runs the method in Animal class</span></span><br><span class="line">      b.move();   <span class="comment">// runs the method in Dog class</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>If we call the method only exists in the Animal but not in the Dog, the error will occur.</strong> This program will throw a compile time error since b’s reference type Animal doesn’t have a method by the name of bark.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The animals move&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The dog moves&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The dog barks&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDog</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Animal d=<span class="keyword">new</span> <span class="title class_">Dog</span>();<span class="comment">// Animal reference but Dog object</span></span><br><span class="line">d.move();<span class="comment">//output: The dog moves</span></span><br><span class="line">        </span><br><span class="line">        d.bark(); <span class="comment">//error</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Certainly, it is possible to invoke the method that has been overridden. Just use the super keyword</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">super</span>.move();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;The dog moves&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The animals move</span><br><span class="line">The dog moves</span><br></pre></td></tr></table></figure><h1 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h1><p><strong>Polymorphism in Java</strong> is a concept by which we can perform a <em>single action in different ways</em>.</p><p>There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. We can perform polymorphism in java <strong>by method overloading and method overriding</strong>.</p><ul><li><p>runtime polymorphism</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;wang wang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;miao miao&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Animal a;</span><br><span class="line">a =<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">a.cry();</span><br><span class="line"></span><br><span class="line">a=<span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">a.cry();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wang wang</span><br><span class="line">miao miao</span><br></pre></td></tr></table></figure></li></ul><h1 id="Inner-Classes"><a href="#Inner-Classes" class="headerlink" title="Inner Classes"></a>Inner Classes</h1><p>To access the inner class, create an object of the outer class, and then create an object of the inner class. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OuterClass</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">OuterClass myOuter=<span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">OuterClass.<span class="type">InnerClass</span> <span class="variable">myInner</span> <span class="operator">=</span> myOuter.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">System.out.println(myInner.y + myOuter.x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><h2 id="Abstract-class"><a href="#Abstract-class" class="headerlink" title="Abstract class"></a>Abstract class</h2><p>Abstraction can be achieved with either <strong>abstract classes</strong> or <strong>interface</strong>. </p><ul><li><p><strong>Abstract class:</strong> is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).</p></li><li><p><strong>Abstract method:</strong> can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//abstract class</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="comment">//abstract method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//regular method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;zzz&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SubClass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;wee wee&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Pig</span> <span class="variable">myPig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">myPig.animalSound();</span><br><span class="line">myPig.sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>An <code>interface</code> is a completely “<strong>abstract class</strong>“ that is used to group related methods with empty bodies. There are not variables in the interface only constants. </p><p>To access the interface methods, the interface must be “implemented” by another class with the <code>implements</code> keyword (instead of <code>extends</code>).The body of the interface method is provided by the “implement” class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;<span class="comment">//constant</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>;<span class="comment">//public abstract can be omitted</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="type">int</span> MAX=<span class="number">100</span>;</span><br><span class="line">    <span class="comment">//equal to </span></span><br><span class="line">    <span class="comment">//public static final int MAX=100;</span></span><br><span class="line"><span class="comment">//the method in interface has not body</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">animalSound</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;wee wee&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;The pig is running&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Pig</span> <span class="variable">myPig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">myPig.animalSound();</span><br><span class="line">myPig.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Multiple-Interfaces"><a href="#Multiple-Interfaces" class="headerlink" title="Multiple Interfaces"></a>Multiple Interfaces</h2><p>To implement multiple Interfaces, separate them with a comma:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FirstInterface</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SecondInterface</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myOtherMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">FirstInterface</span>, SecondInterface&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myOtherMethod</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;Some other text...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot;Some text&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main5</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">myClass.myMethod();</span><br><span class="line">myClass.myOtherMethod();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Inner-Class"><a href="#Inner-Class" class="headerlink" title="Inner Class"></a>Inner Class</h1><p>Creating an inner class is quite simple. You just need to write a class within a class. Unlike a class, an inner class can be private and once you declare an inner class private, it cannot be accessed from an object outside the class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer_Demo</span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//inner class</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner_Demo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;This is an inner class&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">display_Inner</span><span class="params">()</span> &#123;</span><br><span class="line">Inner_Demo inner=<span class="keyword">new</span> <span class="title class_">Inner_Demo</span>();</span><br><span class="line">inner.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Outer_Demo o=<span class="keyword">new</span> <span class="title class_">Outer_Demo</span>();</span><br><span class="line">o.display_Inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>To instantiate a inner class, initially we have to instantiate the outer class. </p><p>We need to instantiate inside the outer class and new the object inside the outer object. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Outer_Demo</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer_Demo</span>();</span><br><span class="line">Outer_Demo.<span class="type">Inner_Demo</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner_Demo</span>();</span><br></pre></td></tr></table></figure><h1 id="File-Handing"><a href="#File-Handing" class="headerlink" title="File Handing"></a>File Handing</h1><h2 id="Create-a-file"><a href="#Create-a-file" class="headerlink" title="Create a file"></a>Create a file</h2><p>The <code>File</code> class from the <code>java.io</code> package, allows us to work with files.</p><p>To use the <code>File</code> class, create an object of the class, and specify the filename or directory name:</p><p>To create a file in Java, you can use the <code>createNewFile()</code> method. This method returns a boolean value: <code>true</code> if the file was successfully created, and <code>false</code> if the file already exists. Note that the method is enclosed in a <code>try...catch</code> block. This is necessary because it throws an <code>IOException</code> if an error occurs (if the file cannot be created for some reason):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">File myObj=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(myObj.createNewFile()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;File created: &quot;</span>+myObj.getName());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;The file already exists&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;An error occured&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Write-to-a-file"><a href="#Write-to-a-file" class="headerlink" title="Write to a file"></a>Write to a file</h2><p>In the following example, we use the <code>FileWriter</code> class together with its <code>write()</code> method to write some text to the file we created in the example above. If the file isn’t exists, it will be created. </p><p>Note that when you are done writing to the file, you should close it with the <code>close()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileWriter myWriter=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">myWriter.write(<span class="string">&quot;File in java is fun enough&quot;</span>);</span><br><span class="line">myWriter.close();</span><br><span class="line">System.out.println(<span class="string">&quot;Sucessfully wrote to the file&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;An error occurred&quot;</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Read-Files"><a href="#Read-Files" class="headerlink" title="Read Files"></a>Read Files</h2><p>In the following example, we use the <code>Scanner</code> class to read the contents of the text file we created, </p><p>After we read the file, we should close the reader <code>myReader.close();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">File</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.txt&quot;</span>);</span><br><span class="line">      <span class="type">Scanner</span> <span class="variable">myReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(myObj);</span><br><span class="line">      <span class="keyword">while</span> (myReader.hasNextLine()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> myReader.nextLine();</span><br><span class="line">        System.out.println(data);</span><br><span class="line">      &#125;</span><br><span class="line">      myReader.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;An error occurred.&quot;</span>);</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Delete-Files"><a href="#Delete-Files" class="headerlink" title="Delete Files"></a>Delete Files</h2><p>To delete a file in Java, use the <code>delete()</code> method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File myObj=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Filename.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(myObj.delete()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Successfully delete the file&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Failed to delete the file&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-Exceptions"><a href="#Java-Exceptions" class="headerlink" title="Java Exceptions"></a>Java Exceptions</h1><p>When an <strong>Exception</strong> occurs the normal flow of the program is disrupted and the program&#x2F;Application terminates abnormally, which is not recommended, therefore, these exceptions are to be handled.</p><p>If an error occurs, we can use <code>try...catch</code> to catch the error and execute some code to handle it:</p><p>The <code>try</code> statement allows you to define a block of code to be tested for errors while it is being executed.</p><p>The <code>catch</code> statement allows you to define a block of code to be executed, if an error occurs in the try block.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Excpetions</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Someting worng&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语法</title>
      <link href="/2020/12/07/English/%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/12/07/English/%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>读句子时，重点抓住主干</p><h1 id="名词性从句"><a href="#名词性从句" class="headerlink" title="名词性从句"></a>名词性从句</h1><p>包括：</p><ul><li>宾语从句</li><li>主语从句</li><li>表语从句</li><li>同位语从句</li></ul><p>引导词的划分，根据名词性从句的类型：</p><ul><li><p>that(从句是陈述句)</p><p>I promise that I will help you. </p></li><li><p>whether&#x2F;if (从句是一般疑问句)</p><p>They don’t know whether they will finish the work on time. </p></li><li><p>when, where, why, how, who, whom, what, which, whose</p><p>(从句是特殊疑问句（注意：从句是还是陈述句语序）)</p><p>You never told me what you had done to my computer. </p><p>what &#x3D; the thing that(充当从句的宾语)</p><ul><li>The job is what I want.</li></ul></li></ul><p>同位语从句的引导词一般是that，因为它是解释说明</p><h1 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h1><p>引导词的划分, 根据先行词(要修饰的词)的种类：</p><ol><li>人，用who, whom, whose, that</li><li>物，用that, which, whose</li><li>时间，用that, which, when</li><li>地点，用that, which, where</li></ol><p>并且，引导词都要做成分</p><ol><li><p>who, whom, that, which</p><p>在从句中充当主语或宾语</p></li><li><p>where, when, why</p><p>做状语成分</p></li><li><p>whose</p><p>什么的（充当定语）</p></li></ol><h2 id="限定性定语从句"><a href="#限定性定语从句" class="headerlink" title="限定性定语从句"></a>限定性定语从句</h2><p>为什么要限定呢，因为先行词的范围不确定。</p><ul><li>I met you friend who is standing in Paris. (friend有很多个，范围不明确要解释)</li></ul><h2 id="非限定性定语从句"><a href="#非限定性定语从句" class="headerlink" title="非限定性定语从句"></a>非限定性定语从句</h2><ul><li><p>I met you mother, who is standing in Paris.(mother只有一个，不需要解释了，就用逗号。后面只是额外的补充说明)</p></li><li><p>第二种情况<code>, which</code>是指代前面的整个句子。</p></li></ul><h1 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h1><p>从属连词+完整句子</p><h2 id="时间状语从句"><a href="#时间状语从句" class="headerlink" title="时间状语从句"></a>时间状语从句</h2><p>when&#x2F;while&#x2F;as（当。。。时候）</p><p>before&#x2F; after&#x2F; since&#x2F; until</p><p>as soon as （一。。。就。。。）</p><p>by the time（截止到。。。）</p><h2 id="地点状语从句"><a href="#地点状语从句" class="headerlink" title="地点状语从句"></a>地点状语从句</h2><p>where</p><h2 id="原因状语从句"><a href="#原因状语从句" class="headerlink" title="原因状语从句"></a>原因状语从句</h2><p>because&#x2F;since&#x2F;as（因为）</p><h2 id="结果状语从句"><a href="#结果状语从句" class="headerlink" title="结果状语从句"></a>结果状语从句</h2><p>so that (&#x3D; so 所以) </p><p>太。。。所以</p><p>so (+adj. adv.) that …</p><p>such (+n.) that… </p><h2 id="目的状语从句"><a href="#目的状语从句" class="headerlink" title="目的状语从句"></a>目的状语从句</h2><p>so that </p><p>in order that </p><h2 id="条件状语从句"><a href="#条件状语从句" class="headerlink" title="条件状语从句"></a>条件状语从句</h2><p>if</p><p>once </p><p>as long as </p><p>unless &#x3D; if not</p><h2 id="让步状语从句"><a href="#让步状语从句" class="headerlink" title="让步状语从句"></a>让步状语从句</h2><p>although&#x2F; though</p><p>even if &#x2F; even through</p><p>+转折</p><h2 id="比较状语从句"><a href="#比较状语从句" class="headerlink" title="比较状语从句"></a>比较状语从句</h2><p>than+（单词&#x2F;句子）</p><p>as … as … (和。。。一样)同级比较</p><h2 id="方式状语从句"><a href="#方式状语从句" class="headerlink" title="方式状语从句"></a>方式状语从句</h2><p>as (按照。。。方式做)</p><p>When in Rome, do as Romans do. （入乡随俗）</p><h2 id="as"><a href="#as" class="headerlink" title="as"></a>as</h2><p>as + n. （作为。。。）</p><p><strong>当。。。时候</strong></p><p><strong>原因</strong></p><p>比较</p><p>方式</p><h1 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h1><p>通过连词(conj.) 将多个简单句连接在一起。</p><h2 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h2><h3 id="顺接"><a href="#顺接" class="headerlink" title="顺接"></a>顺接</h3><p>… and …</p><p>both … and …</p><p>not only … , but … as well&#x2F; but also … &#x2F; but … </p><h3 id="转折"><a href="#转折" class="headerlink" title="转折"></a>转折</h3><p>… but …</p><p>… yet …</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>… or …</p><p>either … or …</p><p>neither … or …</p><h3 id="因果"><a href="#因果" class="headerlink" title="因果"></a>因果</h3><p>… for …</p><p>… so …</p><h1 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h1><p>三种形态：</p><p>​doing, done, to do</p><h2 id="非谓语动词作成分"><a href="#非谓语动词作成分" class="headerlink" title="非谓语动词作成分"></a>非谓语动词作成分</h2><p>只有，to do &#x2F; doing + &#x2F;sth.&#x2F;介词短语 成为名词，充当<strong>主、宾、表</strong></p><ul><li><p>做主语</p></li><li><p>In daily life, <em>forgetting</em> actually has clear advantage. </p></li><li><p>In daily life, <em>to forget</em> actually has clear advantage. </p><p>这里to forget做主语，长了。把它放到句尾，用it做形式主语，所以有</p><p>In daily life, <em>it</em> actually has clear advantage <em>to forget</em>. （句子变高级了）</p></li><li><p>做宾语</p><p>The members of the board decide to vote against the new plan. </p></li><li><p>做表语</p><p>Our main goal is to finish the task on time.</p></li></ul><h2 id="非谓语动词作修饰"><a href="#非谓语动词作修饰" class="headerlink" title="非谓语动词作修饰"></a>非谓语动词作修饰</h2><p>修饰名词，做定语</p><p>修饰句子，做状语</p><p>（就近修饰）</p><p>ing 主动</p><ul><li><p>修饰名词</p></li><li><p><em>Passing</em> planes can be heard night and day. （经过的飞机在白天晚上都能被听到）</p><p>Passing为非谓语，就近修饰planes。</p></li><li><p>修饰句子</p></li><li><p>The teacher came into the classroom, <em>holding</em> a book in his hand. </p><p>holding前面有逗号隔开，修饰前面的句子（就是修饰这个句子的主语）</p></li></ul><p>done 被动</p><ul><li><p>修饰名词</p></li><li><p>He bought a used car. </p><p>used 修饰car</p></li><li><p>修饰句子</p></li><li><p>The teacher came into the classroom, followed by five students.</p></li></ul><p>to do 目的</p><ul><li><p>修饰名词</p></li><li><p>I have a lot of homework to do.</p><p>to do 修饰homework</p></li><li><p>修饰句子</p></li><li><p>I am coming to see you. </p></li><li><p>to see you 修饰整个句子（就是修饰这个句子的主语）</p></li></ul><h1 id="简单句的扩展"><a href="#简单句的扩展" class="headerlink" title="简单句的扩展"></a>简单句的扩展</h1><h2 id="介词短语（补充说明）"><a href="#介词短语（补充说明）" class="headerlink" title="介词短语（补充说明）"></a>介词短语（补充说明）</h2><p>介词短语由：介词+ 名词&#x2F;代词&#x2F;doing 构成</p><p>prep. + n.&#x2F; pron. &#x2F; doing</p><p>修饰前面名词</p><p>有,逗号隔开，修饰整个句子</p><h2 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h2><h2 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h2>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译技巧</title>
      <link href="/2020/12/05/English/%E7%BF%BB%E8%AF%91%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/12/05/English/%E7%BF%BB%E8%AF%91%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="修饰后置"><a href="#修饰后置" class="headerlink" title="修饰后置"></a>修饰后置</h1><ul><li>修饰不用后置的情况<ol><li>过短</li><li>元素单一</li><li>最高级</li></ol></li><li>修饰后置的情况<ol><li>的，地，得</li><li>时间</li><li>地点</li><li>方式</li><li>原因</li><li>目的</li></ol></li></ul><h1 id="如何后置"><a href="#如何后置" class="headerlink" title="如何后置"></a>如何后置</h1><h2 id="使用介词"><a href="#使用介词" class="headerlink" title="使用介词"></a>使用介词</h2><p>使用哪个介词不太重要（of, in, on, over, … )，关键要用一个介词来让修饰后置</p><h2 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h2><p>当存在多个修饰时，考虑使用定语从句</p><h2 id="插入语（同位语）"><a href="#插入语（同位语）" class="headerlink" title="插入语（同位语）"></a>插入语（同位语）</h2><p>使用情况：</p><p>名词解释</p><ul><li><p>The WTO, founded(非谓语动词) on January 1st, 1995, aim to ensure a stable environment of trading and economy in the world. </p></li><li><p>The Yangtze River, the longest river in Asia, also the third longest river in the world, flowing through many different kinds of  biological systems, is a habitat of many endangered species, watering one fifth of China’s land.</p></li></ul><h1 id="一主多动句"><a href="#一主多动句" class="headerlink" title="一主多动句"></a>一主多动句</h1><ol><li><p>使用并列</p></li><li><p>使用非谓语（动作由主语发出）</p><ul><li><p>ing - 表主动</p></li><li><p>ed - 表被动</p></li><li><p>to do - 表目的</p><p>来，去，以，为 + v</p><ul><li>Many parents believe that they should work hard to ensure that their children receive a good education.</li></ul></li></ul></li></ol><h1 id="无主句"><a href="#无主句" class="headerlink" title="无主句"></a>无主句</h1><h2 id="祈使句"><a href="#祈使句" class="headerlink" title="祈使句"></a>祈使句</h2><p>与汉语一样</p><h2 id="补主语"><a href="#补主语" class="headerlink" title="补主语"></a>补主语</h2><p>补we, you</p><h2 id="变被动"><a href="#变被动" class="headerlink" title="变被动"></a>变被动</h2><ul><li><p>Since the cable cars were installed <em>in the 1990s</em>, the number of visitors has increased significantly. </p></li><li><p>灯笼通常被五彩缤纷的薄纸做成，形状和尺寸各异。</p><p>Lanterns are usually made of thin paper of bright colors, <strong>in different shapes and sizes</strong>.</p></li></ul><h2 id="there-be"><a href="#there-be" class="headerlink" title="there be"></a>there be</h2>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊句型</title>
      <link href="/2020/12/01/English/%E7%89%B9%E6%AE%8A%E5%8F%A5%E5%9E%8B/"/>
      <url>/2020/12/01/English/%E7%89%B9%E6%AE%8A%E5%8F%A5%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="强调句"><a href="#强调句" class="headerlink" title="强调句"></a>强调句</h1><p><code>It is/was (not) ... that ...</code></p><p>首先，写出一个普通句子</p><p>I want to go to America this summer. </p><ol><li><p>提取强调的部分（<strong>不能用于动词或形容词</strong>，这种情况是主语从句）</p></li><li><p>放到**is&#x2F;was(根据原来句子时态变化) **和 that的中间(假如我要强调America)</p></li></ol><ul><li>It is America that I want to go to this summer.</li></ul><p>that 可以根据要强调的东西换成who, whom, which</p><h1 id="倒转句（主谓倒装）"><a href="#倒转句（主谓倒装）" class="headerlink" title="倒转句（主谓倒装）"></a>倒转句（主谓倒装）</h1><p><strong>倒装句因为要强调adj, adv, 介词短语，而存在</strong></p><h2 id="全部倒装"><a href="#全部倒装" class="headerlink" title="全部倒装"></a>全部倒装</h2><p>把普通的句子的主语和全部谓语动词移到主语前</p><p>A temple sits on the north bank of the River. </p><ul><li>On the north bank of the River sits a temple. (倒装)</li></ul><h2 id="部分倒装"><a href="#部分倒装" class="headerlink" title="部分倒装"></a>部分倒装</h2><p>把普通的句子的主语和部分谓语动词移到主语前</p><p>三种部分倒装用法：</p><ol><li><strong>否定</strong>副词或词组（Not only … but…, No sooner, Never, etc. )位于句前。</li><li>Only位于句首。</li><li>虚拟条件句省略if</li></ol><ul><li><strong>最后，把他们变成一般疑问句的形式</strong></li></ul><h3 id="As-an-Example"><a href="#As-an-Example" class="headerlink" title="As an Example"></a>As an Example</h3><p>1. </p><p>They not only developed such a device but they had also embed into it in a worldwide system. </p><p><font color="red">Not only</font> they <font color="red">did</font> develop such a device but they had also embed into it in a worldwide system. </p><p>He had hardly had time to settle down when he left the country. </p><p><font color="red">Hardly</font> had he had time to settle down when he left the country. </p><p>2. </p><p>He achieved his goal only by working hard. </p><p><font color="red">Only</font> by working hard <font color="red">did</font> he achieve his goal. </p><p>3. </p><p>If I were you, I would do it myself. </p><p><font color="red">Were</font> I you, I would do it myself. </p><h1 id="省略句"><a href="#省略句" class="headerlink" title="省略句"></a>省略句</h1><h2 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h2><p>..and&#x2F; or&#x2F; but …</p><p>not only … but also…</p><p>both… and …</p><p>只要前后有相同都可以省略。（一般省略后面部分）</p><h2 id="定语从句的省略"><a href="#定语从句的省略" class="headerlink" title="定语从句的省略"></a>定语从句的省略</h2><ol><li><p>关系词充当从句的主语</p></li><li><p>从句中有be</p><p>满足这两个条件可以（省略关系词和be）</p></li></ol><h2 id="状语从句的省略"><a href="#状语从句的省略" class="headerlink" title="状语从句的省略"></a>状语从句的省略</h2><ol><li><p>从句主语和主句主语一致</p></li><li><p>从句中有be</p><p>满足这两个条件可以（省略从句主语和be）</p></li></ol><ul><li>非谓语动词充当定语和状语都来自于定语从句和状语从句的省略</li></ul><h1 id="虚拟语气"><a href="#虚拟语气" class="headerlink" title="虚拟语气"></a>虚拟语气</h1><table><thead><tr><th></th><th>if从句</th><th>主句</th></tr></thead><tbody><tr><td>假设过去</td><td>had done</td><td>would&#x2F;could&#x2F;should&#x2F;might + have done</td></tr><tr><td>假设现在</td><td>过去分词(did)&#x2F;were</td><td>would&#x2F;could&#x2F;should&#x2F;might + do</td></tr><tr><td>假设将来</td><td>过去分词(did)&#x2F;were</td><td>would&#x2F;could&#x2F;should&#x2F;might + do</td></tr></tbody></table><p>1. </p><p>I don’t know his phone number, so I won’t ring him up.</p><p>If I known his phone number, I would ring him up.</p><p>2. </p><p>I am not a bird, so I can’t fly to you right way. </p><p>If I were a bird, I could fly to you right way. </p><p>3. </p><p>He was not a student, so he could’t attend the lecture. </p><p>If he had been a student, he could have attended the lecture. </p>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长句写法</title>
      <link href="/2020/11/29/English/%E9%95%BF%E5%8F%A5%E5%86%99%E6%B3%95/"/>
      <url>/2020/11/29/English/%E9%95%BF%E5%8F%A5%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="五大句型"><a href="#五大句型" class="headerlink" title="五大句型"></a>五大句型</h1><ol><li>主谓</li><li>主谓宾</li><li>主系表</li><li>主谓双宾</li><li>主谓宾宾补（Money makes people selfish.</li></ol><p>主要使用2，3</p><h1 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h1><ol><li>or, not only…, but also… (and)</li><li>whereas, while, yet (but)</li></ol><h1 id="从句"><a href="#从句" class="headerlink" title="从句"></a>从句</h1><h2 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h2><p>本从句需要引导词充当成分。</p><ol><li>人+ who(人充当主语）, whom（人充当宾语）,whose</li><li>物+ that, which</li><li>时间+ when</li><li>地点+where</li><li>As …, …（As 指代, 后面整句话<ul><li>As is symbolically illustrated in the cartoon, a person …</li></ul></li></ol><h2 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h2><ol><li>when（当）</li><li>Once …, … (一旦)</li><li>As…, …(由于)</li><li>in that &#x3D; because, since, as, for(因为（强度由高到低)</li><li>while, through(尽管)</li></ol><h2 id="宾语从句"><a href="#宾语从句" class="headerlink" title="宾语从句"></a>宾语从句</h2><ol><li>动词&#x2F;介词 + that, what</li></ol><h2 id="主语从句"><a href="#主语从句" class="headerlink" title="主语从句"></a>主语从句</h2><p>It is … that…</p><h2 id="同位语从句"><a href="#同位语从句" class="headerlink" title="同位语从句"></a>同位语从句</h2><p>一般用于抽象名词后, </p><ul><li>I cling to the idea that …</li></ul><h1 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h1><h2 id="动名词"><a href="#动名词" class="headerlink" title="动名词"></a>动名词</h2><p><code>doing</code>将<strong>动词+ing</strong>变成名词</p><p>成分：主语和宾语</p><ul><li>[Participating] in volunteer works could boost my development of interpersonal relationship.</li></ul><p>Participating充当主语</p><h2 id="不定式"><a href="#不定式" class="headerlink" title="不定式"></a>不定式</h2><p><code>to do</code></p><p>成分：能充当任何成分</p><ul><li>It is necessary for us [to use computer in a reasonable way and restrain from overindulgence].</li></ul><p>It 为形式主语，真正的主语是不定式，to use computer in a reasonable way and restrain from overindulgence</p><ul><li>The computer is invented [to connect you and me].</li></ul><p>不定式to connect you and me，作目的状语</p><h2 id="分词短语"><a href="#分词短语" class="headerlink" title="分词短语"></a>分词短语</h2><h3 id="现在分词短语"><a href="#现在分词短语" class="headerlink" title="现在分词短语"></a>现在分词短语</h3><p><code>doing</code>+短语</p><p>成分：定语，状语</p><p>且动作由主语发出</p><ul><li>I remember that we always anticipated [talking] with him with great eagerness because his lectures are delivered, never [failing to provoke chuckles or loud laughs]</li></ul><p>talking动名词，作宾语</p><p>failing to provoke chuckles or loud laughs现在分词短语，作状语</p><h3 id="过去分词"><a href="#过去分词" class="headerlink" title="过去分词"></a>过去分词</h3><p><code>do + ed</code></p><p>表被动，修饰最近的名词</p><ul><li>A good teacher add considerably to the materials [contained in the mobile phones]</li></ul><h3 id="独立主格结构"><a href="#独立主格结构" class="headerlink" title="独立主格结构"></a>独立主格结构</h3><p>[Being 20], I meet you. </p><p>being 与主语I动作一致</p><p>[The eyes sparkling with delight], the daughter tell her mother. </p><p>想表达的sparkling与主语动作不一致，在其前加上逻辑主语The eyes</p><h1 id="介词短语"><a href="#介词短语" class="headerlink" title="介词短语"></a>介词短语</h1><p><em>介词短语</em>，是介词和其它代词或名词或词组搭配形成的短语。（它包括不定式）</p><p>成分：任何成分</p><p><img src="https://i.imgur.com/oyu03uh.png"></p><ol><li><p>作状语</p><p>There is a shop at the school gate.</p></li><li><p><img src="https://i.imgur.com/SJYkBiQ.png"></p></li><li><p><img src="https://i.imgur.com/16QPjCE.png"></p></li></ol><ul><li><p>for</p><ul><li>benefits</li><li>duration</li><li>helping someone</li><li>function</li></ul></li><li><p>to</p><ul><li>destination</li><li>preference</li><li>time to</li><li>limit</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP</title>
      <link href="/2020/11/29/cpp/OOP/"/>
      <url>/2020/11/29/cpp/OOP/</url>
      
        <content type="html"><![CDATA[<h1 id="C-OOP"><a href="#C-OOP" class="headerlink" title="C++ OOP"></a>C++ OOP</h1><p>OOP stands for Object-Oriented Programming.</p><p>Procedural programming is about <strong>writing procedures or functions</strong> that perform operations on the data, while object-oriented programming is about <strong>creating objects that contain both data and functions</strong>. </p><ul><li>OOP is faster and easier to execute</li><li>OOP provides a clear structure for the programs</li><li>OOP helps to keep the C++ code DRY “<strong>Don’t Repeat Yourself</strong>“, and makes the code easier to maintain, modify and debug</li><li>OOP makes it possible to create full reusable applications with less code and shorter development time</li></ul><h2 id="What-are-Classes-and-Objects"><a href="#What-are-Classes-and-Objects" class="headerlink" title="What are Classes and Objects?"></a>What are Classes and Objects?</h2><p>Classes and objects are the two main aspects of object-oriented programming.</p><p><img src="https://i.imgur.com/2p4qPJS.png"></p><p>So, a class is a template for objects, and an object is an instance of a class.</p><p>When the individual objects are created, they inherit all the variables and functions from the class.</p><h2 id="Attributes-and-Methods"><a href="#Attributes-and-Methods" class="headerlink" title="Attributes and Methods"></a>Attributes and Methods</h2><p>Example: in real life, a car is an <strong>object</strong>. The car has <strong>attributes</strong>, such as weight and color, and <strong>methods</strong>, such as drive and brake.</p><p>Attributes and methods are basically <strong>variables</strong> and <strong>functions</strong> that belongs to the class. <strong>These are often referred to as “class members”.</strong></p><p>class: attributes, methods——&gt;variables, functions——&gt;class members</p><h2 id="Create-a-class"><a href="#Create-a-class" class="headerlink" title="Create a class"></a>Create a class</h2><p>Create a class called “<code>MyClass</code>“:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;       <span class="comment">// The class</span></span><br><span class="line">  <span class="keyword">public</span>:             <span class="comment">// Access specifier</span></span><br><span class="line">    <span class="type">int</span> myNum;        <span class="comment">// Attribute (int variable)</span></span><br><span class="line">    string myString;  <span class="comment">// Attribute (string variable)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>The <code>class</code> keyword is used to create a class called <code>MyClass</code>.</p></li><li><p>The <code>public</code> keyword is an <strong>access specifier</strong>, which specifies that members (attributes and methods) of the class are accessible from outside the class.</p></li><li><p>Inside the class, there is an integer variable <code>myNum</code> and a string variable <code>myString</code>. When variables are declared within a class, they are called <strong>attributes</strong>.</p></li><li><p>At last, end the class definition with a semicolon <code>;</code>.</p></li></ul><h2 id="create-an-object"><a href="#create-an-object" class="headerlink" title="create an object"></a>create an object</h2><p>To create an object of <code>MyClass</code>, specify the class name, followed by the object name.</p><p>To access the class attributes (<code>myNum</code> and <code>myString</code>), use the dot syntax (<code>.</code>) on the object:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass myObj;  <span class="comment">// Create an object of MyClass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Access attributes and set values</span></span><br><span class="line">    myObj.myNum = <span class="number">15</span>;</span><br><span class="line">    myObj.myString = <span class="string">&quot;Some text&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print attribute values</span></span><br><span class="line">    cout &lt;&lt; myObj.myNum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; myObj.myString;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="create-a-method"><a href="#create-a-method" class="headerlink" title="create a method"></a>create a method</h2><p>There are two ways to define functions that belongs to a class:</p><ul><li>Inside class definition</li><li>Outside class definition</li></ul><p><strong>Note:</strong> You access methods just like you access attributes; by creating an object of the class and using the dot syntax (<code>.</code>):</p><p>In the following example, we define a function inside the class, and we name it “<code>myMethod</code>“.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;        <span class="comment">// The class</span></span><br><span class="line">  <span class="keyword">public</span>:              <span class="comment">// Access specifier</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;  <span class="comment">// Method/function defined inside the class</span></span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass myObj;     <span class="comment">// Create an object of MyClass</span></span><br><span class="line">  myObj.<span class="built_in">myMethod</span>();  <span class="comment">// Call the method</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifiying the name of the class, followed the scope resolution <code>::</code> operator, followed by the name of the function:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;        <span class="comment">// The class</span></span><br><span class="line">  <span class="keyword">public</span>:              <span class="comment">// Access specifier</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myMethod</span><span class="params">()</span></span>;   <span class="comment">// Method/function declaration</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Method/function definition outside the class</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::myMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass myObj;     <span class="comment">// Create an object of MyClass</span></span><br><span class="line">  myObj.<span class="built_in">myMethod</span>();  <span class="comment">// Call the method</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>A constructor in C++ is a <strong>special method</strong> that is automatically called when an object of a class is created.</p><p>To create a constructor, <strong>use the same name as the class</strong>, followed by parentheses <code>()</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;       <span class="comment">// The class</span></span><br><span class="line">  <span class="keyword">public</span>:             <span class="comment">// Access specifier</span></span><br><span class="line">    <span class="built_in">MyClass</span>()&#123;        <span class="comment">// Constructor</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello world&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass myObj;  <span class="comment">// Create an object of MyClass (this will call the constructor)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Constructors can also take parameters (just like regular functions), which can be useful for setting initial values for attributes.</p><p>The following class have <code>brand</code>, <code>model</code> and <code>year</code> attributes, and a constructor with different parameters. Inside the constructor we set the attributes equal to the constructor parameters (<code>brand=x</code>, etc).</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;        <span class="comment">// The class</span></span><br><span class="line">  <span class="keyword">public</span>:          <span class="comment">// Access specifier</span></span><br><span class="line">    string brand;  <span class="comment">// Attribute</span></span><br><span class="line">    string model;  <span class="comment">// Attribute</span></span><br><span class="line">    <span class="type">int</span> year;      <span class="comment">// Attribute</span></span><br><span class="line">    <span class="built_in">Car</span>(string x, string y, <span class="type">int</span> z) &#123; <span class="comment">// Constructor with parameters</span></span><br><span class="line">      brand = x;</span><br><span class="line">      model = y;</span><br><span class="line">      year = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Create Car objects and call the constructor with different values</span></span><br><span class="line">  <span class="function">Car <span class="title">carObj1</span><span class="params">(<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;X5&quot;</span>, <span class="number">1999</span>)</span></span>;</span><br><span class="line">  <span class="function">Car <span class="title">carObj2</span><span class="params">(<span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mustang&quot;</span>, <span class="number">1969</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print values</span></span><br><span class="line">  cout &lt;&lt; carObj<span class="number">1.</span>brand &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; carObj<span class="number">1.</span>model &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; carObj<span class="number">1.</span>year &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; carObj<span class="number">2.</span>brand &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; carObj<span class="number">2.</span>model &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; carObj<span class="number">2.</span>year &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Access-specifier"><a href="#Access-specifier" class="headerlink" title="Access specifier"></a>Access specifier</h1><p>The <code>public</code> keyword is an <strong>access specifier</strong>, that defines how the members (attributes and methods) of a class can be accessed.</p><p>Access specifiers define how the members (attributes and methods) of a class can be accessed.</p><ul><li><code>public</code> - members are accessible from outside the class</li><li><code>private</code> - members cannot be accessed (or viewed) from outside the class</li><li><code>protected</code> - members cannot be accessed from outside the class, however, they can be accessed in inherited classes.</li></ul><p><strong>Note:</strong> By default, all members of a class are <code>private</code> if you don’t specify an access specifier:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="comment">//private</span></span><br><span class="line">  <span class="type">int</span> x;   <span class="comment">// Private attribute</span></span><br><span class="line">  <span class="type">int</span> y;   <span class="comment">// Private attribute</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>In the following example, we demonstrate the differences between <code>public</code> and <code>private</code> members:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:    <span class="comment">// Public access specifier</span></span><br><span class="line">    <span class="type">int</span> x;   <span class="comment">// Public attribute</span></span><br><span class="line">  <span class="keyword">private</span>:   <span class="comment">// Private access specifier</span></span><br><span class="line">    <span class="type">int</span> y;   <span class="comment">// Private attribute</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass myObj;</span><br><span class="line">  myObj.x = <span class="number">25</span>;  <span class="comment">// Allowed (public)</span></span><br><span class="line">  myObj.y = <span class="number">50</span>;  <span class="comment">// Not allowed (private)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h1><p>The meaning of <strong>Encapsulation</strong>, is to make sure that “sensitive” data is hidden from users. To achieve this, you must declare class variables&#x2F;attributes as <code>private</code> (cannot be accessed from outside the class). To achieve this, you must declare class variables&#x2F;attributes as <code>private</code> (cannot be accessed from outside the class).</p><h2 id="Access-Private-Members"><a href="#Access-Private-Members" class="headerlink" title="Access Private Members"></a>Access Private Members</h2><p>If you want others to read or modify the value of a private member, you can provide public <strong>get</strong> and <strong>set</strong> methods.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setSalary</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">salary=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSalary</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Employee myObj;</span><br><span class="line">myObj.<span class="built_in">setSalary</span>(<span class="number">6000</span>);</span><br><span class="line">cout&lt;&lt;myObj.<span class="built_in">getSalary</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Why-Encapsulation"><a href="#Why-Encapsulation" class="headerlink" title="Why Encapsulation?"></a>Why Encapsulation?</h2><ul><li>It is considered good practice to declare your class attributes as private (as often as you can). Encapsulation ensures better control of your data, <strong>because you (or others) can change one part of the code without affecting other parts(when you are using multiple objects</strong></li><li>Increased security of data</li></ul><h1 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h1><p>In C++, it is possible to <strong>inherit attributes and methods</strong> from one class to another. We group the “inheritance concept” into two categories:</p><ul><li><strong>derived class</strong> (child) - the class that inherits from another class</li><li><strong>base class</strong> (parent) - the class being inherited from</li></ul><p>To inherit from a class, use the <code>:</code> symbol.</p><p>In the example below, the <code>Car</code> class (child) inherits the attributes and methods from the <code>Vehicle</code> class (parent):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Base Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string brand=<span class="string">&quot;Ford&quot;</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">honk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Tuut, Tuut\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Derived class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>: <span class="keyword">public</span> Vehicle&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string model=<span class="string">&quot;Mustang&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Car myCar;</span><br><span class="line">    myCar.<span class="built_in">honk</span>();</span><br><span class="line">    cout&lt;&lt;myCar.brand+<span class="string">&quot; &quot;</span>+myCar.model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Why-And-When-To-Use-“Inheritance”"><a href="#Why-And-When-To-Use-“Inheritance”" class="headerlink" title="Why And When To Use “Inheritance”?"></a>Why And When To Use “Inheritance”?</h2><p>- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.</p><h2 id="Multilevel-Inheritance"><a href="#Multilevel-Inheritance" class="headerlink" title="Multilevel Inheritance"></a>Multilevel Inheritance</h2><p>A class can also be derived from one class, which is already derived from another class.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base class (parent)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Some content in parent class.&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class (child)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyChild</span>: <span class="keyword">public</span> MyClass &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class (grandchild)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyGrandChild</span>: <span class="keyword">public</span> MyChild &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyGrandChild myObj;</span><br><span class="line">  myObj.<span class="built_in">myFunction</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Multiple-Inheritance"><a href="#Multiple-Inheritance" class="headerlink" title="Multiple Inheritance"></a>Multiple Inheritance</h2><p>A class can also be derived from more than one base class, using a <strong>comma-separated list:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Some content in parent class.&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Another base class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyOtherClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">myOtherFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Some content in another class.&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyChildClass</span>: <span class="keyword">public</span> MyClass, <span class="keyword">public</span> MyOtherClass &#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyChildClass myObj;</span><br><span class="line">  myObj.<span class="built_in">myFunction</span>();</span><br><span class="line">  myObj.<span class="built_in">myOtherFunction</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Access-Specifiers"><a href="#Access-Specifiers" class="headerlink" title="Access Specifiers"></a>Access Specifiers</h2><p>The third specifier, <code>protected</code>, is similar to <code>private</code>, but it can also be accessed in the <strong>inherited</strong> class:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span>: <span class="comment">// Protected access specifier</span></span><br><span class="line">    <span class="type">int</span> salary;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Derived class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Programmer</span>: <span class="keyword">public</span> Employee &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> bonus;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setSalary</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">      salary = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Programmer myObj;</span><br><span class="line">  myObj.<span class="built_in">setSalary</span>(<span class="number">50000</span>);</span><br><span class="line">  myObj.bonus = <span class="number">15000</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Salary: &quot;</span> &lt;&lt; myObj.<span class="built_in">getSalary</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Bonus: &quot;</span> &lt;&lt; myObj.bonus &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h1><p><strong>Polymorphism</strong> uses those methods that inherited from base class to perform different tasks. This allows us to perform a single action in different ways.</p><p><strong>Just override the method from the base class in the derived class.</strong> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Base class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">animalSound</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The animal makes sound&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Derived class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:Animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">animalSound</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The dog says: wow wow&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Derived class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span>:Animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">animalSound</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;The pig says: wee wee&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal myAnimal;</span><br><span class="line">Dog myDog;</span><br><span class="line">Pig myPig;</span><br><span class="line">myAnimal.<span class="built_in">animalSound</span>();</span><br><span class="line">myDog.<span class="built_in">animalSound</span>();</span><br><span class="line">myPig.<span class="built_in">animalSound</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Why-And-When-To-Use-“Inheritance”-and-“Polymorphism”"><a href="#Why-And-When-To-Use-“Inheritance”-and-“Polymorphism”" class="headerlink" title="Why And When To Use “Inheritance” and “Polymorphism”?"></a>Why And When To Use “Inheritance” and “Polymorphism”?</h2><p>- It is useful for code reusability: reuse attributes and methods of an existing class when you create a new class.</p><h1 id="C-Files"><a href="#C-Files" class="headerlink" title="C++ Files"></a>C++ Files</h1><h1 id="Expectations"><a href="#Expectations" class="headerlink" title="Expectations"></a>Expectations</h1><p>When an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw an <strong>exception</strong> (throw an error).</p><ul><li><p>Exception handling in C++ consist of three keywords: <code>try</code>, <code>throw</code> and <code>catch</code>:</p><p>if a error is detected in the try{}, throw the exception and handle it in catch{}.</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// Block of code to try</span></span><br><span class="line">  <span class="keyword">throw</span> exception; <span class="comment">// Throw an exception when a problem arise</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> () &#123;</span><br><span class="line">  <span class="comment">// Block of code to handle errors</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">int</span> age = <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Access granted - you are old enough.&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">505</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> (<span class="type">int</span> myNum) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Access denied - You must be at least 18 years old.\n&quot;</span>;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Error number: &quot;</span> &lt;&lt; myNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime的一些配置</title>
      <link href="/2020/11/23/Q&amp;A/sublime%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/11/23/Q&amp;A/sublime%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在cmd窗口中执行</p><p>tools-&gt;<strong>Build System</strong>-&gt;<strong>New Build System</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cmd&quot;: [&quot;g++&quot;, &quot;$&#123;file&#125;&quot;, &quot;-fexec-charset=gbk&quot;, &quot;-o&quot;, &quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;],</span><br><span class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</span><br><span class="line">    &quot;working_dir&quot;: &quot;$&#123;file_path&#125;&quot;,</span><br><span class="line">    &quot;selector&quot;: &quot;source.c, source.c++&quot;,</span><br><span class="line">    &quot;variants&quot;:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Run&quot;,</span><br><span class="line">            &quot;cmd&quot;: [&quot;cmd&quot;, &quot;/c&quot;, &quot;g++&quot;, &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;, &quot;cmd&quot;, &quot;/c&quot;, &quot;$&#123;file_path&#125;/$&#123;file_base_name&#125; &amp; pause&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>转换格式</p><p>解决中文乱码</p><p><code>ctrl+shift+p</code></p><ol><li><p><strong>安装ConvertToUTF8，</strong></p></li><li><p>ConvertToUTF8:Reload encoding with</p></li><li><p>选择Chinese Simplified(GBK)</p></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>万年历</title>
      <link href="/2020/11/14/java/%E4%B8%87%E5%B9%B4%E5%8E%86/"/>
      <url>/2020/11/14/java/%E4%B8%87%E5%B9%B4%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<ol><li>输入任何一年，2020则输出该年的所有月历表</li><li>输入任何年月，2020 11，则输出该月的月历表</li><li>输入任何年月日，2020 11 14，则输出该天是星期几</li></ol><ul><li><p>已知年月日，求星期几</p><p><code>int w=(day+2*month+3*(month+1)/5+year+year/4-year/100+year/400+1)%7;</code></p></li><li><p>判断是闰年</p><p><code>(year%400 == 0 ) || (year%4==0 &amp;&amp; year%100 != 0)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> choice;</span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> month=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> day;</span><br><span class="line"><span class="type">int</span> m_d[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">13</span>];</span><br><span class="line"><span class="type">boolean</span> is_rn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calendar</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Enter a letter from three choices marked the 1), 2) and 3): &quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;1. year&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;2. year month&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3. year month day&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">choice = input.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Enter the format you have just chosen: &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(choice) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">year = input.nextInt();</span><br><span class="line"><span class="built_in">this</span>.creat_calendar();</span><br><span class="line"><span class="built_in">this</span>.print_year();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">year=input.nextInt();</span><br><span class="line">month=input.nextInt();</span><br><span class="line"><span class="built_in">this</span>.creat_calendar();</span><br><span class="line"><span class="built_in">this</span>.print_month();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">year=input.nextInt();</span><br><span class="line">month=input.nextInt();</span><br><span class="line">day=input.nextInt();</span><br><span class="line"><span class="built_in">this</span>.print_week();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;The number is invalid.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">creat_calendar</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">400</span> == <span class="number">0</span> ) || (year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>))</span><br><span class="line">is_rn=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">is_rn=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span> || i==<span class="number">3</span> ||</span><br><span class="line">i == <span class="number">5</span> || i == <span class="number">7</span> || i == <span class="number">8</span> || i == <span class="number">10</span> || i == <span class="number">12</span>)</span><br><span class="line">day=<span class="number">31</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">9</span> || i == <span class="number">11</span> )</span><br><span class="line">day=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(is_rn)</span><br><span class="line">day=<span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">day=<span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_d[i] = day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print_year</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">12</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;the &quot;</span> + (i) +<span class="string">&quot; month&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m_d[i]; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(j % <span class="number">7</span> ==<span class="number">0</span> )</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print_month</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;the &quot;</span> + month + <span class="string">&quot; month&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m_d[month]; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">7</span> ==<span class="number">0</span>)</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print_week</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> w=(day+<span class="number">2</span>*month+<span class="number">3</span>*(month+<span class="number">1</span>)/<span class="number">5</span>+year+year/<span class="number">4</span>-year/<span class="number">100</span>+year/<span class="number">400</span>+<span class="number">1</span>)%<span class="number">7</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Today is &quot;</span> + w + <span class="string">&quot;th day of a week&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">Demo</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">d.calendar();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data lab</title>
      <link href="/2020/11/07/csapp/Representing%20and%20Manipulating%20Information/data-lab/"/>
      <url>/2020/11/07/csapp/Representing%20and%20Manipulating%20Information/data-lab/</url>
      
        <content type="html"><![CDATA[<h1 id="Confusion"><a href="#Confusion" class="headerlink" title="Confusion"></a>Confusion</h1><h2 id="logical-operators"><a href="#logical-operators" class="headerlink" title="logical operators"></a>logical operators</h2><ul><li><p><code>||, &amp;&amp;, !</code>, which <strong>treat any nonzero argument as representing TRUE</strong> and <strong>argument 0 as representing FALSE</strong>. And then they <strong>return either 1 or 0</strong>, indicating a result of either TRUE or FALSE, respectively. </p></li><li><p>A second important distinction between the logical operators ‘&amp;&amp;’ and ‘||’<br>versus their bit-level counterparts ‘&amp;’ and ‘|’ is that the logical operators do not<br>evaluate their second argument if the result of the expression can be determined<br>by evaluating the first argument.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Rounding toward zero</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">divide_power2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="type">int</span> is_neg = INT_MIN &amp; x;</span><br><span class="line">    <span class="type">int</span> bias = (<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//if is_neg is false, (x = x + (1 &lt;&lt; k) - 1) would not be execute</span></span><br><span class="line">    is_neg &amp;&amp; (x = x + bias);</span><br><span class="line">    <span class="keyword">return</span> x&gt;&gt;k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unsigned-and-two’s-complement"><a href="#unsigned-and-two’s-complement" class="headerlink" title="unsigned and two’s complement"></a>unsigned and two’s complement</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Return 1 when x can be represented as an n-bit, 2’s-complement</span></span><br><span class="line"><span class="comment">* number; 0 otherwise</span></span><br><span class="line"><span class="comment">* Assume 1 &lt;= n &lt;= w</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fit_bits</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> w = <span class="keyword">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> x==(x&lt;&lt;(w-n)&gt;&gt;(w-n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    assert(fit_bits(<span class="number">0b010</span>, <span class="number">3</span>));</span><br><span class="line">    assert(!fit_bits(<span class="number">0b010</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Fatal"><a href="#Fatal" class="headerlink" title="Fatal"></a>Fatal</h1><p>Some possibly nonintuitive behavior arises due to C’s handing of expressions containing combinations of signed and unsigned quantities. </p><p>**When an operation is preformed  where one operand is signed and the other is unsigned, C implicitly casts the signed argument to unsigned. **</p><p>As an example, Since <code>sizeof</code> would return a <code>size_t</code> type, the int type of maxbytes will be implicitly casts to be unsinged. Hence no matter how small the maxbytes is, the condition all way is true and call the function memcpy(). </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">copy_int</span><span class="params">(<span class="type">int</span> val, <span class="type">void</span> *buf, <span class="type">int</span> maxbytes)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (maxbytes-<span class="keyword">sizeof</span>(val) &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, (<span class="type">void</span> *) &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can rewrite the condition to be <code>maxbytes &gt;= sizeof(val)</code></p><h1 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h1><ul><li><p>x -&gt; -x </p><p>~x + 1</p></li></ul><h2 id="mask"><a href="#mask" class="headerlink" title="mask"></a>mask</h2><p><strong>We often use a mask to extract the special bits in a value.</strong> We create a mask, its corresponding bits are 1 and the other bits are zeros. </p><p><img src="https://i.imgur.com/eXp53sG.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">any_odd_one</span><span class="params">(<span class="type">unsigned</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">0xAAAAAAAA</span>;</span><br><span class="line"><span class="comment">//extract all odd numbers of x and use ^ to compare whether all odd numbers are 1</span></span><br><span class="line">    <span class="keyword">return</span> !((mask &amp; x) ^ mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="logical-and-arithmetic-right-shift"><a href="#logical-and-arithmetic-right-shift" class="headerlink" title="logical and arithmetic right shift"></a>logical and arithmetic right shift</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lower_one_mask</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">    mask = mask &gt;&gt; (n<span class="number">-1</span>);<span class="comment">//arthmetic right shift</span></span><br><span class="line">    mask = (<span class="type">unsigned</span>)mask &gt;&gt; <span class="number">31</span> - (n<span class="number">-1</span>);<span class="comment">//logical right shift</span></span><br><span class="line">    <span class="keyword">return</span> mask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Representations-of-number-In-C"><a href="#Representations-of-number-In-C" class="headerlink" title="Representations of number In C"></a>Representations of number In C</h2><ul><li><p>Decimal</p><p><code>int x=10;</code></p></li><li><p>Octal:</p><p><code>int x = 012;</code></p></li><li><p>Hexadecimal</p><p><code>int x = 0xa;</code></p></li><li><p>Binary</p><p><code>int x = 0b1010</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp lab environment</title>
      <link href="/2020/11/06/csapp/csapp-lab-environment/"/>
      <url>/2020/11/06/csapp/csapp-lab-environment/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install build-essential</span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib</span><br></pre></td></tr></table></figure><ol><li>阅读<code>bits.c</code>的注释与代码</li><li>修改它</li><li>命令行运行<code>./dlc -e bits.c</code>查看自己用了多少操作符，以及是否有代码风格问题</li><li>运行<code>make clean &amp;&amp; make btest</code>编译文件</li><li>运行<code>./btest</code>检查自己是否做对了</li><li>return 1 直到全部做完</li><li>最终运行<code>./driver.pl</code>获得打分</li></ol><p>共享文件夹：</p><p><code>/mnt/hgfs/</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PATH环境变量不见了</title>
      <link href="/2020/10/30/Q&amp;A/PATH%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8D%E8%A7%81%E4%BA%86/"/>
      <url>/2020/10/30/Q&amp;A/PATH%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%8D%E8%A7%81%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>Windows下的PATH环境变量不知被哪门子清理软件给清掉了。所以我们New一个PATH</p><p>variable value：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于二维数组名和指针的指针</title>
      <link href="/2020/10/28/c/%E5%85%B3%E4%BA%8E%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%90%8D%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88/"/>
      <url>/2020/10/28/c/%E5%85%B3%E4%BA%8E%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%90%8D%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p>我们来看一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void f(int **a)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a[2][2];</span><br><span class="line">    f(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码是会报错的，<code>error: cannot convert &#39;int (*)[2]&#39; to &#39;int**&#39;</code></p><p><strong>很明显，二维数组名不是指向指针的指针</strong><code>(int **)</code>，而是一个指向数组的指针<code>int (*)[2]</code></p><p>如果非要用指针的指针，可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> c[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> d[<span class="number">3</span>]=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> **a</span><br><span class="line">a = new <span class="type">int</span> *[<span class="number">2</span>];</span><br><span class="line">*(a)=c;</span><br><span class="line">*(a+<span class="number">1</span>)=d;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Representing and Manipulating Information</title>
      <link href="/2020/10/27/csapp/Representing%20and%20Manipulating%20Information/Representing%20and%20Manipulating%20Information/"/>
      <url>/2020/10/27/csapp/Representing%20and%20Manipulating%20Information/Representing%20and%20Manipulating%20Information/</url>
      
        <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>Modern computers store and process information represented as two-valued signals. Binary values work better when building machines that store and process information. </p><h1 id="How-many-sizes-to-store"><a href="#How-many-sizes-to-store" class="headerlink" title="How many sizes to store?"></a>How many sizes to store?</h1><ul><li><p>A machine-level program views memory as a very large array of bytes, referred to as <strong>virtual memory</strong>. Rather than accessing individual bit in memory, most computers use blocks of 8 bits, or byte, as the smallest addressable unit of memory. </p></li><li><p>Every byte of memory is identified by a unique number, know as its <strong>address</strong>, and the set of all possible address is known as the <strong>virtual address space</strong>.</p></li></ul><p>It simply treats each program object as a block of bytes and the program itself as a sequence of bytes.</p><h2 id="Hexadecimal-Notation"><a href="#Hexadecimal-Notation" class="headerlink" title="Hexadecimal Notation"></a>Hexadecimal Notation</h2><ul><li><p>A single byte consists of 8 bits. </p><p>In binary notation, its value ranges from 0000000 to 1111111.</p><p>In decimal notation, its value ranges from 0 to 255.</p><p>In hexadecimal notation, its value ranges from 00 to 0xFF.</p></li><li><p>We write bit pattern as base-16 or hexadecimal number</p><p>Why? Because the binary notation is too verbose, while with decimal notion it is tedious to convert to and from bit patterns.</p><ul><li>Converting between binary and hexadecimal is straightforward. We can convert <code>0x173A4C</code>to binary format by expanding each hexadecimal digit. Conversely, given a binary number, we can convert it to hexadecimal by first splitting it into groups of 4 bit each.</li></ul></li></ul><p><img src="https://i.imgur.com/i5sVdr9.png"></p><h2 id="Data-Sizes"><a href="#Data-Sizes" class="headerlink" title="Data Sizes"></a>Data Sizes</h2><ul><li><p>word size</p><p><strong>Every computer has a word size, indicating the size of pointer data.</strong> The most important parameter determined by word size is the maximum size of the virtual address space. That is, for a machine with <em>w</em> bits word sizes the virtual addresses can range from 0 to 2^w - 1, giving the program access to at most 2^64 bytes. (A 32-bit word size limits the virtual address space to 4GB, this is, just over 4*10^9 bytes)</p></li></ul><h1 id="Where-to-store"><a href="#Where-to-store" class="headerlink" title="Where to store?"></a>Where to store?</h1><h2 id="Addressing-and-Byte-Ordering"><a href="#Addressing-and-Byte-Ordering" class="headerlink" title="Addressing and Byte Ordering"></a>Addressing and Byte Ordering</h2><ul><li><p>The different machine&#x2F;operating system configurations use different conventions for storage allocation.</p></li><li><p>For ordering the byes representing an object, there are two conventions.</p><p>Let’s have a look. Suppose the variable x of type int and at address 0x100 has hexadecimal value of 0x1234567. Some machines choose to store the object in memory ordered from least significant bytes to most, while other machines storm them from most to least. </p><ul><li>The former convention -where the least significant byte comes first- is referred to as little endian.</li><li>The least convention -where the most significant byte comes first- is referred to as big endian.</li></ul></li></ul><p><img src="https://i.imgur.com/c7mWESs.png"></p><ul><li>A Function uses hexadecimal to represents the bytes of different program objects.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> *byte_pointer;</span><br><span class="line"><span class="comment">//Note that the statement is like `unsigned char *byte_pointer;`</span></span><br><span class="line"><span class="comment">//So byte_pointer is a pointer variable.</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span>&#123;</span><br><span class="line">    <span class="type">size_t</span> i;<span class="comment">//This type is used to represent the size of an object.</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);<span class="comment">//%.2x indicate that an integer should be printed in hexadecimal.</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if we want to call this function we should cast other pointer type to unsigned char type pointer, such as `(byte_pointer)&amp;x`.</span></span><br><span class="line"><span class="comment">//Note that the casts shown here do not change the actual pointer; they simply direct the complier to refer to the data being pointed to accoring to the new data type</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_float</span><span class="params">(<span class="type">float</span> x)</span>&#123;</span><br><span class="line">    show_bytes((byte_pointer)&amp;x, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span>&#123;</span><br><span class="line">    show_bytes((byte_pointer)&amp;x, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Representing-Strings"><a href="#Representing-Strings" class="headerlink" title="Representing Strings"></a>Representing Strings</h1><p>A string in C is encoded by an array of characters terminated by null character. Each character is represented by some standard encoding, with the most common being the ASCII character code.</p><ul><li>For example:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *s=<span class="string">&quot;0123456789&quot;</span>;</span><br><span class="line">show_bytes((byte_pointer)s, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//we will get:   30 31 32 33 34 35 36 37 38 39 00</span></span><br></pre></td></tr></table></figure><p>This same result would be obtained on any system using ASCII as its character code, independent of the bytes ordering and word size.</p><h1 id="Representing-Code"><a href="#Representing-Code" class="headerlink" title="Representing Code"></a>Representing Code</h1><p>Different machine types use different and incompatible instruction and encodings. Even identical processors running different operating systems have differences in their coding conventions and hence are not binary compatible. So binary code is seldom portable across different combination of machine and operating system.</p><p>A fundamental concept of computer systems is that a program is simply a sequence of bytes. The machine has no information about the original source program.</p><h1 id="Representing-Integer"><a href="#Representing-Integer" class="headerlink" title="Representing Integer"></a>Representing Integer</h1><h2 id="Thoughts-on-integer"><a href="#Thoughts-on-integer" class="headerlink" title="Thoughts on integer"></a>Thoughts on integer</h2><p>**Fist of all, we should state clearly that the a binary value can be represent unsigned or two’s complement. They may look different but their bit-level  are the same, hence operations such as addition, subtraction, multiplication, and even division have either identical or very similar bit-level behaviors, whether the operands are in unsigned or two’s complement. **</p><p><img src="https://i.imgur.com/3u5SRNE.png"></p><p><img src="https://i.imgur.com/XCnWlIO.png"></p><h2 id="Encoding-the-integer"><a href="#Encoding-the-integer" class="headerlink" title="Encoding the integer"></a>Encoding the integer</h2><p>We has two different way <strong>bits can be used to encode integers</strong>. </p><ol><li>**Unsigned encodings **(It can only represent nonnegative numbers)</li><li><strong>Two’s Complement Encodings</strong> (It can represent negative, zero and positive numbers)</li></ol><p><img src="https://i.imgur.com/UKKk3HR.png"></p><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul><li><p>Binary to Unsigned integer ($B2U_w$)</p><p>This function is bijection.</p></li></ul><p><img src="https://i.imgur.com/xEIhOzb.png"></p><ul><li><p>Binary to Two’s complement($B2T_w$)</p><p>This function is bijection.</p><p><img src="https://i.imgur.com/nHq0Iyy.png"></p></li><li><p>Two’s complement to unsigned </p><p><img src="https://i.imgur.com/FBGtUuf.png"></p></li><li><p>Unsigned to Two’s complement</p><p><img src="https://i.imgur.com/9q2eLhE.png"></p></li></ul><h3 id="Converting-between-signed-and-unsigned"><a href="#Converting-between-signed-and-unsigned" class="headerlink" title="Converting between signed and unsigned"></a>Converting between signed and unsigned</h3><p>One important feature to note is that the ranges are not symmetric, the range of negative numbers extends on further than the range of positive number.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> u = <span class="number">4294967295u</span>;<span class="comment">//UMAX</span></span><br><span class="line"><span class="type">int</span> tu = (<span class="type">int</span>)u;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u = %u, tu=%d\n&quot;</span>, u, tu);</span><br><span class="line"></span><br><span class="line"><span class="comment">//result: u = 4294967295, tu=-1</span></span><br></pre></td></tr></table></figure><img src="https://i.imgur.com/4LTPUHa.png" style="zoom:80%;"><p>**Converting between signed(two’s complement) and unsigned, we have a simple way to memory. This is, **</p><p><img src="https://i.imgur.com/JQ7W0bX.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define INT_MAX 2147483647</span><br><span class="line">#define INT_MIN (-INT_MAX - 1)</span><br></pre></td></tr></table></figure><h2 id="Operating-the-integer"><a href="#Operating-the-integer" class="headerlink" title="Operating the integer"></a>Operating the integer</h2><h3 id="Expanding-the-Bit-Representation-of-a-number"><a href="#Expanding-the-Bit-Representation-of-a-number" class="headerlink" title="Expanding the Bit Representation of a number"></a>Expanding the Bit Representation of a number</h3><p>We can do some operations in bits to expand the word size while retaining the same numeric value. </p><ol><li><p>Expansion of an unsigned number by zero extension</p><p>Define bit vectors u &#x3D; [u_w-1, u_w-2, … , 0] of width w and u’ &#x3D; [0, … , 0, u_w-1, u_w-2, … , 0] of width w’, where w’ &gt; w. Then B2U_w(u) &#x3D; B2U_w’(u’)</p></li></ol><p>this operation is like <strong>Logical</strong> right shift of bit operation</p><ol start="2"><li><p>Expansion of a two’s complement number by signed extension</p><p>Define bit vectors u &#x3D;  [x_w-1, x_w-2, … , 0] of width w and u’ &#x3D; [x_w-1, … , x_w-1, x_w-2, … , 0] of width w’, where w’ &gt; w. Then B2T_w(u) &#x3D; B2T_w’(u’)</p><p><img src="https://i.imgur.com/Pbu9oty.png"></p></li></ol><p>this operation is like  <strong>arithmetic</strong> right shift of bit operation</p><ul><li>This is, assuming two Binary values that are not equal, but when we represent them in signed or unsigned they may be equal.</li></ul><h3 id="Truncating-Number"><a href="#Truncating-Number" class="headerlink" title="Truncating Number"></a>Truncating Number</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x =<span class="number">53191</span>;</span><br><span class="line"><span class="type">short</span> sx = (<span class="type">short</span>)x;<span class="comment">//Truncating</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sx);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> y=sx;<span class="comment">//expanding</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, y);</span><br><span class="line"><span class="built_in">show_bytes</span>((byte_pointer)&amp;x, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">show_bytes</span>((byte_pointer)&amp;sx, <span class="built_in">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">show_bytes</span>((byte_pointer)&amp;y, <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//result(little endian)</span></span><br><span class="line"> c7 cf <span class="number">00</span> <span class="number">00</span></span><br><span class="line"> c7 cf</span><br><span class="line"> c7 cf ff ff</span><br></pre></td></tr></table></figure><p><strong>Truncating number can alter its value, a form of overflow.</strong></p><ul><li><p>In Binary level, we truncating a w-bit number  $x &#x3D; [x_{w-1}, x_{w-2}, … , x_0]$ to a k-bit number $x’ &#x3D; [x_{k-1}, x_{k-2}, … , x_0]$, which we drop the high-order w-k bit. Then, we can use the rules, binary to unsigned or binary to two’s complement, to represent the integer.</p></li><li><p>If we truncate Integer number(unsigned and two’s complement) directly, there are two ways:</p></li></ul><img src="https://i.imgur.com/5gLndkn.png" style="zoom:80%;"><h2 id="Integer-Arithmetic"><a href="#Integer-Arithmetic" class="headerlink" title="Integer Arithmetic"></a>Integer Arithmetic</h2><p>Sometimes, we add two positive numbers can yield a negative number or two negative numbers can yield a positive number, which is the overflow. </p><h3 id="Integer-Addition"><a href="#Integer-Addition" class="headerlink" title="Integer Addition"></a>Integer Addition</h3><p>Consider two negative integers x and y in the range $0 &lt;&#x3D; x, y &lt;&#x3D; 2^w$. If we compute their sum, we have a possible range 0 &lt;&#x3D; x, y &lt;&#x3D; 2^(w+1)- 2</p><p>As an example:</p><img src="https://i.imgur.com/aDUG69k.png" alt="illustration" style="zoom:80%;"><h3 id="Unsigned-addition"><a href="#Unsigned-addition" class="headerlink" title="Unsigned addition"></a>Unsigned addition</h3><p>We can see that representing this sum could require w+1 bits. We should truncate it to be w bits because more commonly, programming languages support fixed-size arithmetic, and hence operation such as “addition” and “multiplication” differ from their counterpart operations over integers.</p><ul><li>Define a operation , as a result of truncating the integer sum $x+y$, to be w bits long and then viewing the result as an unsigned number.</li></ul><p><img src="https://i.imgur.com/9STRbzV.png"></p><p><strong>This operation can be characterized as a form of modular arithmetic. Computing a sum modular $2^w$ by discarding any bits with weight greater than 2^(w-1) in the bit-level representation of x+y.</strong></p><img src="https://i.imgur.com/0Lm4Ohp.png" style="zoom:80%;"><h3 id="Unsigned-negation"><a href="#Unsigned-negation" class="headerlink" title="Unsigned negation"></a>Unsigned negation</h3><p><strong>Even the unsigned number is nonnegative. But it also has the unsigned negation. Because the unsigned addition uses the modular addition.</strong></p><p>Modular addition, the unsigned addition , forms a mathematical structure known as an abelian group. This is, it has an identity element 0, and every element has an additive inverse. </p><p><strong>For every value x, there must be some negation, such than x + negation &#x3D; 0</strong></p><p>For x &gt; 0 , consider the value 2^w - x. We see that $(x + (2^w - x)) mod 2^w &#x3D; 0$. Hence it is the inverse of x under unsigned addition.</p><img src="https://i.imgur.com/1rdGBDo.png" style="zoom:80%;"><h3 id="Two’s-complement-addition"><a href="#Two’s-complement-addition" class="headerlink" title="Two’s complement addition"></a>Two’s complement addition</h3><img src="https://i.imgur.com/KkXbsGz.png" style="zoom:80%;"><img src="https://i.imgur.com/sFFpnGA.png" style="zoom:80%;"><p>Derivation:</p><p>Since the Two’s complement addition has the same bit-level representation as unsigned addition. We can characterize the operation Two’s complement addition as conversing its arguments to unsigned, and performing unsigned addition, and then converting back to two’s complement.</p><img src="https://i.imgur.com/1mtpDkZ.png" style="zoom:80%;"><h3 id="Two’s-complement-negation"><a href="#Two’s-complement-negation" class="headerlink" title="Two’s complement negation"></a>Two’s complement negation</h3><p>When x &#x3D; TMin, we cannot represent the negation of x, . Consider $TMin + TMin &#x3D;  -2^{w-1} + (-2^{w-1}) &#x3D; -2^w$. it will cause negative overflow of two’s complement addition. Hence $TMin + TMin &#x3D; -2^w mod 2^w &#x3D; 0$. So TMin is its own additive inverse.</p><p><img src="https://i.imgur.com/U0cxzuA.png"></p><h3 id="Multiplying-by-constants"><a href="#Multiplying-by-constants" class="headerlink" title="Multiplying by constants"></a>Multiplying by constants</h3><ul><li>If we want to multiply something by $2^k$, we just shift it left by k bit.</li></ul><img src="https://i.imgur.com/oW0v58o.png" style="zoom: 80%;"><p>Since the bit-level operation of fixed size two’s complement is equivalent to that for unsigned arithmetic. we just view it as two’s complement or unsigned after doing the operation. </p><ul><li><p>Multiplying by arbitrary constants</p><p>If we want to generating code for the expression $x * k$, for some constant k. We could construct the arbitrary constant k by adding the possible results of multiply something by 2^k. According to math, we know that $4x + 2x &#x3D; 6x$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//k=17</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&lt;&lt;<span class="number">4</span>)+x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//k=-7</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">B</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -(x&lt;&lt;<span class="number">3</span>) + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//k=60</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">C</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&lt;&lt;<span class="number">6</span>) - (x&lt;&lt;<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//k=-112</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">D</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> -(x&lt;&lt;<span class="number">7</span>) + (x&lt;&lt;<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> x = <span class="number">0x87654321</span>;</span><br><span class="line">  assert(A(x) == <span class="number">17</span> * x);</span><br><span class="line">  assert(B(x) == <span class="number">-7</span> * x);</span><br><span class="line">  assert(C(x) == <span class="number">60</span> * x);</span><br><span class="line">  assert(D(x) == <span class="number">-112</span> * x);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Dividing-by-powers-of-2"><a href="#Dividing-by-powers-of-2" class="headerlink" title="Dividing by powers of 2"></a>Dividing by powers of 2</h3><ul><li>If we want to divide something by $2^k$, we just shift it right by k bit.</li></ul><ol><li><p>Unsigned division by a power of 2</p><p>Performing a logical right shift of bit vector$$[x_{w-1}, x_{w-2}, … , x_0]$$ by k yields the bit vector$$[0, … , 0, x_{w-1}, x_{w-2}, … , w_k]$$</p><p><img src="https://i.imgur.com/WgYkWYL.png"></p></li><li><p>Two’s complement by a power of 2</p><p>Performing a arithmetically right shift of bit vector$$[x_{w-1}, x_{w-2}, … , x_0]$$ by k yields the bit vector$$[x_{w-1}, … , x_{w-1}, x_{w-2}, … , x_k]$$</p></li></ol><img src="https://i.imgur.com/YrcMtQB.png" style="zoom:80%;"><p>If we want to <strong>round it toward zero</strong> when x is negative, we just add a bias. </p><p>$$<br>bias &#x3D; (1 &lt;&lt; k) - 1<br>$$<br>So the expression is :</p><p>$$<br>(x + bias) &gt;&gt; k<br>$$</p><p><img src="https://i.imgur.com/sZEu7Ob.png"></p><ul><li><p>Summary, we use this function to complement rounding toward zero ,no matter if the number is positive or negative.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">divide_power2</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="type">int</span> is_neg = INT_MIN &amp; x;</span><br><span class="line">    <span class="type">int</span> bias = (<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//if is_neg is false, (x = x + (1 &lt;&lt; k) - 1) would not be execute</span></span><br><span class="line">    is_neg &amp;&amp; (x = x + bias);</span><br><span class="line">    <span class="keyword">return</span> x&gt;&gt;k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Floating-Point-Representation"><a href="#Floating-Point-Representation" class="headerlink" title="Floating-Point Representation"></a>Floating-Point Representation</h2><h3 id="Fractional-binary-representation"><a href="#Fractional-binary-representation" class="headerlink" title="Fractional binary representation"></a>Fractional binary representation</h3><ul><li>Position notation</li></ul><img src="https://i.imgur.com/BqxSmH5.png" style="zoom:80%;"><img src="https://i.imgur.com/DOl16Vt.png" style="zoom:80%;"><p>So we can do that: </p><ol><li>shifting the binary point one position to left has the effect of dividing the number by 2. </li><li>Similarly, shifting the binary point one position to right has the effect of multiplying the number by 2.</li></ol><p>This is the opposite of moving to right or left in bit vector. </p><h3 id="IEEE-Floating-Point-Representation"><a href="#IEEE-Floating-Point-Representation" class="headerlink" title="IEEE Floating-Point Representation"></a>IEEE Floating-Point Representation</h3><p>But the position notation would not be effect for representing a large number. For example, if we want to multiply a number by $2^100$, we need to shift the binary point 100 position to right. </p><p>Instead, we would like to represent numbers in a form $ x * 2^y $ by giving the value of x and y. IEEE Floating-Point standard represents a number in a from<br>$$<br>V &#x3D; (-1)^S * M * 2^E<br>$$</p><ul><li><p><code>s</code> is a sign bit. </p><p>s &#x3D; 1 represent negative. s &#x3D; 0 represent positive. </p></li><li><p><code>M</code> is a fractional binary number between 1 and 2-0 or between 0 and 1-0</p></li><li><p><code>E</code> weight the value by a power of 2.</p></li></ul><img src="https://i.imgur.com/5IU0RWl.png" style="zoom:80%;"><ul><li><code>exp</code> encodes the exponent E</li></ul><p>$$<br>e &#x3D; B2U(exp)<br>$$</p><ul><li><p><code>frac</code> encodes the significand M.<br>$$<br>0&lt;&#x3D;f&lt;1<br>$$<br>f has binary representation $0. f_{n-1}, …, f_1, f_0$</p></li><li><p>There are 4 cases of the float values that determined by the exponent.</p></li></ul><img src="https://i.imgur.com/tdaKvcp.png" style="zoom:67%;">$$Bias = 2^{k-1}-1$$<ol><li>Normalized Values</li></ol><p>$$<br>E &#x3D; e - Bias<br>$$</p><p>$$<br>M&#x3D;1+f<br>$$</p><ol start="2"><li><p>Denormalized Values<br>$$<br>E&#x3D;1-Bias<br>$$</p><p>$$<br>M&#x3D;f<br>$$</p></li></ol><ul><li><p>Example Numbers</p><p><img src="https://i.imgur.com/aSJ4G85.png"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的调用问题</title>
      <link href="/2020/10/10/fatal/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2020/10/10/fatal/%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title="Synopsis"></a>Synopsis</h1><p>先来看两个错误</p><ol><li><p>报错</p><p><code>&#39;insertList&#39; was not declared in this scope</code></p></li><li><p>修改没有加引用型&amp;的参数</p></li></ol><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><ol><li><p>第一个错误，显然是这个函数没有被定义。但我已经创建了呀！！这又是为什么呢？经过回忆，是因为在函数A调用函数B的时候，把函数A放在函数B的前面。又因为，程序是从上到下执行的，所以才会报错成未定义。</p></li><li><p>这个在修改参数中，经常用到。而且这是一个很常见又很严重的错误。因为参数的传递的将参数值复制过去另外一个块中。一开始学c的时候，用到了地址的传递（也就是传指针）。现在c++中修改参数，就不必再传指针了，不过要记得要改成引用型啊。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SqList</span></span><br><span class="line">&#123;  ElemType data[MAXSIZE];</span><br><span class="line">   <span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertList</span><span class="params">(SqList *sq,<span class="type">int</span> i,ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="type">int</span> j;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;sq-&gt; length <span class="number">-1</span>)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">&quot;\n The value of %d is wrong!\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sq-&gt; length &gt;= MAXSIZE)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">&quot;\n overflow!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=sq-&gt;length<span class="number">-1</span>;j&gt;=i;j--)</span><br><span class="line">sq-&gt;data[j<span class="number">+1</span>]=sq-&gt;data[j];</span><br><span class="line">sq-&gt;data[i]=x;</span><br><span class="line">sq-&gt;length++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deleteList</span><span class="params">(SqList *sq,<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;sq-&gt; length)</span><br><span class="line">&#123;<span class="built_in">printf</span>(<span class="string">&quot;\n the position is wrong!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i;i&lt;sq-&gt;length;i++)</span><br><span class="line">sq-&gt;data[i<span class="number">-1</span>]=sq-&gt;data[i];</span><br><span class="line">sq-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createList</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter the length of the list: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Enter &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; numbers: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        cin&gt;&gt;e;</span><br><span class="line">        L.data[i]=e;</span><br><span class="line">    &#125;</span><br><span class="line">    L.length=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter the index that needs to insert(start from 0): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter the data that needs to insert: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; j;</span><br><span class="line">    <span class="built_in">insertList</span>(&amp;L, i, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delet</span><span class="params">(SqList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Please enter the index that needs to delet(start from 0): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; i;</span><br><span class="line">    <span class="built_in">deleteList</span>(&amp;L, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;list: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; L.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; L.data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    ElemType i,j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">createList</span>(L);</span><br><span class="line">    <span class="built_in">print</span>(L);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>(L);</span><br><span class="line">    <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delet</span>(L);</span><br><span class="line">    <span class="built_in">print</span>(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&gt;0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fatal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux上配置v2ray</title>
      <link href="/2020/08/16/linux/linux%E4%B8%8A%E9%85%8D%E7%BD%AEv2ray/"/>
      <url>/2020/08/16/linux/linux%E4%B8%8A%E9%85%8D%E7%BD%AEv2ray/</url>
      
        <content type="html"><![CDATA[<h1 id="预备工作"><a href="#预备工作" class="headerlink" title="预备工作"></a>预备工作</h1><ol><li><p>客户端：<a href="https://github.com/Qv2ray/Qv2ray/releases/download/v1.99.6/Qv2ray-refs.tags.v1.99.6-linux.AppImage">Qv2ray-refs.tags.v1.99.6-linux.AppImage</a></p></li><li><p>v2ray核心文件：<a href="https://github.com/v2ray/v2ray-core/releases/download/v4.22.1/v2ray-linux-64.zip">v2ray-linux-64</a></p></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li><p>将v2ray的zip文件<code>unzip</code>解压。</p></li><li><p>运行客户端<code>sudo chmod +x ./Qv2ray-refs.tags.v1.99.6-linux.AppImage</code> + <code>./Qv2ray-refs.tags.v1.99.6-linux.AppImage</code></p></li><li><p>在preferences中配置v2ray的core executable path(可执行文件）和v2ray assets directory（解压出来的目录）<br><img src="https://i.imgur.com/GdpG72d.png"></p></li><li><p>set system proxy<br><img src="https://i.imgur.com/xruYZpU.png"></p></li><li><p>设置subscriptions</p></li><li><p>Connect and enjoy!</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可迭代的背包Bag</title>
      <link href="/2020/08/13/algorithm/%E5%8F%AF%E8%BF%AD%E4%BB%A3%E7%9A%84%E8%83%8C%E5%8C%85Bag/"/>
      <url>/2020/08/13/algorithm/%E5%8F%AF%E8%BF%AD%E4%BB%A3%E7%9A%84%E8%83%8C%E5%8C%85Bag/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li><p><strong>在集合数据类型中实现可迭代，需要引入Iterator接口</strong>（可迭代的接口）。<br><code>import java.util.Iterator</code></p></li><li><p>在类声明中添加<code>implements Iterable&lt;Item&gt;</code>（表面该类将会提供一个iterator（）方法）</p></li><li><p>该方法会返回一个Iterator对象，保证该类会实现方法hasNext(), next(), remove() &lt;- 循环链表的方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListIterator</span>();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> current != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> current.item;</span><br><span class="line">        current = current.next;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Bag, Queue, Stack，如果想要把这些集合的数据类型实现可迭代，要添加以上代码。</strong></li></ul><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;<span class="comment">//引用Iterator接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bag</span> &lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;&#123;<span class="comment">//保证该类提供iterator方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node first;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Item item)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">oldfriend</span> <span class="operator">=</span> first;</span><br><span class="line">first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">first.item = item;</span><br><span class="line">first.next = oldfriend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保证该类会实现方法hasNext(), next(), remove() &lt;- 循环链表的方法</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;<span class="comment">//iterator()方法返回一个Iterator对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListIterator</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> current != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> current.item;</span><br><span class="line">current = current.next;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue队列</title>
      <link href="/2020/08/13/algorithm/Queue/"/>
      <url>/2020/08/13/algorithm/Queue/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li>实例变量：指向队头的<code>first</code>, 指向队尾的<code>last</code>, 节点个数<code>N</code></li><li>方法：添加到对尾<code>enqueue()</code>，删除对头<code>dequeue()</code></li></ul><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    Item item;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="enqueue"><a href="#enqueue" class="headerlink" title="enqueue()"></a>enqueue()</h2><ul><li>如果链表为空，则要给first变量赋值（指向last）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">    last = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    last.item = item;</span><br><span class="line">    last.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())       <span class="comment">//考虑极端情况</span></span><br><span class="line">        first = last;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        oldlast.next = last;</span><br><span class="line">    N++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dequeue"><a href="#dequeue" class="headerlink" title="dequeue()"></a>dequeue()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">    first = first.next;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty())</span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    N--;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;Item&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> Node first; <span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> Node last;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> first == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">last = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">last.item = item;</span><br><span class="line">last.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())</span><br><span class="line">first = last;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">oldlast.next = last;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">first = first.next;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())</span><br><span class="line">last = <span class="literal">null</span>;</span><br><span class="line">N--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line"><span class="keyword">if</span>(!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">q.enqueue(item);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!q.isEmpty())</span><br><span class="line">StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的链表实现</title>
      <link href="/2020/08/08/algorithm/%E6%A0%88%E7%9A%84%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/08/08/algorithm/%E6%A0%88%E7%9A%84%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>java中链表的实现，除了不需要释放没用的结点之外，与C的实现相同。</p><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="用嵌套类来声明结点。"><a href="#用嵌套类来声明结点。" class="headerlink" title="用嵌套类来声明结点。"></a>用嵌套类来声明结点。</h2><ul><li>需要表明next（下一结点）和item（该节点的值）。在需要使用该类的时候，标记为private</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造链表"><a href="#构造链表" class="headerlink" title="构造链表"></a>构造链表</h2><ul><li><p><strong>根据递归的定义，只要一个Node类型就能表示整条链表</strong>因为节点就是一个对象，我们就用new来创建它，<code>Node first = new Node();</code>。 然后，再定义Node里面的值，<code>first.item = &quot;to&quot; first.next = second</code></p></li><li><p>而Stack类的实例变量就是创建Node的引用，然后再从实例中创建它</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;Item&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Node first; <span class="comment">//实例变量创建引用，没有用new新建对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> N;</span><br></pre></td></tr></table></figure><h2 id="增加删除表头结点"><a href="#增加删除表头结点" class="headerlink" title="增加删除表头结点"></a>增加删除表头结点</h2><ul><li><strong>因我们是用链表实现栈，栈是除了最上面的元素first，其它都不要动。所以我们不需要遍历链表就能实现push()和pop()的方法</strong><br><img src="https://i.imgur.com/Q4a4EtW.png"></li></ul><h2 id="表尾删除节点"><a href="#表尾删除节点" class="headerlink" title="表尾删除节点"></a>表尾删除节点</h2><ul><li>如果要遍历链表那么效率太低了， 所以采用一种方法：再创建个已知节点<code>Node last = new Node();</code><br><img src="https://i.imgur.com/4ITjhpk.png"></li></ul><h2 id="增加删除指定节点"><a href="#增加删除指定节点" class="headerlink" title="增加删除指定节点"></a>增加删除指定节点</h2><ul><li>唯一方法就是遍历链表，如果要减少时间的复杂度，即采用<strong>双向链表</strong>。</li></ul><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;Item&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> Node first; <span class="comment">//实例变量创建引用，没有用new新建对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> first == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Item item)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">first.next = oldfirst;</span><br><span class="line">first.item = item;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">first = first.next;</span><br><span class="line">N--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>test</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Stack&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">while</span>(!StdIn.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line"><span class="keyword">if</span>(!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">s.push(item);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!s.isEmpty())</span><br><span class="line">StdOut.print(s.pop() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">StdOut.println(<span class="string">&quot;(&quot;</span> + s.size() + <span class="string">&quot; left on stack)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下压栈</title>
      <link href="/2020/08/07/algorithm/%E4%B8%8B%E5%8E%8B%E6%A0%88/"/>
      <url>/2020/08/07/algorithm/%E4%B8%8B%E5%8E%8B%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>栈的实现需要先了解几个背景：内存管理，接口继承，对象游离。</p><ul><li>tip：<br>引用：相当于存储对象的变量</li></ul><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>java使得<strong>引用不可修改</strong>，而相对于其它语言来说增加了一条特性：<strong>自动内存管理</strong></p><ol><li>当引用a被覆盖时，那么引用a原来指向的对象就成了孤儿，就会被回收。</li><li>当对象离开作用域后也会被回收。</li></ol><ul><li>例如：</li></ul><figure class="highlight java"><figcaption><span>动态数组</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    Item[] temp = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[max];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        temp[i] = a[i];</span><br><span class="line">    a = temp; <span class="comment">//让a指向了新数组，原来的a指向数组就成了孤儿。temp引用也会被回收。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象游离"><a href="#对象游离" class="headerlink" title="对象游离"></a>对象游离</h2><p>实现栈，<strong>主要的情景是：栈是占用使用数组的空间的</strong>。<br>当我们应用<code>pop()</code>的实现中，弹出的元素仍然在数组中。而java的自动内存管理是针对那些再也无法被引用的对象的内存，所有回收不到这些pop出去的元素。所以，就要采取一种方法：<strong>将元素的引用 设置为null</strong>，这将覆盖该引用，并使系统在用例用完后回收元素的内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> a[--N];</span><br><span class="line">    a[N] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(N &gt; <span class="number">0</span> &amp;&amp; N == a.length / <span class="number">4</span>)</span><br><span class="line">        resize(a.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h1><ul><li>一个类通过继承接口的方式，从而来继承接口的抽象方法。</li><li><strong>接口并不是类</strong>，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</li></ul><h2 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h2><ul><li><p>关键字：interface<br><code>public[可见度] interface /*name*/ ([extends other name])&#123;&#125;</code></p></li><li><p>编写方法</p></li></ul><figure class="highlight java"><figcaption><span>接口(迭代)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><ul><li>关键字：implements</li></ul><p><code>...implements /*name*/[, 其他接口名称, 其他接口名称..., ...] ..</code></p><figure class="highlight java"><figcaption><span>在其它类中实现接口</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResizingArrayStack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;&#123;</span><br></pre></td></tr></table></figure><ul><li>在该类中即可应用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReverseArrayIterator</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a[--i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><figure class="highlight java"><figcaption><span>LIFO栈（动态数组）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResizingArrayStack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Item[] a = (Item[])<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];<span class="comment">//栈元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//元素数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">Item[] temp = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[max];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">temp[i] = a[i];</span><br><span class="line">a = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Item item)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(N == a.length)</span><br><span class="line">resize(<span class="number">2</span> * a.length);</span><br><span class="line">a[N++] = item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> a[--N];</span><br><span class="line">a[N] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(N &gt; <span class="number">0</span> &amp;&amp; N == a.length / <span class="number">4</span>)</span><br><span class="line">resize(a.length / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReverseArrayIterator</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a[--i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>用例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdIn;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">ResizingArrayStack&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">ResizingArrayStack</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">while</span>(!StdIn.isEmpty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line"><span class="keyword">if</span>(!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">s.push(item);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!s.isEmpty())</span><br><span class="line">StdOut.print(s.pop() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">StdOut.println(<span class="string">&quot;(&quot;</span> + s.size() + <span class="string">&quot; left on stack)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BinarySearch</title>
      <link href="/2020/08/05/algorithm/BinarySearch/"/>
      <url>/2020/08/05/algorithm/BinarySearch/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>二分查找法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Find the number by changing the hight limit and lower limmit of the array. </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">rank</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span>[] a, Counter n)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line"><span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lo &lt;= hi)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">n.increment();</span><br><span class="line"><span class="keyword">if</span>(key &lt; a[mid])</span><br><span class="line">hi = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(key &gt; a[mid])</span><br><span class="line">lo = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Print the number of the key that the whitelist has not.</span></span><br><span class="line"><span class="type">int</span>[] whitelist = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">25</span>, <span class="number">11</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] key = &#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="type">Counter</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counter</span>(<span class="string">&quot;n&quot;</span>);</span><br><span class="line"></span><br><span class="line">Arrays.sort(whitelist);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(rank(key[i], whitelist, n) == -<span class="number">1</span>)</span><br><span class="line">System.out.println(key[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;the check times is : &quot;</span> + n.tally());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象数据类型的实现</title>
      <link href="/2020/08/04/algorithm/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/08/04/algorithm/%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Firstly，需要有对象的知识才能运用抽象数据的实现来实现代码。<strong>对象有三大性质：状态（实例变量），标识（构造函数），行为（实例方法）</strong>。</p><p><img src="https://i.imgur.com/FftPPHG.png"> <a href="%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9E%E7%8E%B0.md">抽象数据类型的实现.md</a> </p><h1 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h1><h2 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h2><p>即该<strong>数据类型的值</strong>，就像<code>int who = 0;</code></p><ul><li><code>final</code>这个关键字是指该值初始话后不会再改变。</li><li>因为根据java的定义，要用<code>private</code>来修饰它，如果用<code>public</code>那么这种数据类型将不会被看成是抽象的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> count;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p><strong>它的作用是初始化实例变量，没有返回指定的返回值类型，但它返回对象的引用（就是拿来创建对象，所以它的名字和类名相同）</strong></p><ul><li>这里的构造函数只定义了name(一个实例变量）没有定义count（另外的实例变量）。那么这些值将会变成是默认的。<br><strong>默认的：原始数据类型为0，布尔类型为false，引用类型变量为null</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Counter</span><span class="params">(String id)</span><span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    name = id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果连构造函数都没有呢? 这种情况，类将会隐式定义一个（不仅是参数的构造方法，并将所有实例变量初始化为默认值</li></ul><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><p><strong>通过这些方法来操作该对象中的实例变量，而不是直接修改变量的值。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据类型中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main中</span></span><br><span class="line">heads.increment();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/2020/05/30/DS/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2020/05/30/DS/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Minimum-Spanning-Tree"><a href="#Minimum-Spanning-Tree" class="headerlink" title="Minimum Spanning　Tree"></a>Minimum Spanning　Tree</h1><ol><li>若图中有v个顶点，那么将生成v-1条边</li><li>这棵树包含了全部的顶点</li><li>不能有回路，且向树添加一条边就有回路</li><li>图连通&lt;&#x3D;&gt;最小生成树存在</li><li>不唯一</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的遍历</title>
      <link href="/2020/05/28/DS/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2020/05/28/DS/%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Depth-First-Search"><a href="#Depth-First-Search" class="headerlink" title="Depth_First_Search"></a>Depth_First_Search</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol><li><p>从某个顶点v1出发，然后找到并访问与v1的邻接点（且从未访问过）v2，再从v2出发访问与v2相邻的顶点。–&gt;<strong>这就是递归思想</strong></p></li><li><p>直到所有的顶点被访问到。</p></li></ol><ul><li>因为要记录该点是否被访问过，所以需要一个数组<code>bool visited[MAXVEX];</code></li></ul><p><img src="https://i.loli.net/2020/05/28/CNcEdp2P1g5K3aJ.png"></p><h2 id="邻接矩阵遍历"><a href="#邻接矩阵遍历" class="headerlink" title="邻接矩阵遍历"></a>邻接矩阵遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(MGraph G, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    visited[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, G.vexs[i]);</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; G.numVertexs; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//有边(i--j)，且 j 顶点没被访问</span></span><br><span class="line">        <span class="keyword">if</span>(G.arc[i][j] == <span class="number">1</span> &amp;&amp; visited[j] == <span class="literal">false</span>)</span><br><span class="line">            DFS(G, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(MGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G.numVertexs; i++)</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G.numVertexs; i++)</span><br><span class="line">        <span class="keyword">if</span>(visited[i] == <span class="literal">false</span>)</span><br><span class="line">            DFS(G, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="邻接表遍历"><a href="#邻接表遍历" class="headerlink" title="邻接表遍历"></a>邻接表遍历</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(GraphAdjList *G, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    EdgeNode *p;</span><br><span class="line">    visited[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, G-&gt;adjList[i].data);</span><br><span class="line">    p = G-&gt;adjList[i].firstedge;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[p-&gt;adjvex])</span><br><span class="line">            DFS(G, p-&gt;adjvex);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(GraphAdjList *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;numVertexs; i++)</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;numVertexs; i++)</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            DFS(G, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>对比邻接矩阵和邻接表的遍历过程，可容易得出<br>假如n个顶点，e条边</li></ul><ol><li>邻接矩阵：$O(n^2)$</li><li>邻接表：$O(n + e)$</li></ol><ul><li>所以，对于<strong>多顶点少边</strong>的这种情况，邻接表不但节省了空间，还提高了函数的运行效率</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的存储结构</title>
      <link href="/2020/05/26/DS/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2020/05/26/DS/%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于图的多方向性，不能用顺序存储结构来实现。如果我用多重链表的话，那么结构中的多个指针就会造成空间资源的浪费（因为图的顶点上的度是不确定的）。因此图的存储结构，不应该使用物理存储去实现。图的实现被提供了5种存储结构。1. 邻接矩阵 2.邻链表 3.十字链表 4. 邻接多重链表 5. 边集数组。</p><h1 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h1><p><strong>由顶点数组（一维）和边或弧数组（二维）组成</strong></p><h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><p><img src="https://i.loli.net/2020/05/26/SvO6QgncdNYkEez.png"></p><ol><li><p>例如<br><code>a[i][j]</code>的0，1值表示，<strong>从i–j这个edge是否存在，1存在，0不存在</strong>。<br>所以类似于<code>a[i][i]</code>这样的顶点到顶点的值都为0</p></li><li><p>无向图的边数组是一个<strong>对称矩阵</strong>，即满足<code>a[i][j] == a[j][i]</code><br>因为它是无向的，i–j不存在，则j–i也不存在。那么i–j存在，则，j–i也存在啊<br>所以，<strong>在无向图中<code>a[i][j]</code>和<code>a[j][i]</code>无区别</strong></p></li><li><p>Vi的<em>度</em>就是把第i行（或列）的元素加起来</p></li></ol><h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><p><img src="https://i.loli.net/2020/05/26/dAbn2vwRO4oimHV.png"></p><ol><li><p><strong>有向图就不是对称矩阵了</strong>。因为它们顶点的指向是有方向的，i–&gt;j不一定j–&gt;i。</p></li><li><p>出度和入度。有向图中，要研究这两个。只要知道前面的指向问题，就可以知道。<strong>Vi的出度是看矩阵中的行<code>a[i]--[]</code>，Vi的入度是看矩阵中的列<code>a[]--[i]</code>。将行或列加起来就是出度和入度的值了</strong>。</p></li></ol><h2 id="网Network"><a href="#网Network" class="headerlink" title="网Network"></a>网Network</h2><p><strong>网就是每条edge上带有权的图</strong></p><ol><li>矩阵上的值<br><img src="https://i.loli.net/2020/05/26/6CbIFjnAK2Vc73m.png"></li></ol><p><img src="https://i.loli.net/2020/05/26/pCIuSRf2jNeP1Mc.png"></p><h2 id="无向图的创建"><a href="#无向图的创建" class="headerlink" title="无向图的创建"></a>无向图的创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Graph_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;<span class="comment">//顶点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;<span class="comment">//边上的权类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXVEX 100 <span class="comment">//最大顶点数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFINITY 65535 <span class="comment">//用65535代表无穷大</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> visited[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType vexs[MAXVEX]; <span class="comment">//顶点表</span></span><br><span class="line">    EdgeType arc[MAXVEX][MAXVEX];<span class="comment">//邻接矩阵，</span></span><br><span class="line">    <span class="type">int</span> numVertexs, numEldge;<span class="comment">//顶点数，边数</span></span><br><span class="line">&#125;MGraph;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateMGraph</span><span class="params">(MGraph *G)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(MGraph G, <span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(MGraph G)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graph.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateMGraph</span><span class="params">(MGraph *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k, w;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the number of Vertexs and edge:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;G-&gt;numVertexs, &amp;G-&gt;numEldge);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the information of Vertexs array:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;numVertexs; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;G-&gt;vexs[i]);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;numEldge; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; G-&gt;numEldge; j++)</span><br><span class="line">            G-&gt;arc[i][j] = MAXVEX;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; G-&gt;numEldge; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter double dimensional array indexs and weight of the edges:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;i, &amp;j, &amp;w);</span><br><span class="line">        G-&gt;arc[i][j] = w;</span><br><span class="line">        G-&gt;arc[j][i] = G-&gt;arc[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h1><p>邻接矩阵如果要处理<strong>顶点很多，而边很少</strong>的图那么会造成空间的浪费。所以，引入邻接表来避免这种现象发生。</p><ol><li>结构数组。每个数组的元素是代表<strong>每个顶点</strong>。每个结构包含<strong>链表节点指针（firstedge），每个顶点类型（data(V1 ，V2))</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span>        //顶点表节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    EdgeNode *firstedge;</span><br><span class="line">&#125;VertexNode, AdjList[MAXVEX];</span><br></pre></td></tr></table></figure><ol start="2"><li>链表。每个节点包含<strong>顶点下标值（i（Vi）)，权值，指向下一个节点点指针（next）</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>         //边表节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> adjvex;<span class="comment">//邻接点域，用于存储对应顶点下标</span></span><br><span class="line">    EdgeType weight;<span class="comment">//用于存储权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br></pre></td></tr></table></figure><ul><li>然鹅，如果是面对有向图的话，因为弧有方向，所以有出度和入度。这样一来，这个邻接表，又可以分为两种。<strong>以弧头为链表的头（邻接表方便计算出度），以弧尾为链表的表头（逆邻接表方便计算入度）</strong>。</li></ul><p><img src="https://i.loli.net/2020/05/27/3wQb2mRrT1C7iof.png"></p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _List_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXVEX 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>         //边表节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> adjvex;<span class="comment">//邻接点域，用于存储对应顶点下标</span></span><br><span class="line">    EdgeType weight;<span class="comment">//用于存储权值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span>        //顶点表节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType data;</span><br><span class="line">    EdgeNode *firstedge;</span><br><span class="line">&#125;VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>              //整个邻接表</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    AdjList adjList;</span><br><span class="line">    <span class="type">int</span> numVertexs, numEdges;</span><br><span class="line">&#125;GraphAdjList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateAdjList</span><span class="params">(GraphAdjList *G)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateAdjList</span><span class="params">(GraphAdjList *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    EdgeNode *e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the number of Vertexs and edges:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;G-&gt;numVertexs, &amp;G-&gt;numEdges);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the elements of Vertexs List:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; G-&gt;numVertexs; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;G-&gt;adjList[i].data);</span><br><span class="line">        G-&gt;adjList[i].firstedge = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; G-&gt;numEdges; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter the value of i and j with the edge(Vi,Vj):&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;i, &amp;j);</span><br><span class="line">        <span class="comment">//生成节点Vj</span></span><br><span class="line">        e = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        e-&gt;adjvex = j;</span><br><span class="line">        <span class="comment">//头插法</span></span><br><span class="line">        e-&gt;next = G-&gt;adjList[i].firstedge;<span class="comment">//将e指针指向当前顶点指向的节点</span></span><br><span class="line">        G-&gt;adjList[i].firstedge = e;<span class="comment">//将当前顶点指针指向e</span></span><br><span class="line">        <span class="comment">//生成节点Vi</span></span><br><span class="line">        e = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">        e-&gt;adjvex = i;</span><br><span class="line">        e-&gt;next = G-&gt;adjList[i].firstedge;</span><br><span class="line">        G-&gt;adjList[j].firstedge = e;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h1><p>因为邻接表容易解决出度情况，要想了解入度就要遍历整个表才能知道。而逆邻接表也有这个情况。如果我们想要将两者的优势互补，就引入了十字链表。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉查找树</title>
      <link href="/2020/05/23/DS/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
      <url>/2020/05/23/DS/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>二叉查找树的插入，删除等操作上都运用了递归来实现。首先，需要了解递归在执行递归调用之后的语句要以之前保存的变量反方向执行。</p><h1 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h1><p><img src="/2020/05/23/DS/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/1.png"><br><strong>这里的if-else看成一块，而return看成另一块。</strong></p><ol><li><p>每次插入会比较节点的大小，<strong>大的return右孩子，小的return左孩子，直到找的到孩子为NULL就创建节点</strong><br><code>T-&gt;Left = Insert(X, T-&gt;Left);T-&gt;Right = Insert(X, T-&gt;Right);</code></p></li><li><p><strong>如果，我们传入根节点</strong>，那么递归调用之前的语句被执行后，均按被调函数相反的顺序执行。所以，<strong>最后会传回根节点</strong>。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">SearchTree <span class="title function_">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Create and return a one-node tree */</span></span><br><span class="line">        T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">        <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">            Error(<span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;e = X;</span><br><span class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;e)</span><br><span class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;e)</span><br><span class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h1><p><img src="https://i.loli.net/2020/05/23/CVDcJPkl7s4GWQv.png"></p><h2 id="main-idea"><a href="#main-idea" class="headerlink" title="main idea"></a>main idea</h2><ol><li>节点N只有一个儿子（或没有儿子）<br>查找N。TmpCell记录N，将N的节点指向N的唯一一个儿子（或NULL），再free掉TmpCell</li><li>N有两个儿子<br>查找N。将N-&gt;e &#x3D; (N的右子树中最小的e)。<br>再查找那个最小的e，free掉（即删除N只有一个儿子的操作）。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">SearchTree <span class="title function_">Delete</span><span class="params">(ElementType X, SearchTree T)</span>。</span><br><span class="line">&#123;</span><br><span class="line">    Position TmpCell;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">&quot;Element not found&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;e)</span><br><span class="line">        T-&gt;Left = Delete(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;e)</span><br><span class="line">        T-&gt;Right = Delete(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left &amp;&amp; T-&gt;Right)<span class="comment">/* two children */</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = FindMin(T-&gt;Right);</span><br><span class="line">        T-&gt;e = TmpCell-&gt;e;</span><br><span class="line">        T-&gt;Right = Delete(T-&gt;e, T-&gt;Right);<span class="comment">//T-&gt;Right = Delete的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">/* One or zero children */</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = T;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(TmpCell);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Search-Tree"><a href="#Search-Tree" class="headerlink" title="Search Tree"></a>Search Tree</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Tree_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Error(str) fprintf(stderr, <span class="string">&quot;%s\n&quot;</span>, str),exit(1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">SearchTree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType e;</span><br><span class="line">    SearchTree Left;</span><br><span class="line">    SearchTree Right;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line">SearchTree <span class="title function_">MakeEmpty</span><span class="params">(SearchTree T)</span>;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">(ElementType X, SearchTree T)</span>;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">(SearchTree T)</span>;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">(SearchTree T)</span>;</span><br><span class="line"></span><br><span class="line">SearchTree <span class="title function_">Insert</span><span class="params">(ElementType X, SearchTree T)</span>;</span><br><span class="line"></span><br><span class="line">SearchTree <span class="title function_">Delete</span><span class="params">(ElementType X, SearchTree T)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tree.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">SearchTree <span class="title function_">MakeEmpty</span><span class="params">(SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MakeEmpty(T-&gt;Left);</span><br><span class="line">        MakeEmpty(T-&gt;Right);</span><br><span class="line">        <span class="built_in">free</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">(ElementType X, SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;e)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;e)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">(SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(T-&gt;Left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">(SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">while</span> (T-&gt;Right != <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SearchTree <span class="title function_">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Create and return a one-node tree */</span></span><br><span class="line">        T = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">        <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">            Error(<span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;e = X;</span><br><span class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;e)</span><br><span class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;e)</span><br><span class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SearchTree <span class="title function_">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position TmpCell;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">&quot;Element not found&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;e)</span><br><span class="line">        T-&gt;Left = Delete(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;e)</span><br><span class="line">        T-&gt;Right = Delete(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left &amp;&amp; T-&gt;Right)</span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = FindMin(T-&gt;Right);</span><br><span class="line">        T-&gt;e = TmpCell-&gt;e;</span><br><span class="line">        T-&gt;Right = Delete(T-&gt;e, T-&gt;Right);<span class="comment">//T-&gt;Right = Delete的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = T;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(TmpCell);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="/2020/05/22/fatal/%E6%8C%87%E9%92%88/"/>
      <url>/2020/05/22/fatal/%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="不要使用没初始化的指针"><a href="#不要使用没初始化的指针" class="headerlink" title="不要使用没初始化的指针"></a>不要使用没初始化的指针</h1><p>即<strong>只能使用指向已经分配空间的指针</strong>。否则可能会擦拭掉数据或代码。</p><figure class="highlight c"><figcaption><span>可以，因为第二行就让指针指向字符串ferry</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str;</span><br><span class="line">str = <span class="string">&quot;ferry&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>不可以，scanf（）是把信息拷贝到指定的地址上</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>不可以，跟上面情况一样，不要解引用未初始化的指针</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a;</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h1 id="时刻记得指针指向的地址（位置）"><a href="#时刻记得指针指向的地址（位置）" class="headerlink" title="时刻记得指针指向的地址（位置）"></a><strong>时刻记得指针指向的地址（位置）</strong></h1><p>当我们用指针遍历数组的时候，遍历完以后就已经不再指向数组首元素地址了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *i;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">i = arr;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fatal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2020/05/17/c/%E9%80%92%E5%BD%92/"/>
      <url>/2020/05/17/c/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h1><p>Recursion</p><p>the process of repeating a function, each time applying it to the result of the previous stage.</p><p>​<img src="https://i.imgur.com/z6KjqPX.png"></p><ul><li><strong>经过树形结构，和嵌套结构后的思想：可像数学函数一样，一个个嵌套，完美解决递归</strong></li></ul><figure class="highlight c"><figcaption><span>演示递归 debug</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* recur.c -- recursion illustration */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">up_and_down</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    up_and_down(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">up_and_down</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Level %d: n location %p\n&quot;</span>, n, &amp;n); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">4</span>)</span><br><span class="line">        up_and_down(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LEVEL %d: n location %p\n&quot;</span>, n, &amp;n); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>output</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Level 1: n location 000000000061FE00</span><br><span class="line">Level 2: n location 000000000061FDD0</span><br><span class="line">Level 3: n location 000000000061FDA0</span><br><span class="line">Level 4: n location 000000000061FD70</span><br><span class="line">LEVEL 4: n location 000000000061FD70</span><br><span class="line">LEVEL 3: n location 000000000061FDA0</span><br><span class="line">LEVEL 2: n location 000000000061FDD0</span><br><span class="line">LEVEL 1: n location 000000000061FE00</span><br></pre></td></tr></table></figure><h1 id="递归工作栈"><a href="#递归工作栈" class="headerlink" title="递归工作栈"></a>递归工作栈</h1><p>从上述可以看出，函数调用属于<strong>后调用先返回</strong>的过程。那么，符合栈的性质。所以，每当调用一个函数，系统就为这个函数在栈顶中分配空间，但函数返回就出栈，释放空间。存储区里包括：所有实参，局部变量，返回值。</p><h1 id="函数思想解决简单递归"><a href="#函数思想解决简单递归" class="headerlink" title="函数思想解决简单递归"></a>函数思想解决简单递归</h1><ol><li>G(10)</li><li>G(9) + 10</li><li>G(8) + 9 + 10<br>….</li></ol><ul><li><strong>思想可以联系树的递归遍历作图，将前后节点（函数）合并得到</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GrowWordNumber</span><span class="params">(<span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GrowWordNumber(d - <span class="number">1</span>) + d;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = GrowWordNumber(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归和循环"><a href="#递归和循环" class="headerlink" title="递归和循环"></a>递归和循环</h1><ul><li><p>每次递归都会创建一组变量 <strong>（函数的参数）</strong>，所以占用的内存会更多，而且数量有限，因为这些<strong>参数存放在栈区</strong></p></li><li><p>尾递归<br>即递归函数中被调函数是最后一条语句，所以根据递归的思想，它相当于循环。如果不是尾递归，则不能用简单的循环实现</p></li></ul><h2 id="递归和倒序输出"><a href="#递归和倒序输出" class="headerlink" title="递归和倒序输出"></a>递归和倒序输出</h2><ul><li>这种情况就体现到递归的好处</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* binary.c -- prints integer in binary form */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">to_binary</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> number;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter an integer (q to quit):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lu&quot;</span>, &amp;number) == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Binary equivalent: &quot;</span>);</span><br><span class="line">        to_binary(number);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter an integer (q to quit):\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Done.\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">to_binary</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> n)</span>   <span class="comment">/* recursive function */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    </span><br><span class="line">    r = n % <span class="number">2</span>;  <span class="comment">//看成二进制，取最后一位数</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2</span>)</span><br><span class="line">        to_binary(n / <span class="number">2</span>);<span class="comment">//看成二进制，小数点前移</span></span><br><span class="line">     <span class="built_in">putchar</span>(r == <span class="number">0</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>hanoi汉诺塔</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> one, <span class="type">char</span> two, <span class="type">char</span> three)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c -&gt; %c\n&quot;</span>, one, three);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hanoi(n<span class="number">-1</span>, one, three, two);<span class="comment">//（排除最后一个）直到只剩下一个的时候，移动</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, one, three);<span class="comment">//移动最后一个</span></span><br><span class="line">        hanoi(n<span class="number">-1</span>, two, one, three);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>;</span><br><span class="line">    hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历二叉树</title>
      <link href="/2020/05/17/DS/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/05/17/DS/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>二叉树的遍历是<strong>从根节点出发</strong>，按照某几种不同的顺序遍历每个节点，使得<strong>每个节点被遍历仅一遍。</strong><br>这些遍历方法分为：1. 前序遍历2. 中序遍历3. 后序遍历4. 层序遍历<br>规则：若树为空(<code>T == NULL</code>)，则空操作返回(<code>return</code>)，否则执行访问（递归）</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="如何看待遍历顺序？"><a href="#如何看待遍历顺序？" class="headerlink" title="如何看待遍历顺序？"></a>如何看待遍历顺序？</h2><p>![(<a href="https://i.loli.net/2020/05/19/1W6rsVNP9hJubB8.png">https://i.loli.net/2020/05/19/1W6rsVNP9hJubB8.png</a>)</p><p>这张图已经完美说明了。首先，把这颗树<strong>加上空节点看成是完全二叉树，然后就它们的孩子嵌套并于括号括起来。</strong></p><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><ul><li>打印顺序：父母。左子孙。右子孙。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrderTraverse</span><span class="params">(Tree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;e);</span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/17/e69aX7fGvbMLBj8.png"></p><h2 id="中顺遍历"><a href="#中顺遍历" class="headerlink" title="中顺遍历"></a>中顺遍历</h2><ul><li>打印顺序：左子孙。父母。右子孙。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraverse</span><span class="params">(Tree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;e);</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/17/CLJFXizmuwxsVRW.png"></p><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><ul><li>打印顺序：左子孙。右子孙。父母。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrderTraverse</span><span class="params">(Tree T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">    PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, T-&gt;e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/17/JrbB5MT4O7ylUI1.png"></p><h2 id="两个二叉树遍历性质"><a href="#两个二叉树遍历性质" class="headerlink" title="两个二叉树遍历性质"></a>两个二叉树遍历性质</h2><ol><li><p>已知<strong>前序后序不能等到中序，也不能得到完整的二叉树</strong></p></li><li><p>已知前序中序or中序后序能得到完整的二叉树。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的存储结构</title>
      <link href="/2020/05/17/DS/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2020/05/17/DS/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>二叉树也有顺序存储结构和链式存储结构。由于二叉树是一种特殊的树，所以也可以通过顺序存储结构来实现。因为是顺序存储结构，所以要用数组来实现。</p><h1 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h1><ul><li><p>存放数据的区域（数组），而且数组的下标也要体现节点间的逻辑关系。</p></li><li><p>数组的大小要定义为完全二叉树的大小。当中某些节点有可能是为空的，所以顺序存储结构一般只用于完全二叉树，否则会造成空间的浪费。<br><img src="https://i.loli.net/2020/05/17/1bQJupvKSM2sqa6.png"></p></li></ul><h1 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h1><p>既然顺序存储结构的适用性不强，所以将引入二叉链表。它一般被分为两个区域——数据区和指向左右孩子的指针区。然而它还可以在指针区增加一个指针来指向父母。</p><p><img src="https://i.loli.net/2020/05/17/vqMor4FReGQOnjg.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Tree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType e;</span><br><span class="line">    PtrToNode lchild, rchild;</span><br><span class="line">&#125;Node</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&amp;&amp;||的记忆与短路</title>
      <link href="/2020/05/15/c/%E7%9F%AD%E8%B7%AF/"/>
      <url>/2020/05/15/c/%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>||<br>&#x3D;&#x3D;&#x3D;</p><ul><li><p>A||B</p></li><li><p>记忆<strong>如果当A与B都是false才false，其余都是true（只有1个假）</strong></p></li><li><p>短路<br>如果<code>||</code>的左侧表达式为真，则不会执行右侧表达式。</p></li></ul><h1 id><a href="#" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h1><ul><li><p>A&amp;&amp;B</p></li><li><p>记忆<strong>如果当A与B都为true才true，其余都是false（只有1个真）</strong></p></li><li><p>短路<br>如果<code>&amp;&amp;</code>的左侧表达式为假，则不会执行右侧表达式。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链队列</title>
      <link href="/2020/05/12/DS/%E9%93%BE%E9%98%9F%E5%88%97/"/>
      <url>/2020/05/12/DS/%E9%93%BE%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链队列就是限制了只能在首端和尾端进行插入，删除操作的表。</p><ul><li><p>链队列中需要头节点</p></li><li><p>实现它需要声明两个结构。QNode存储某一项的数据，和指向下一项的结构指针。<br>ListQueue存储指向头节点和尾节点的结构指针。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode, *QNodePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QNodePtr front, rear;</span><br><span class="line">&#125;ListQueue, *ListQueuePtr;</span><br></pre></td></tr></table></figure><ul><li><em>空队列判断条件</em> <strong>front和rear同时指向头节点</strong><br><img src="https://i.loli.net/2020/05/12/2BYA6lxZKWODkNw.png"></li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(ListQueuePtr Q, ElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    QNodePtr P = (QNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="keyword">if</span>(P == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    P-&gt;data = e;</span><br><span class="line">    P-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q-&gt;rear-&gt;next = P;<span class="comment">//连接一下后续节点（P）</span></span><br><span class="line">    Q-&gt;rear = P;<span class="comment">//让rear指向最后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(ListQueuePtr Q, ElementType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    QNodePtr P;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The queue is empty.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    P = Q-&gt;front-&gt;next;</span><br><span class="line">    *e = P-&gt;data;</span><br><span class="line">    Q-&gt;front-&gt;next = P-&gt;next;<span class="comment">//即将front的下一个节点，指向front的下下个</span></span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear == P)<span class="comment">//如果只剩下一个节点，就让rear = front</span></span><br><span class="line">        Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    <span class="built_in">free</span>(P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _l_queue_h_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode, *QNodePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    QNodePtr front, rear;</span><br><span class="line">&#125;ListQueue, *ListQueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(ListQueuePtr Q)</span>;</span><br><span class="line"><span class="comment">//将元素插入队列最后</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(ListQueuePtr Q, ElementType e)</span>;</span><br><span class="line"><span class="comment">//删除第一个元素（头节点的后一个）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(ListQueuePtr Q, ElementType *e)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(ListQueuePtr Q)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l_queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(ListQueue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    Q-&gt;front = Q-&gt;rear = (QNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(ListQueuePtr Q, ElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    QNodePtr P = (QNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="keyword">if</span>(P == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    P-&gt;data = e;</span><br><span class="line">    P-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q-&gt;rear-&gt;next = P;<span class="comment">//连接一下后续节点（P）</span></span><br><span class="line">    Q-&gt;rear = P;<span class="comment">//让rear指向最后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(ListQueuePtr Q, ElementType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    QNodePtr P;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The queue is empty.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    P = Q-&gt;front-&gt;next;</span><br><span class="line">    *e = P-&gt;data;</span><br><span class="line">    Q-&gt;front-&gt;next = P-&gt;next;<span class="comment">//即将front的下一个节点，指向front的下下个</span></span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear == P)<span class="comment">//如果只剩下一个节点，就让rear = front</span></span><br><span class="line">        Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    <span class="built_in">free</span>(P);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(ListQueuePtr Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    QNodePtr P = (QNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    P = Q-&gt;front-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (P != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, P-&gt;data);</span><br><span class="line">        P = P-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;l_queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ListQueue Q;<span class="comment">//定义一个结构</span></span><br><span class="line">    InitQueue(&amp;Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        EnQueue(&amp;Q, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> *e;</span><br><span class="line">    DeQueue(&amp;Q, e);</span><br><span class="line">    Traverse(&amp;Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序队列</title>
      <link href="/2020/05/12/DS/%E9%98%9F%E5%88%97/"/>
      <url>/2020/05/12/DS/%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>队列也是一种表。它把线性表限制了<strong>只能在第一项删除和最后一项添加数据</strong>。由此，它的结构–</p><ul><li>指向头和尾的指针</li><li>每一项的数据</li><li>由于队列的删除和插入操作，需要移动数据而且时间复杂度为O(n)，但可以通过引入循环队列来使得时间复杂度变为O(1)</li></ul><p>队列也同线性表类似，可以有两种存储结构。顺序存储结构 和 链式存储结构</p><h1 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>同样地，顺序存储结构用到数组来实现。结构中记录头和尾的指针<strong>其实是数组的下标(int)</strong>（front,rear)<br><strong>注意，rear是指队尾元素的下一个位置，front是队头（第一个元素）</strong></p><ul><li><em>空队列的判断</em>。所以，当<code>rear == front</code>的时候，不是还剩一个元素，而是空队列。（一个元素都没有）</li></ul><p><img src="https://i.loli.net/2020/05/12/IBxZ8dk9Lra2HKJ.png"></p><ul><li>当我们用循环队列的时候，如果，元素把整个数组都占满的时候，那么<code>rear == front</code>着个等式不是也成立吗？那么我们怎么区分<strong>满队列</strong>和<strong>空队列</strong>呢？我们应该采取一种方法—永远不要让元素占满整个数组。应该留一个空位。</li></ul><p><img src="https://i.loli.net/2020/05/12/v7fNVKGUnPhC5yk.png"></p><ul><li><p><em>满队列的判断</em>。因为要留下一个位置不能用，要用<code>Q-&gt;rear + 1 == Q-&gt;front</code>判断队列为满</p></li><li><p><em>队列长度</em>。因为队列是循环结构，所以可能会出现两段长度0 + rear 与 MAXSIZE - front。或一段长度rear - front<br>公式：r - f　　　r - f + M <strong>得通用公式</strong> (r - f + M) % M</p></li></ul><h3 id="循环的队列"><a href="#循环的队列" class="headerlink" title="循环的队列"></a>循环的队列</h3><p>因为队列只能在对头删除，队尾添加。如果一直这样操作下去。那么，我们定义的数组就会出现前面的项没有被使用，后面的项一直被占用。所以，为了有效的利用数组的空间。我们可以把着数组想象成环状。<strong>即，队头不一定要从数组的首元素开始，当要数据越界的时候将元素添加到数组的开头</strong></p><h3 id="EnQueue-DeQueue"><a href="#EnQueue-DeQueue" class="headerlink" title="EnQueue(),DeQueue()"></a>EnQueue(),DeQueue()</h3><ol><li>在添加元素的时候，需要事先检查队列是否为满（元素是否占满数组）。</li><li>在删除元素的时候，需要事先检查队列是否为空。</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight c"><figcaption><span>queue.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Queue_h_</span></span><br><span class="line"><span class="comment">/*顺序存储结构的队列*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> front;</span><br><span class="line">    <span class="type">int</span> rear;</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化操作，建立一个空队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(Queue *Q)</span>;</span><br><span class="line"><span class="comment">//将队列清空</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearQueue</span><span class="params">(Queue *Q)</span>;</span><br><span class="line"><span class="comment">//若队列为空返回true，否则返回false</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(Queue *Q)</span>;</span><br><span class="line"><span class="comment">//若队列非空，用*e返回队列头元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetHead</span><span class="params">(Queue *Q, ElementType *e)</span>;</span><br><span class="line"><span class="comment">//若队列存在，则插入元素到队列尾部</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(Queue *Q, ElementType e)</span>;</span><br><span class="line"><span class="comment">//删除队列首元素，并用*e返回其值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(Queue *Q, ElementType *e)</span>;</span><br><span class="line"><span class="comment">//返回队列元素的个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(Queue *Q)</span>;</span><br><span class="line"><span class="comment">//从队头至队尾依次对Q中的每个元素输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(Queue *Q)</span>;</span><br><span class="line"><span class="comment">//打印元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">(ElementType e)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>queue.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    Q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearQueue</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    Q-&gt;front = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear == Q-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetHead</span><span class="params">(Queue *Q, ElementType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear == Q-&gt;front)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The queue is empty&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *e = Q-&gt;data[Q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(Queue *Q, ElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//因为数组是有界的，所有要判断队列是否为满</span></span><br><span class="line">    <span class="keyword">if</span>((Q-&gt;rear + <span class="number">1</span>) % MAXSIZE == Q-&gt;front)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;data[Q-&gt;rear] = e;   <span class="comment">//记住，Q-&gt;rear是最后元素的下标+1</span></span><br><span class="line">    Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(Queue *Q, ElementType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//队列可能为空，所以，要检查</span></span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The queue is empty.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *e = Q-&gt;data[Q-&gt;front];</span><br><span class="line">    Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q-&gt;rear - Q-&gt;front + MAXSIZE) % MAXSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(Queue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = Q-&gt;front;</span><br><span class="line">    <span class="keyword">while</span>(count != Q-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(count &gt;= MAXSIZE)</span><br><span class="line">            count - MAXSIZE;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Q-&gt;data[count++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">(ElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2020/05/11/DS/%E6%A0%88/"/>
      <url>/2020/05/11/DS/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>栈是<strong>为了限制插入，删除只能在末端的一种表</strong>。栈通常的操作有Push和Pop。<br>与同表类似，栈也有顺序存储结构和链式存储结构。<br><img src="https://i.loli.net/2020/05/15/H2cBp3FI9vORryX.jpg"></p><h1 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><ul><li><p><strong>顺序栈用数组实现</strong>。定义一个结构中有存放数据的数组（data[])，以及<strong>表明栈顶的数组下标（top）</strong>。</p></li><li><p>进行Push和Pop操作的时候，通过给<strong>top++；来表面栈在数组中增添位置</strong>。</p></li><li><p><em>空栈</em>顺序栈以数组来实现，所以下标为0时为第一个元素。当<code>S-&gt;top = -1</code>即一个元素也没有。</p></li><li><p><em>满栈</em>当数组下标<code>top - 1</code>时，数组被占满。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STACK_H_</span></span><br><span class="line"><span class="comment">/*顺序存储结构的栈*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElementType data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(SqStack *S, SElementType e)</span>;</span><br><span class="line"></span><br><span class="line">SElementType <span class="title function_">Pop</span><span class="params">(SqStack *S)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(SqStack *S, SElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;top == MAXSIZE - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;top++;</span><br><span class="line">    S-&gt;data[S-&gt;top] = e;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SElementType <span class="title function_">Pop</span><span class="params">(SqStack *S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;top == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The Stack is Empty&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;data[S-&gt;top];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><ul><li>TopOfStack记录数组顶栈的下标</li><li>Capacity记录数组的最大可容纳项数</li><li>动态allocate数组内存</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Stack_h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Error(str) fprintf(stderr, <span class="string">&quot;%s\n&quot;</span>, str),exit(1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EmptyTOS (-1)<span class="comment">//空栈标志</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> *<span class="title">Stack</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> Capacity;</span><br><span class="line">    <span class="type">int</span> TopOfStack;</span><br><span class="line">    ElementType *<span class="built_in">array</span>;</span><br><span class="line">&#125;StackRecord;</span><br><span class="line"></span><br><span class="line">Stack <span class="title function_">CreateStack</span><span class="params">(<span class="type">int</span> MaxElements)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MakeEmpty</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisposeStack</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(ElementType e, Stack S)</span>;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Top</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">TopAndPop</span><span class="params">(Stack S)</span>;</span><br><span class="line"><span class="comment">//从上往下输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(Stack S)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Stack <span class="title function_">CreateStack</span><span class="params">(<span class="type">int</span> MaxElements)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1.分配内存</span></span><br><span class="line">    <span class="comment">// 2.初始化变量</span></span><br><span class="line">    Stack S = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackRecord));<span class="comment">//allocate the stack structure</span></span><br><span class="line"></span><br><span class="line">    S-&gt;<span class="built_in">array</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElementType) * MaxElements);<span class="comment">//allocate the stack array</span></span><br><span class="line">    <span class="keyword">if</span>(!S)</span><br><span class="line">        Error(<span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">    S-&gt;Capacity = MaxElements;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MakeEmpty</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    S-&gt;TopOfStack = EmptyTOS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisposeStack</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(S != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(S-&gt;<span class="built_in">array</span>);</span><br><span class="line">        <span class="built_in">free</span>(S);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;TopOfStack == EmptyTOS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsFull</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;TopOfStack == S-&gt;Capacity - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(ElementType e, Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">        Error(<span class="string">&quot;Full stack&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        S-&gt;<span class="built_in">array</span>[++S-&gt;TopOfStack] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Top</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;<span class="built_in">array</span>[S-&gt;TopOfStack];</span><br><span class="line">    Error(<span class="string">&quot;Empty stack&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        S-&gt;TopOfStack--;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Error(<span class="string">&quot;Empty stack&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">TopAndPop</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> S-&gt;<span class="built_in">array</span>[S-&gt;TopOfStack--];</span><br><span class="line">    &#125;</span><br><span class="line">    Error(<span class="string">&quot;Empty stack&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = S-&gt;TopOfStack; i &gt; EmptyTOS ; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, S-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h1><h2 id="有头节点的栈"><a href="#有头节点的栈" class="headerlink" title="有头节点的栈"></a>有头节点的栈</h2><ul><li><em>空栈</em>首先创建一个头节点。让头节点的<code>next = NULL</code>。<strong>随后的Push操作在前端进行</strong><br>问题是如何从前端进行呢？实际上就是插入操作。所以，<strong>它和单链表的结构声明一样。就是属性和操作不一样</strong>。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Stack_h_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Error(str) fprintf(stderr, <span class="string">&quot;%s\n&quot;</span>, str),exit(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Stack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType e;</span><br><span class="line">    PtrToNode Next;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line">Stack <span class="title function_">CreateStack</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MakeEmpty</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(ElementType X, Stack S)</span>;</span><br><span class="line"><span class="comment">//返回FirstCell的值</span></span><br><span class="line">ElementType <span class="title function_">Top</span><span class="params">(Stack S)</span>;</span><br><span class="line"><span class="comment">//从上（头节点）往下输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(Stack S)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack <span class="title function_">CreateStack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">&quot;Out of space.&quot;</span>);</span><br><span class="line">    S-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MakeEmpty</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">&quot;Must create a stack.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span>(!IsEmpty(S))</span><br><span class="line">            Pop(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    Stack FirstCell;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">&quot;Empty stack&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstCell = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = S-&gt;Next-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(FirstCell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(ElementType e, Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    PtrToNode TmpCell;</span><br><span class="line"></span><br><span class="line">    TmpCell = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(TmpCell == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">&quot;Out of space!!!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell-&gt;e = e;</span><br><span class="line">        TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = TmpCell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">Top</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">&quot;Empty stack.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> S-&gt;Next-&gt;e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(Stack S)</span></span><br><span class="line">&#123;</span><br><span class="line">    PtrToNode Cell = S-&gt;Next;</span><br><span class="line">    <span class="keyword">while</span>(Cell != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Cell-&gt;e);</span><br><span class="line">        Cell = Cell-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无头节点的栈"><a href="#无头节点的栈" class="headerlink" title="无头节点的栈"></a>无头节点的栈</h2><ul><li>链栈通过声明两种结构来实现。</li></ul><ol><li>StackNode 它表面顶栈（top）。当中包含顶栈的数据（data）和指向前一项的指针（next）</li><li>LinkStack 它表面整个栈（可实际上只有栈顶可见）。当中包含指向栈顶（top）的指针，和目前所分配的项（Node）的数量。</li></ol><ul><li><strong>链栈的next的指向与链表不同</strong>，当我们使链栈为空的时候，需要malloc一个链栈(LinkStack)，让<code>S-&gt;top = NULL;cout = 0</code></li></ul><p><img src="https://i.loli.net/2020/05/11/Es1jSm2QyuFGMLv.png" alt="Pop"><br><img src="https://i.loli.net/2020/05/11/yMrJ4G3odIVXDPL.png" alt="Push"></p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _LinkStack_H_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SElementType;</span><br><span class="line"><span class="comment">//The new node(include next and data)Only data and next on top are visible</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElementType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span><span class="comment">//这里的next是指向前一项，第一项的next为NULL</span></span><br><span class="line"></span><br><span class="line">&#125; StackNode, *LinkStackPtr;</span><br><span class="line"><span class="comment">//the link stack(include the pointer of top and count)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LinkStackPtr top;<span class="comment">//top指针</span></span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">&#125;LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(LinkStack *S, SElementType e)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(LinkStack *S, SElementType *e)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;liststack.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(LinkStack *S, SElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr s = (LinkStackPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = S-&gt;top;</span><br><span class="line">    S-&gt;top = s;</span><br><span class="line">    S-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(LinkStack *S, SElementType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr p;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The stack is empty&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *e = S-&gt;top-&gt;data;</span><br><span class="line">    p = S-&gt;top;</span><br><span class="line">    S-&gt;top = S-&gt;top-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    S-&gt;count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的链式存储结构</title>
      <link href="/2020/05/09/DS/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2020/05/09/DS/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="拥有头节点的链表"><a href="#拥有头节点的链表" class="headerlink" title="拥有头节点的链表"></a>拥有头节点的链表</h2><p><img src="https://i.loli.net/2020/05/10/YLKe4ZHjOmVrAFT.jpg"></p><p>头节点的date区可以存放链表的整体数据（例如：长度）</p><h1 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h1><h2 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h2><p>遍历链表一般使用while循环。相关操作有：GetElement() ListLength() Insert()很多很多都可以使用遍历链表来实现</p><p>虽然当我们的函数参数为（结构指针）的时候，在函数中改变指针的指向，不会影响到指针的指向。但是，如果我们传递结构指针的指针来改变指针的指向呢？（例如：malloc创建节点）</p><ul><li><p>针对以上问题，我们可以在函数中<em>再定义一个指针</em>，让它指向第一个节点，由此循环链表。<br><code>Position P = L-&gt;next</code></p></li><li><p>同时必须确定循环条件。i为要遍历第i个元素(从1开始对应节点)，所以也必须设置计数器count &#x3D; 1。当P &#x3D;&#x3D; NULL，证明它已经过了最后一个节点。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(P != <span class="literal">NULL</span> &amp;&amp; count &lt; i)</span><br><span class="line">&#123; </span><br><span class="line">    P = P-&gt;next; </span><br><span class="line">    count++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制i的值不在元素之中的情况</li></ul><figure class="highlight c"><figcaption><span>一真全真</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(P == <span class="literal">NULL</span> || count &lt; i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;List has not No.%d element&quot;</span>, i);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(List L, <span class="type">int</span> i, ElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P, N;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    P = L;<span class="comment">//先让P指向第一个节点</span></span><br><span class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span> &amp;&amp; count &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        P = P-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(P == <span class="literal">NULL</span> || count &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;List has not No.%d element&quot;</span>, i);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    N = (Position)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    N-&gt;e = e;</span><br><span class="line">    N-&gt;next = P-&gt;next;</span><br><span class="line">    P-&gt;next = N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>N-&gt;next = P-&gt;next;</code>和<code>P-&gt;next = N</code><strong>这两句顺序不能反</strong>。（即，从another节点的next指向N节点的后一个节点，再让N的后一个节点指向another节点。）否则，<strong>一开始就把before的后一节点覆盖，那么就这个链就断裂了</strong>。所以，<strong>要先要对another节点操作</strong>。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeList</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P, Q;</span><br><span class="line"></span><br><span class="line">    P = L-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(Q != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Q = P-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(P);</span><br><span class="line">        P = Q;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>这里需要先定义两个位置<code>Position P, Q</code>。因为要循环删除节点，后一个节点的地址不能丢，所以要创建两个结构指针。首先<code>Q = P-&gt;next</code><strong>记录P的next</strong>，<code>free(P)</code>，<strong>释放P。这时P里不再有next指针</strong>，再让<code>P = Q</code><strong>（让P指向下个节点）</strong>。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="list-h"><a href="#list-h" class="headerlink" title="list.h"></a>list.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _List_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _List_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType e;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(List *L)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回第i个元素。i从1开始，遍历链表，所以时间复杂度取决于i。最坏情况O(n);n-&gt;next = NULL</span></span><br><span class="line">ElementType <span class="title function_">GetElement</span><span class="params">(List L, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="comment">//将e插入到第i个元素的前面</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span> <span class="params">(List L, <span class="type">int</span> i, ElementType e)</span>;</span><br><span class="line"><span class="comment">//表的长度，不包括头节点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(List L)</span>;</span><br><span class="line"><span class="comment">//循环打印链表中的元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(List L)</span>;</span><br><span class="line"><span class="comment">//删除链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeList</span><span class="params">(List L)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="list-c"><a href="#list-c" class="headerlink" title="list.c"></a>list.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(List *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    *L = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(*L == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> List LinkList;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateListTail</span><span class="params">(LinkList *L, <span class="type">int</span> n)</span> </span><br><span class="line">&#123;</span><br><span class="line">LinkList p,r;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">srand(time(<span class="number">0</span>));                      <span class="comment">/* 初始化随机数种子 */</span></span><br><span class="line">*L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">/* L为整个线性表 */</span></span><br><span class="line">r=*L;                                <span class="comment">/* r为指向尾部的结点 */</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line">&#123;</span><br><span class="line">p = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">/*  生成新结点 */</span></span><br><span class="line">p-&gt;e = rand()%<span class="number">100</span>+<span class="number">1</span>;           <span class="comment">/*  随机生成100以内的数字 */</span></span><br><span class="line">r-&gt;next=p;                        <span class="comment">/* 将表尾终端结点的指针指向新结点 */</span></span><br><span class="line">r = p;                            <span class="comment">/* 将当前的新结点定义为表尾终端结点 */</span></span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>;                       <span class="comment">/* 表示当前链表结束 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">GetElement</span><span class="params">(List L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;<span class="comment">//to count the node</span></span><br><span class="line">    P = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (P != <span class="literal">NULL</span> &amp;&amp; count != i)</span><br><span class="line">    &#123;</span><br><span class="line">        P = P-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(P == <span class="literal">NULL</span> || count &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;List has not No.%d element&quot;</span>, i);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> P-&gt;e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(List L, <span class="type">int</span> i, ElementType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P, N;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    P = L;</span><br><span class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span> &amp;&amp; count &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        P = P-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(P == <span class="literal">NULL</span> || count &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;List has not No.%d element&quot;</span>, i);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    N = (Position)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    N-&gt;e = e;</span><br><span class="line">    N-&gt;next = P-&gt;next;</span><br><span class="line">    P-&gt;next = N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回链表长度。</span></span><br><span class="line"><span class="comment">//注意，函数中不能直接用L，因为L是个指针，调用函数会改变原有的值。要新增一个节点P，让它指向L</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(P != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, P-&gt;e);</span><br><span class="line">        P = P-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeList</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P, Q;</span><br><span class="line"></span><br><span class="line">    P = L-&gt;next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(Q != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Q = P-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(P);</span><br><span class="line">        P = Q;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test-c"><a href="#test-c" class="headerlink" title="test.c"></a>test.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List L;</span><br><span class="line">    InitList(&amp;L);<span class="comment">//传递指针的指针来malloc</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After Initialize the length of list is %d\n&quot;</span>, ListLength(L));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Insert(L, i + <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After Insert the length of list is %d\n&quot;</span>, ListLength(L));</span><br><span class="line">    Traverse(L);</span><br><span class="line">    DeList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After Delete the list the length of list is %d\n&quot;</span>, ListLength(L));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADT的设计</title>
      <link href="/2020/05/06/DS/ADT%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/05/06/DS/ADT%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ADT（抽象数据类型），如果我们的程序需要使用类型，C中没有与之匹配的基本类型。那我们可以自己定义抽象数据类型。如果，我们要设计一个数据类型需要：</p><ol><li>提供存储数据的方法。（定义一个结构）</li><li>描述操控该数据的方法</li></ol><h1 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h1><ol><li>对数据类型进行一个属性和操作的描述。</li><li>开发一个<em>实现ADT</em>的<strong>接口</strong>。（在.h头文件）</li><li>编写代码实现接口。（.c文件）</li></ol><h2 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h2><p>int类型<br>给我们的属性是：它代表一个整数值。<br>操作是：可以进行<code>+ - * / %</code></p><ul><li>Anyway.ADT就是描述一些这个类型是<strong>属性和操作</strong>。如果要实现它，再通过接口(.h .c)来实现它。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的顺序存储结构</title>
      <link href="/2020/05/05/DS/ADT%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2020/05/05/DS/ADT%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线性表有一种物理结构叫顺序存储结构。它由一系列连续的存储单元组成，从而使得逻辑上相邻的两个元素也连续。</p><ul><li>这样的结构可以使用一维数组来实现。数组的下标从0开始，但我们的元素是从1开始。所以，我们可以这样看：<strong>元素均对应，但标志不一样（只需在用[]时，-1即可）</strong><br><img src="https://i.loli.net/2020/05/08/LPTeAaztkmBrnHc.jpg"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 50  <span class="comment">// 定义线性表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data [MaxSize] ;  <span class="comment">// 表的元素</span></span><br><span class="line">    <span class="type">int</span> length;  <span class="comment">// 线性表的当前长度</span></span><br><span class="line">&#125;SqList;  <span class="comment">// 表的类型定义</span></span><br></pre></td></tr></table></figure><p><strong>注意线性表长度和数组长度不同</strong></p><hr><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><ol><li>如果线性表长度等于数组长度，退出</li><li>如果插入到线性表长度+1以外，退出</li><li>如果不是插到最后（length + 1），那么for，<strong>从最后一个元素到第i个</strong>，一个个往后退</li></ol><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><ol><li>如果线性表为空，退出</li><li>如果删除表以外的数据，退出</li><li>如果不是删除最后位置，for，从i+1到length一个个向前移</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TSIZE      45    <span class="comment">/* size of array to hold title  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">film</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[TSIZE];</span><br><span class="line">    <span class="type">int</span> rating;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* general type definitions */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">film</span> <span class="title">Item</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Item entries[MAXSIZE];<span class="comment">//内含项的数组，**这时字符数组已经分配空间，赋值要用strcpy()**</span></span><br><span class="line">    <span class="type">int</span> items;  <span class="comment">//list中的一共的项数</span></span><br><span class="line">&#125; List;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAKESIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Elememnt;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elememnt e[MAKESIZE];</span><br><span class="line">    <span class="type">int</span> length;     <span class="comment">//线性表长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListEmpty</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearList</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Elememnt <span class="title function_">GetElement</span><span class="params">(List L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;e[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElement</span><span class="params">(<span class="type">int</span> x, List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == L-&gt;e[i])</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Insert</span><span class="params">(List L,<span class="type">int</span> i,Elememnt e)</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;length == MAKESIZE)  <span class="comment">/* 顺序线性表已经满 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>)<span class="comment">/* 当i比第一位置小或者比最后一位置后一位置还要大时 */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; L-&gt;length)<span class="comment">//若插入的元素不在末尾</span></span><br><span class="line">    <span class="keyword">for</span>(k=L-&gt;length<span class="number">-1</span>;k&gt;=i<span class="number">-1</span>;k--)  <span class="comment">/* 将要插入位置之后的数据元素向后移动一位 */</span></span><br><span class="line">        L-&gt;e[k+<span class="number">1</span>]=L-&gt;e[k];</span><br><span class="line">L-&gt;e[i<span class="number">-1</span>]=e;          <span class="comment">/* 将新元素插入 */</span></span><br><span class="line">L-&gt;length++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeElement</span><span class="params">(List L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; L-&gt;length; j++)</span><br><span class="line">        L-&gt;e[j - <span class="number">1</span>] = L-&gt;e[j];</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;e[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List L;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Insert(L , i + <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    DeElement(L, <span class="number">2</span>);</span><br><span class="line">    PrintList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表ADT</title>
      <link href="/2020/05/03/DS/%E9%93%BE%E8%A1%A8ADT/"/>
      <url>/2020/05/03/DS/%E9%93%BE%E8%A1%A8ADT/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ADT是一些操作的集合。用ADT风格，它侧重于问题的解决思路来表达程序，而不是将代码的细节暴露出来，不是将解决的工具来表达程序。所以，ADT风格的可读性更高，而且是解决问题中最关心的问题。<br>例如：表，集合，图都可以看作ADT。ADT需要拥有相关属性和操作。<br><strong>定义ADT需要确定如何存储数据，以及管理该数据的函数</strong><br><strong>使用ADT应该用一般的语言来描述，不应该用某种特定的计算机语言来表示，且不应该具体的实现细节</strong></p><h2 id="定义ADT的步骤"><a href="#定义ADT的步骤" class="headerlink" title="定义ADT的步骤"></a>定义ADT的步骤</h2><ol><li>定义接口（定义相关的函数原型）</li><li>实现接口（实现与函数原型相应的函数）</li><li>使用接口</li></ol><ul><li>如果要使用一个简单的链表<br>程序组成:</li></ul><ol><li>list.h(提供数据类型和接口的原型(general type definitions + function prototypes))</li><li>list.c(提供函数代码实现接口)</li><li>test.c(应用于特定编程的问题)</li></ol><p><img src="https://i.loli.net/2020/05/05/gqYXaD3H5Z7kQzM.png"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="list-h"><a href="#list-h" class="headerlink" title="list.h"></a>list.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* list.h -- header file for a simple list type */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span>     <span class="comment">/* C99 feature         */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* program-specific declarations */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TSIZE      45    <span class="comment">/* size of array to hold title  */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">film</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> rating;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* general type definitions */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">film</span> <span class="title">Item</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Item item;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Node * List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* function prototypes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        initialize a list                          */</span></span><br><span class="line"><span class="comment">/* preconditions:    plist points to a list                     */</span></span><br><span class="line"><span class="comment">/* postconditions:   the list is initialized to empty           */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitializeList</span><span class="params">(List * plist)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        determine if list is empty                 */</span></span><br><span class="line"><span class="comment">/*                   plist points to an initialized list        */</span></span><br><span class="line"><span class="comment">/* postconditions:   function returns True if list is empty     */</span></span><br><span class="line"><span class="comment">/*                   and returns False otherwise                */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListIsEmpty</span><span class="params">(<span class="type">const</span> List *plist)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        determine if list is full                  */</span></span><br><span class="line"><span class="comment">/*                   plist points to an initialized list        */</span></span><br><span class="line"><span class="comment">/* postconditions:   function returns True if list is full      */</span></span><br><span class="line"><span class="comment">/*                   and returns False otherwise                */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListIsFull</span><span class="params">(<span class="type">const</span> List *plist)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        determine number of items in list          */</span></span><br><span class="line"><span class="comment">/*                   plist points to an initialized list        */</span></span><br><span class="line"><span class="comment">/* postconditions:   function returns number of items in list   */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">ListItemCount</span><span class="params">(<span class="type">const</span> List *plist)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        add item to end of list                    */</span></span><br><span class="line"><span class="comment">/* preconditions:    item is an item to be added to list        */</span></span><br><span class="line"><span class="comment">/*                   plist points to an initialized list        */</span></span><br><span class="line"><span class="comment">/* postconditions:   if possible, function adds item to end     */</span></span><br><span class="line"><span class="comment">/*                   of list and returns True; otherwise the    */</span></span><br><span class="line"><span class="comment">/*                   function returns False                     */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">AddItem</span><span class="params">(Item item, List * plist)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        apply a function to each item in list      */</span></span><br><span class="line"><span class="comment">/*                   plist points to an initialized list        */</span></span><br><span class="line"><span class="comment">/*                   pfun points to a function that takes an    */</span></span><br><span class="line"><span class="comment">/*                   Item argument and has no return value      */</span></span><br><span class="line"><span class="comment">/* postcondition:    the function pointed to by pfun is         */</span></span><br><span class="line"><span class="comment">/*                   executed once for each item in the list    */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span> <span class="params">(<span class="type">const</span> List *plist, <span class="type">void</span> (* pfun)(Item item) )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* operation:        free allocated memory, if any              */</span></span><br><span class="line"><span class="comment">/*                   plist points to an initialized list        */</span></span><br><span class="line"><span class="comment">/* postconditions:   any memory allocated for the list is freed */</span></span><br><span class="line"><span class="comment">/*                   and the list is set to empty               */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EmptyTheList</span><span class="params">(List * plist)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="list-c"><a href="#list-c" class="headerlink" title="list.c"></a>list.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* list.c -- functions supporting list operations */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* local function prototype */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CopyToNode</span><span class="params">(Item item, Node * pnode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* interface functions   */</span></span><br><span class="line"><span class="comment">/* set the list to empty */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitializeList</span><span class="params">(List * plist)</span></span><br><span class="line">&#123;</span><br><span class="line">    * plist = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* returns true if list is empty */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListIsEmpty</span><span class="params">(<span class="type">const</span> List * plist)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (*plist == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* returns true if list is full */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListIsFull</span><span class="params">(<span class="type">const</span> List * plist)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node * pt;</span><br><span class="line">    <span class="type">bool</span> full;</span><br><span class="line">    </span><br><span class="line">    pt = (Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (pt == <span class="literal">NULL</span>)</span><br><span class="line">        full = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        full = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">free</span>(pt);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> full;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* returns number of nodes */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">ListItemCount</span><span class="params">(<span class="type">const</span> List * plist)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Node * pnode = *plist;    <span class="comment">/* set to start of list */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (pnode != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        pnode = pnode-&gt;next;  <span class="comment">/* set to next node     */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* creates node to hold item and adds it to the end of */</span></span><br><span class="line"><span class="comment">/* the list pointed to by plist (slow implementation)  */</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">AddItem</span><span class="params">(Item item, List * plist)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node * pnew;</span><br><span class="line">    Node * scan = *plist;</span><br><span class="line">    </span><br><span class="line">    pnew = (Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;     <span class="comment">/* quit function on failure  */</span></span><br><span class="line">    </span><br><span class="line">    CopyToNode(item, pnew);</span><br><span class="line">    pnew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (scan == <span class="literal">NULL</span>)          <span class="comment">/* empty list, so place */</span></span><br><span class="line">        *plist = pnew;         <span class="comment">/* pnew at head of list */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (scan-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            scan = scan-&gt;next;  <span class="comment">/* find end of list    */</span></span><br><span class="line">        scan-&gt;next = pnew;      <span class="comment">/* add pnew to end     */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* visit each node and execute function pointed to by pfun */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Traverse</span>  <span class="params">(<span class="type">const</span> List * plist, <span class="type">void</span> (* pfun)(Item item) )</span></span><br><span class="line">&#123;</span><br><span class="line">    Node * pnode = *plist;    <span class="comment">/* set to start of list   */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (pnode != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pfun)(pnode-&gt;item); <span class="comment">/* apply function to item */</span></span><br><span class="line">        pnode = pnode-&gt;next;  <span class="comment">/* advance to next item   */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* free memory allocated by malloc() */</span></span><br><span class="line"><span class="comment">/* set list pointer to NULL          */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EmptyTheList</span><span class="params">(List * plist)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node * psave;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (*plist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        psave = (*plist)-&gt;next; <span class="comment">/* save address of next node */</span></span><br><span class="line">        <span class="built_in">free</span>(*plist);           <span class="comment">/* free current node         */</span></span><br><span class="line">        *plist = psave;         <span class="comment">/* advance to next node      */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* local function definition  */</span></span><br><span class="line"><span class="comment">/* copies an item into a node */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">CopyToNode</span><span class="params">(Item item, Node * pnode)</span></span><br><span class="line">&#123;</span><br><span class="line">    pnode-&gt;item = item;  <span class="comment">/* structure copy */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test-c"><a href="#test-c" class="headerlink" title="test.c"></a>test.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List L;</span><br><span class="line">    Item temp;<span class="comment">//创建一个临时的结构</span></span><br><span class="line">    </span><br><span class="line">    InitializeList(&amp;L);</span><br><span class="line">    <span class="keyword">if</span>(ListIsFull(&amp;L))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;No memory available!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp.rating = i;    <span class="comment">//给这个临时结构赋值</span></span><br><span class="line">        <span class="keyword">if</span>(AddItem(temp, &amp;L) == <span class="literal">false</span>)<span class="comment">//将整个项copy进新的项</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Problem\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (L != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;item.rating);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双链表交换元素</title>
      <link href="/2020/05/03/DS/%E5%8F%8C%E9%93%BE%E8%A1%A8%E4%BA%A4%E6%8D%A2%E5%85%83%E7%B4%A0/"/>
      <url>/2020/05/03/DS/%E5%8F%8C%E9%93%BE%E8%A1%A8%E4%BA%A4%E6%8D%A2%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>双链表和单链表的<strong>插入，删除，交换</strong>。可以想象成锁链，<strong>但是，前后的链不能断开联系</strong></p><p><img src="https://i.loli.net/2020/05/03/2tnJyGmlaUBK8VW.png"></p><h1 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SwapWithNextAndLast</span><span class="params">(Position BeforeP)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P = BeforeP-&gt;next;</span><br><span class="line">    Position AfterP = P-&gt;next;</span><br><span class="line"></span><br><span class="line">    P-&gt;next = AfterP-&gt;next;</span><br><span class="line">    BeforeP-&gt;next = AfterP;</span><br><span class="line">    AfterP-&gt;next = P;</span><br><span class="line">    P-&gt;next-&gt;last = P;<span class="comment">//注意这行！不能用AfterP-&gt;last，因为P和AfterP的位置改变</span></span><br><span class="line">    P-&gt;last = AfterP;</span><br><span class="line">    AfterP-&gt;last = BeforeP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p><img src="https://i.loli.net/2020/05/10/B1RAxiH2bohUmw4.png"><br>*只要把S指针与前后相连，S-&gt;next，S-&gt;prior与前后指针相连。*就完成了。</p><ul><li>主要方法</li></ul><ol><li>把S的prior,next搞定</li><li>再将After的prior与S连上，为了不断线</li><li>最后，切断Before的next与After的联系，与S连上</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S-&gt;prior = P;</span><br><span class="line">S-&gt;next = P-&gt;next;</span><br><span class="line">P-&gt;next-&gt;prior = S;</span><br><span class="line">P-&gt;next = S;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>双链表的实现和交换元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SwapWithNextAndLast</span><span class="params">(Position BeforeP)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintTail</span><span class="params">(List T)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    Position last;</span><br><span class="line">    Position next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List L = <span class="literal">NULL</span>, T;</span><br><span class="line">    <span class="comment">//初始化prev = NULL是为了满足结束条件</span></span><br><span class="line">    Position prev = <span class="literal">NULL</span>, current;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        current = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="keyword">if</span>(L == <span class="literal">NULL</span>)</span><br><span class="line">            L = current;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev-&gt;next = current;</span><br><span class="line">        current-&gt;last = prev;</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        current-&gt;e = n++;</span><br><span class="line"></span><br><span class="line">        prev = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后一步让T指向最后的一个结构</span></span><br><span class="line">    T = prev;</span><br><span class="line"></span><br><span class="line">    PrintTail(T);</span><br><span class="line">    SwapWithNextAndLast(L);</span><br><span class="line">    PrintTail(T);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SwapWithNextAndLast</span><span class="params">(Position BeforeP)</span></span><br><span class="line">&#123;</span><br><span class="line">    Position P = BeforeP-&gt;next;</span><br><span class="line">    Position AfterP = P-&gt;next;</span><br><span class="line"></span><br><span class="line">    P-&gt;next = AfterP-&gt;next;</span><br><span class="line">    BeforeP-&gt;next = AfterP;</span><br><span class="line">    AfterP-&gt;next = P;</span><br><span class="line">    P-&gt;next-&gt;last = P;<span class="comment">//注意这行，不能用AfterP，因为要将P的位置改变</span></span><br><span class="line">    P-&gt;last = AfterP;</span><br><span class="line">    AfterP-&gt;last = BeforeP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintTail</span><span class="params">(List T)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, T-&gt;e);</span><br><span class="line">        T = T-&gt;last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表中交换元素</title>
      <link href="/2020/05/03/DS/%E9%93%BE%E8%A1%A8%E4%B8%AD%E4%BA%A4%E6%8D%A2%E5%85%83%E7%B4%A0/"/>
      <url>/2020/05/03/DS/%E9%93%BE%E8%A1%A8%E4%B8%AD%E4%BA%A4%E6%8D%A2%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链表中的交换元素，不同于数组。链表中的操作主要是针对结构中的next</p><p><img src="https://i.loli.net/2020/05/03/2tnJyGmlaUBK8VW.png"></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Exchange</span><span class="params">(Position BeforeP)</span><span class="comment">//我这里传入表头</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//为交换P和AfterP</span></span><br><span class="line">    Position P, AfterP;</span><br><span class="line">    <span class="comment">//定义一下P，和AfterP</span></span><br><span class="line">    P = BeforeP-&gt;next;</span><br><span class="line">    AfterP = P-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换是针对3个结构中的next。</span></span><br><span class="line">    <span class="comment">//先想象已经把两个结构交换了，再考虑next要怎么指向</span></span><br><span class="line">    P-&gt;next = AfterP-&gt;next;</span><br><span class="line">    BeforeP-&gt;next = AfterP;</span><br><span class="line">    AfterP-&gt;next = P;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>单链表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Exchange</span> <span class="params">(Position BeforeP)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(List L)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List L = <span class="literal">NULL</span>;</span><br><span class="line">    Position prev, current; </span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        current = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="keyword">if</span>(L == <span class="literal">NULL</span>)</span><br><span class="line">            L = current;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev-&gt;next = current;</span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        current-&gt;e = n;</span><br><span class="line">        prev = current;</span><br><span class="line"></span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    PrintList(L);</span><br><span class="line">    Exchange(L);</span><br><span class="line">    PrintList(L);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Exchange</span><span class="params">(Position BeforeP)</span><span class="comment">//我这里传入表头</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//为交换P和AfterP</span></span><br><span class="line">    Position P, AfterP;</span><br><span class="line">    <span class="comment">//定义一下P，和AfterP</span></span><br><span class="line">    P = BeforeP-&gt;next;</span><br><span class="line">    AfterP = P-&gt;next;</span><br><span class="line">    <span class="comment">//交换是针对3个结构中的next。</span></span><br><span class="line">    <span class="comment">//先想象已经把两个结构交换了，再考虑next要怎么指向</span></span><br><span class="line">    P-&gt;next = AfterP-&gt;next;</span><br><span class="line">    BeforeP-&gt;next = AfterP;</span><br><span class="line">    AfterP-&gt;next = P;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintList</span><span class="params">(List L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (L != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;e);</span><br><span class="line">        L = L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中结构指针的指针</title>
      <link href="/2020/05/02/fatal/%E7%BB%93%E6%9E%84%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88/"/>
      <url>/2020/05/02/fatal/%E7%BB%93%E6%9E%84%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="关于结构指针"><a href="#关于结构指针" class="headerlink" title="关于结构指针"></a>关于结构指针</h1><ol><li><p><code>struct Node *ps</code>定义一个Node类型的结构指针。<br><strong>注意，此时并没有指向Node的某个结构</strong></p></li><li><p>必须<code>malloc</code>分配结构空间，并返回结构地址，给<code>ps</code></p></li><li><p>这样<code>ps</code>才能有类似的<code>ps-&gt;next</code>操作</p></li></ol><h2 id="想要在函数中改变某个指针的指向的时候"><a href="#想要在函数中改变某个指针的指向的时候" class="headerlink" title="想要在函数中改变某个指针的指向的时候"></a>想要在函数中改变某个指针的指向的时候</h2><p>通常是，函数中malloc返回给指针的情况</p><ol><li><p>显然，如果我们想通过函数改变某个变量的值，那么我们可以传递这个值的指针给函数。<em>让这个指针指向另外一个值</em></p></li><li><p>同样地，如果我们想要<strong>改变某个指针</strong>，那么就要<strong>传递指针的指针给函数</strong></p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(List *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    *L = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(*L == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;out of space.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="想要不改变指针在main（）中的指向"><a href="#想要不改变指针在main（）中的指向" class="headerlink" title="想要不改变指针在main（）中的指向"></a>想要不改变指针在main（）中的指向</h2><p><strong>直接传递指针就好啦，不传递指针的指针就不改变原来的指向哦</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    (str)++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);         <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *s[] = &#123;<span class="string">&quot;Ferry&quot;</span>, <span class="string">&quot;Chan&quot;</span>, <span class="string">&quot;faye&quot;</span>, <span class="string">&quot;chan&quot;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> * x = s[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, x);          <span class="comment">//1</span></span><br><span class="line">    fun(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, x);          <span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">faye</span><br><span class="line">aye</span><br><span class="line">faye</span><br></pre></td></tr></table></figure><h1 id="以上两点总结"><a href="#以上两点总结" class="headerlink" title="以上两点总结"></a>以上两点总结</h1><p>传给函数指针只能改变它的值，不能改变它的指向。<br><strong>重点，这是因为定义函数的参数是局部变量，调用函数时（）里的值，只是赋值操作。注意，只是赋值</strong><br><strong>本质都是传值，只不过值，可以是指针。而且传给函数的，都可以理解为是原值的一个副本。既然是副本，那就可以理解了，改变副本是无法改变原值的。</strong></p><p>看看，这里定义了两个指针。p和str。其中p 指向 (malloc)分配的内存，str 还指向 NULL。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetMemory</span><span class="params">( <span class="type">char</span>*p )</span></span><br><span class="line">&#123;</span><br><span class="line">  p = (<span class="type">char</span>*) <span class="built_in">malloc</span>( <span class="number">100</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">( <span class="type">void</span> )</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span>*str = <span class="literal">NULL</span>;</span><br><span class="line">  GetMemory( str ); </span><br><span class="line">  <span class="built_in">strcpy</span>( str, <span class="string">&quot;hello world&quot;</span> );</span><br><span class="line">  <span class="built_in">printf</span>( str );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> fatal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归打开文件中的文件</title>
      <link href="/2020/04/30/DS/%E9%80%92%E5%BD%92%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/2020/04/30/DS/%E9%80%92%E5%BD%92%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道<code>#include</code>可以引入文件，又可推知，引入的文件中还能包含<code>#include</code>，再次引入文件。即，引用文件中的文件。</p><ul><li>我们可以使用递归来输出所有引入文件的内容</li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h2><ul><li><p>参数<br>(s1, s2)</p></li><li><p>返回值<br>返回s2的首字符地址，找不到返回NULL</p></li><li><p>作用<br>从字符串s1中找到字符串s2</p></li></ul><h2 id="strchr"><a href="#strchr" class="headerlink" title="strchr()"></a>strchr()</h2><ul><li><p>参数<br>(s1, c1)</p></li><li><p>返回值<br>返回s1中c1的字符地址</p></li><li><p>作用<br>从s1中查找c1字符</p></li><li><p>注意<br><strong>调用字符串与首元素地址，紧密联系</strong>即，以上s1，s2都是字符串的首元素地址</p></li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight c"><figcaption><span>filename.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.c&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>add.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>main文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;filename.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 256</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ProcessFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * Filename)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> line[SIZE];</span><br><span class="line">    <span class="type">char</span> f_name[SIZE];</span><br><span class="line"></span><br><span class="line">    FILE * fp;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>((fp = fopen(Filename, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open %s\n&quot;</span>, Filename);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((ch = getc(fp)) != EOF)</span><br><span class="line">        putc(ch, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始查找文件中的文件</span></span><br><span class="line">    rewind(fp);</span><br><span class="line">    <span class="keyword">while</span> (fgets(line, SIZE, fp) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(line, <span class="string">&quot;#include \&quot;&quot;</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> *find = <span class="built_in">strchr</span>(&amp;line[<span class="number">10</span>], <span class="string">&#x27;\&quot;&#x27;</span>);<span class="comment">//先找到最后的&quot;在字符串中出现的指针</span></span><br><span class="line">            *find = <span class="string">&#x27;\0&#x27;</span>;       <span class="comment">//再替换为&#x27;\0&#x27;，得到文件名</span></span><br><span class="line">            </span><br><span class="line">            ProcessFile(&amp;line[<span class="number">10</span>]);     <span class="comment">//递归调用该函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    ProcessFile(<span class="string">&quot;filename.c&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的效率</title>
      <link href="/2020/04/28/DS/clock-%E5%87%BD%E6%95%B0/"/>
      <url>/2020/04/28/DS/clock-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>比较两个函数的效率，可以通过它的运行时间来确定。所以可以通过clock()函数来确定<strong>某段程序</strong>走过多少ticks。</p><ul><li>如何确定运行时间</li></ul><ol><li>O(N) N是for循环的运行次数。如果是while循环的话，则要看结束条件和内部，要循环多少次</li></ol><figure class="highlight c"><figcaption><span>运行时间为O(L+P)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintLots</span><span class="params">(List L, List P)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Counter = <span class="number">1</span>;</span><br><span class="line">    Position Ppos = L, Lpos = P;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (Ppos-&gt;next != <span class="literal">NULL</span> &amp;&amp; Lpos-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Ppos-&gt;i == Counter++)<span class="comment">//每次循环不一定执行，运行时间为O(P)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Lpos-&gt;i);</span><br><span class="line">            Ppos = Ppos-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Lpos = Lpos-&gt;next;<span class="comment">//每次都循环都执行，运行时间为O(L)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h1><ul><li><p>需要<strong>time.h</strong>头文件</p></li><li><p>无参数</p></li><li><p>返回值</p></li></ul><ol><li>从函数的开头，到clock()一直走过多少ticks</li><li>值的类型为<code>clock_t</code></li></ol><ul><li>注意的问题<br>可能有的函数运行的时间都不到一个ticks，所以要通过循环去将此函数执行多次</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>查看printN()的效率</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printN</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        printN(n - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">clock_t</span> start, stop;</span><br><span class="line">    <span class="type">double</span> duration;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    start = clock();</span><br><span class="line">    printN(n);</span><br><span class="line">    stop = clock();</span><br><span class="line"></span><br><span class="line">    duration = (<span class="type">double</span>)(stop - start);<span class="comment">//强制转换为double</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%e\n&quot;</span>, duration);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串输入输出</title>
      <link href="/2020/04/27/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2020/04/27/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>当我们进行字符串输入时，<strong>scanf函数和转换说明%s只能读取一个单词</strong>。所以，要进行整行输入，需要用到gets</p></li><li><p>puts()<strong>一定要是字符串，即最后需要有’\0’</strong></p></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h2><ol><li><p>参数<br>(字符数组地址)</p></li><li><p>说明<br>遇到’\n’结束，丢弃’\n’，在最后加上’\0’。这使得gets()可以于puts()有很好的配合</p></li><li><p>缺点<br>缓冲区溢出，破坏栈中的内容。<br>当我们传入字符串数组的首地址时，gets只知道元素的开始处。这样会导致缓冲区溢出。它在遇到 EOF 字符或换行字符之前，不会停止读入文本。也就是：gets() 根本不执行边界检查。因此，使用 gets() 总是有可能使任何缓冲区溢出。</p></li></ol><h2 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h2><ol><li><p>参数<br>(字符数组地址)</p></li><li><p>说明<br>遇到’\0’结束，并且在最后加上’\n’</p></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c++"><figcaption><span>逐个字符输入，pus()要加上'\0'</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;we are learning C language.&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">40</span>] = <span class="string">&quot;we are learning C language.&quot;</span>;</span><br><span class="line"><span class="type">char</span> str3[<span class="number">40</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((str3[i] = <span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">i++;</span><br><span class="line">    str3[i++] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(str3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c practice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/2020/04/26/linux/%E9%93%BE%E6%8E%A5/"/>
      <url>/2020/04/26/linux/%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链接有两种<strong>硬链接</strong>（hard link）和<strong>字符链接</strong><br>当我们<code>ln</code>一个硬链接时，<code>ls -al</code>显示出来的文件链接数量就会加1，但是<code>ln -s</code>一个字符链接却不会。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><p>文件的读取<br>文件名——&gt;inode——&gt;数据区块</p></li><li><p>用<code>ln</code>来创建链接</p></li></ul><ol><li>符合链接，有参数<code>-s</code></li><li>硬链接，无参数</li></ol><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><ul><li>这种链接只是新创建一个文件，这个文件里面的inode与源文件的inode相同，所以都会指向相同的数据区块。</li></ul><p>ｆ１<br>　　　＼<br>　　　　－＞ｉｎｏｄｅ－＞ｄａｔｅ　ｂｌｏｃｋ<br>　　　／<br>ｆ２　</p><p><img src="https://i.loli.net/2020/04/26/rhjQode3vRcPyqz.png" alt="image.png"></p><ul><li><p>所以，我们新建一个硬链接<code>ln test testing</code>。我们把其中的一个文件删除，另外一个文件也能够访问到原始数据。</p></li><li><p>优点<br>可以将源文件删除，也能访问到原来的数据。</p></li><li><p>缺点</p></li></ul><ol><li>不能创建目录的硬链接</li><li>不能跨文件系统</li></ol><h2 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a>符号链接</h2><ul><li>也是创建一个新文件，但是这个文件指向源文件的文件名，它等同于Windows的快捷方式。</li></ul><p>ｆ２－＞ｆ１－＞ｉｏｎｄｅ－＞ｄａｔｅ　ｂｌｏｃｋ</p><p><img src="https://i.loli.net/2020/04/26/lDv1o7VQFPZn4wT.png" alt="image.png"></p><ul><li><p>所以，我们新建一个符号链接<code>ln -s test test2</code>。我们把源文件删除了（f1），那么符合链接文件无效（f2）</p></li><li><p>优点<br>可以创建目录的符号链接</p></li><li><p>缺点<br>删除源文件，通过符合链接不能访问原始数据</p></li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="目录的符号链接"><a href="#目录的符号链接" class="headerlink" title="目录的符号链接"></a>目录的符号链接</h2><ul><li><code>ln -s test test2</code><br>如果我们修改test2目录中的文件，那么test中的文件也会做相应的改变。因为，<strong>test2</strong>文件只是当作指向作用，<code>cd test2</code>的时候，就等于<code>cd test</code></li></ul><h2 id="目录的链接数量"><a href="#目录的链接数量" class="headerlink" title="目录的链接数量"></a>目录的链接数量</h2><p><code>mkdir /test/workspace</code><br>但我们创建这个目录时，相应地会产生两个隐藏目录。一共三个目录。<br>分别是<br>&#x2F;test&#x2F;workspace<br>&#x2F;test&#x2F;workspace .<br>&#x2F;test&#x2F;workspace ..</p><ul><li><p>因为<code>/test/workspace .</code>和<code>/test/workspace</code>相同，所以<code>ls -al</code>下，workspace的链接有2</p></li><li><p>&#x2F;test&#x2F;workspace ..和&#x2F;test相同，所以&#x2F;test的链接会+1</p></li></ul><p><strong>当我们新建目录时，本目录的链接数为2，上级目录的链接数+1</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件系统</title>
      <link href="/2020/04/23/linux/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/04/23/linux/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>文件系统，就是用来管理和存储文件的权限，属性，内容等文件信息的系统。<br>因操作系统的不同，文件系统也并不相同。Linux的正统文件系统为ext2。U盘使用的文件系统是FAT格式。</p><h1 id="ext2（索引式文件系统）"><a href="#ext2（索引式文件系统）" class="headerlink" title="ext2（索引式文件系统）"></a>ext2（索引式文件系统）</h1><h2 id="包括"><a href="#包括" class="headerlink" title="包括"></a>包括</h2><ol><li><p>inode<br>一个文件占用一个inode，主要是存储文件的权限和属性，还记录文件所存储所在的数据区块的号码。</p></li><li><p>数据区块<br>存储文件的内容，当文件太大时，就会占用多个区块</p></li><li><p>超级区块<br>记录整个文件系统的信息，比如使用了多少个inode，数据区块的使用量</p></li></ol><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><ul><li><p>inode指向文件<br>因为，每个inode都对应这个文件的数据块。所以，当我们要读取文件时，就可以通过inode作为索引，找到该文件的数据区块。</p></li><li><p>inode指向目录<br>数据区块中仅存放文件名</p></li></ul><p><img src="https://i.loli.net/2020/04/23/lg19EAWjm2aV6Yk.jpg"></p><h1 id="FAT"><a href="#FAT" class="headerlink" title="FAT"></a>FAT</h1><p>这种格式的文件系统没有inode的存在，就没有索引了。所以，它的读取数据区块速度较慢。<br><img src="https://i.loli.net/2020/04/23/bLr6FNjPf4zvedK.png"></p><h1 id="碎片整理"><a href="#碎片整理" class="headerlink" title="碎片整理"></a>碎片整理</h1><p>当我们要读取一个文件时，磁头会在磁盘上转动，如果保存文件的各个数据区块分散严重的话，磁头就会在磁盘中要多转几圈才能读取数据。碎片整理，就是要把这些数据区块整理到一起，这样读取文件的速度就会更快。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环境变量PATH</title>
      <link href="/2020/04/20/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FPATH/"/>
      <url>/2020/04/20/linux/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FPATH/</url>
      
        <content type="html"><![CDATA[<p>当我们要查看当前目录的子目录和文件时，可以用ls命令，但是ls这是一个文件，单单一个ls命令，不是绝对路径，不是相对路径，也不在当前目录下的文件。那ls这个文件是怎么执行的呢？</p><p>在命令行中，要执行文件时，系统先要到环境变量PATH中查找文件。（PATH中记录了一些目录。）<br>然后，再到当前所在目录下，查找文件。</p><h2 id="查看PATH变量"><a href="#查看PATH变量" class="headerlink" title="查看PATH变量"></a>查看PATH变量</h2><ul><li><p><code>echo $PATH</code><br>这样就列出了变量中存储的所有目录，都是由<code>:</code>（冒号）分隔的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ferry/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure></li></ul><h2 id="将目录加入PATH中"><a href="#将目录加入PATH中" class="headerlink" title="将目录加入PATH中"></a>将目录加入PATH中</h2><ul><li><code>PATH=&quot;$&#123;PATH&#125;:/root</code><br>这样就把&#x2F;root这个目录添加到PATH变量中。</li></ul><h2 id="路径与指令搜寻顺序"><a href="#路径与指令搜寻顺序" class="headerlink" title="路径与指令搜寻顺序"></a>路径与指令搜寻顺序</h2><ol><li>以相对&#x2F;绝对路径执行指令，例如“ &#x2F;bin&#x2F;ls ”或“ .&#x2F;ls ”；</li><li>由 alias 找到该指令来执行；</li><li>由 bash 内置的 （builtin） 指令来执行；</li><li>通过 $PATH 这个变量的顺序搜寻到的第一个指令来执行。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对路径与相对路径</title>
      <link href="/2020/04/20/linux/%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/04/20/linux/%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>/</code>这个表示<strong>根目录</strong>下<br><code>bin/</code>这个表示bin的目录下</p><h1 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h1><p>一定要从根目录（<code>/</code>)写起，就是要写<strong>完整的路径名</strong></p><h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><p>不是从根目录写起</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li>当我们要cd（change directory）的时候，不论是要用绝对路径和相对路径，都要遵循<br><strong>到（根，当前，上一级）目录下，再到其他的目录（用目录名标识）</strong></li></ul><p><code>cd ../bin</code> 到上一级目录下的bin目录（相对路径）<br><code>cd ./bin</code> 到当前目录下的bin目录，<strong>等同于</strong><code>cd bin</code>(相对路径)<br><code>cd /bin</code> 到根目录下的bin目录（绝对路径）</p><h1 id="特殊的目录"><a href="#特殊的目录" class="headerlink" title="特殊的目录"></a>特殊的目录</h1><p><code>.</code> 此层目录<br><code>..</code> 上层目录<br><code>-</code>  上一个的目录（记录）<br><code>~</code>  home目录</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录权限</title>
      <link href="/2020/04/19/linux/%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90/"/>
      <url>/2020/04/19/linux/%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相对于windows上的的文件，只要是.exe .bat .com后缀的就可以执行。而Linux上的目录或文件，只需要x这个权限就可以执行。<br>但是，<strong>可执行的程序代码</strong>，与<strong>可执行权限</strong>是两回事。也就是说，拥有可执行权限，但是能不能成功执行，就要看文件的内容</p><p><img src="https://i.ibb.co/4fs4bp4/image.png"></p><h2 id="代表意义"><a href="#代表意义" class="headerlink" title="代表意义"></a>代表意义</h2><p><code>[权限][链接][拥有者名][用户组名][文件容量][修改日期][文件名]</code></p><ul><li>拥有者，用户组对应相关权限</li><li><strong>如果你不是拥有者，用户组，root，那么你就是others</strong></li></ul><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>对于目录的权限</li></ul><ol><li><p>r<br>可以查看目录中的文件和子目录</p></li><li><p>x<br>可以进入目录</p></li><li><p>w<br>删除，更新，新建文件和目录</p></li></ol><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>根据上述，开发一个目录一般需要具备<code>rx</code>读和执行的权限</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件权限/属性</title>
      <link href="/2020/04/19/linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
      <url>/2020/04/19/linux/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>linux上一个文件添加许多的属性，例如用户组的概念。<br>当我们<code>ls -al</code>的时候，会看到（文件拥有者，用户组，其他人）的读，写，执行权限。</p><p><img src="https://i.ibb.co/4fs4bp4/image.png"></p><h2 id="代表意义"><a href="#代表意义" class="headerlink" title="代表意义"></a>代表意义</h2><p><code>[权限][链接][拥有者名][用户组名][文件容量][修改日期][文件名]</code></p><ul><li>拥有者，用户组对应相关权限</li><li><strong>如果你不是拥有者，用户组，root，那么你就是others</strong></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol><li><p>第一个<em>字符</em>是表面这个是文件，目录，链接文件还是设备<br><code>d</code>-&gt;directory(目录)<br><code>-</code>-&gt;文件<br><code>l</code>-&gt;链接文件（类似于windows的快捷方式）<br><code>b</code>-&gt;区块设备文件<br><code>c</code>-&gt;字符设备文件</p></li><li><p>剩下的<em>字符</em>以三个为一组它们有各自的身份。（文件拥有者，用户组，其他人）</p></li><li><p><code>rwx</code>这三个字符分别代表read,write,execute的权限</p></li><li><p>另外还有一个root身份，可以不受系统权限所限制。</p></li></ol><h1 id="修改属性和权限"><a href="#修改属性和权限" class="headerlink" title="修改属性和权限"></a>修改属性和权限</h1><ul><li><p><code>-R</code><br>如果要修改目录中的子目录和文件，只要在选项中加上<code>-R</code></p></li><li><p><code>chgrp</code>-&gt; change group，修改文件所属的用户组。<br>(chgrp <users> <filename>)<br>users是用户组名，只有当此用户组名，列入 <strong>&#x2F;etc&#x2F;passwd</strong>这个文件中才能被执行</filename></users></p></li><li><p><code>chown</code>-&gt; change own，修改文件拥有者和用户组<br>(chown <bin> <filename>)<br>**(chown ferry:ferry file)**这就将文件的拥有者和用户组都改成ferry</filename></bin></p></li></ul><p>为什么要修改文件拥有者？这通常在复制文件给别人的时候使用。<br>因为<code>cp &lt;源文件&gt; &lt;目标文件&gt;</code>的时候，会连同文件的权限一起复制，所以要修改文件拥有者（要复制给的人），才能让他修改权限。</p><ul><li><code>chmod</code> 修改文件的权限</li></ul><ol><li><p>以数字类型修改文件权限<br>r -&gt; 4<br>w -&gt; 2<br>x -&gt; 1<br>例子：<br>要将文件修改为<code>-rwxr-xr--</code>，命令<code>chmod 754 &lt;filename&gt;</code></p></li><li><p>以符号类型修改文件权限<br>a -&gt;所有人（user，group，other）<br>u -&gt;用户<br>g -&gt;用户组<br>o -&gt;其他人</p></li></ol><p><code>+</code> -&gt;加入权限<br><code>-</code> -&gt;减去权限<br><code>=</code> -&gt;设置某人权限</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><code>chmod a=rwx</code>将所有人的权限设置为rwx<br><code>chmod a+x</code> 所有人加上可执行权限<br><code>chmod g-w</code> 用户组删去可写权限</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表和数组</title>
      <link href="/2020/04/17/DS/%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/04/17/DS/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>链表就是指<strong>动态分配结构的序列链</strong></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>我们知道，数组是被分配的连续的内存块，可以轻易调用其中的项，但是要增加和删除其中的项却很困难。<br>而链表呢，因为它是靠结构中的指针将散乱的内存块，串起来。就变得增加，删除其中的项很容易，要访问其中的某一项却很困难。</p><h2 id="构造链表的一般步骤"><a href="#构造链表的一般步骤" class="headerlink" title="构造链表的一般步骤"></a>构造链表的一般步骤</h2><p>(prev是一个结构指针，表示前一个结构的中介)<br>(current是一个结构指针，表示当前结构的中介)</p><ol><li>while循环（人为结束）</li><li>malloc分配结构空间，并返回指针给current(结构将在循环中创建)</li><li>if-else 给prev的next赋值</li><li>将本结构的next &#x3D; NULL</li><li>对本结构的内容赋值</li><li>让prev &#x3D; current的指针</li></ol><h2 id="关于结构指针"><a href="#关于结构指针" class="headerlink" title="关于结构指针"></a>关于结构指针</h2><ol><li><p><code>struct Node *ps</code>定义一个Node类型的结构指针。<br><strong>注意，此时并没有指向Node的某个结构</strong></p></li><li><p>必须<code>malloc</code>分配结构空间，并返回结构地址，给<code>ps</code></p></li><li><p>这样<code>ps</code>才能有类似的<code>ps-&gt;next</code>操作</p></li></ol><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h2><p>使用数组的时候，用下标访问数组中的元素。就是随机访问。</p><h2 id="顺序访问"><a href="#顺序访问" class="headerlink" title="顺序访问"></a>顺序访问</h2><p>从链表的首节点开始，逐个节点移动到要访问的节点。就是顺序访问。</p><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找需要直接跳到中点，使用这种方法适合用于数组，因为能随机访问。<br><strong>不适用于链表</strong>，因为链表只能顺序访问。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>打印单链表的所有元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">PtrToNode</span>;</span><span class="comment">//Node结构指针</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义3个Node结构指针</span></span><br><span class="line">    PtrToNode head = <span class="literal">NULL</span>;</span><br><span class="line">    PtrToNode prev, current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态分配内存，每次循环分配一个结构大小的内存，返回结构指针。</span></span><br><span class="line">        <span class="comment">//虽然current一次只能存储一个地址，但是都记录到结构中的next结构指针中</span></span><br><span class="line">        current = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">            head = current;<span class="comment">//头指针指向第一项</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev-&gt;next = current;<span class="comment">//存储结构地址</span></span><br><span class="line"></span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;<span class="comment">//让最后一项的next指针为空</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;current-&gt;e);</span><br><span class="line">        prev = current;<span class="comment">//最后，让中介指向current结构，开启下一次循环</span></span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印单链表的所有元素</span></span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span>(current != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, current-&gt;e);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span> <span class="comment">//提供malloc()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> <span class="comment">//提供strcpy()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TSIZE 45</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">film</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[TSIZE];<span class="comment">//电影题目</span></span><br><span class="line">    <span class="type">int</span> rating;<span class="comment">//评分</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">next</span>;</span><span class="comment">//存储下一个结构地址的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">head</span> =</span> <span class="literal">NULL</span>;<span class="comment">//头指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">film</span> * <span class="title">prev</span>, *<span class="title">current</span>;</span><span class="comment">//前一个结构的指针，和当前结构的指针</span></span><br><span class="line">    <span class="type">char</span> input[TSIZE];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter first movie title: &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (s_gets(input, TSIZE) != <span class="literal">NULL</span> &amp;&amp; input[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        current = (<span class="keyword">struct</span> film *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> film));<span class="comment">//为当前结构的指针分配空间，开辟一块内存</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">            head = current;<span class="comment">//让头指针指向第一个结构</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev-&gt;next = current;<span class="comment">//让前一个结构指针指向当前的结构</span></span><br><span class="line">        current-&gt;next = <span class="literal">NULL</span>;     <span class="comment">//让当前结构的指针为空</span></span><br><span class="line">        <span class="built_in">strcpy</span>(current-&gt;title, input);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Enter you rating&lt;0-10&gt;: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;current-&gt;rating);</span><br><span class="line">        <span class="keyword">while</span>(getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Enter next movie title (empty line to stop): &quot;</span>);</span><br><span class="line">        prev = current;<span class="comment">//经过上面的输入操作之后，让指向前一个结构的指针指向当前结构，（更新）为下一次循环做准备</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No data entered. &quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Here is the movie list:\n&quot;</span>);</span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Movie: %s Rating: %d\n&quot;</span>, </span><br><span class="line">            current-&gt;title, current-&gt;rating);</span><br><span class="line">        current = current-&gt;next;<span class="comment">//（更新），让当前指针指向下个结构</span></span><br><span class="line">    &#125;</span><br><span class="line">    current = head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(current);</span><br><span class="line">        head = current-&gt;next;<span class="comment">//（更新），让当前指针指向下个结构</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bye!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line">    <span class="type">char</span> * find;</span><br><span class="line"></span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        find = <span class="built_in">strchr</span>(st, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(find)</span><br><span class="line">            *find = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>两个链表，根据P链表的i索引作为L链表的第i个元素，输出该元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List; <span class="comment">//某个结构指针</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintLots</span><span class="params">(List P, List L)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    PtrToNode next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PtrToNode head1 = <span class="literal">NULL</span>, head2 = <span class="literal">NULL</span>;</span><br><span class="line">    PtrToNode prev1, current1, prev2, current2;</span><br><span class="line">    <span class="type">int</span> n1 = <span class="number">0</span>, n2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n1 &lt; <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//分配空间，并给指针赋值</span></span><br><span class="line">        current1 = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="comment">//让head = 第一个结构指针。else，让prev1的next = 当前的结构指针</span></span><br><span class="line">        <span class="keyword">if</span>(head1 == <span class="literal">NULL</span>)</span><br><span class="line">            head1 = current1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev1-&gt;next = current1;</span><br><span class="line">        <span class="comment">//不要忘记，将当前的结构中的next = NULL</span></span><br><span class="line">        current1-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//给结构中的元素赋值</span></span><br><span class="line">        current1-&gt;i = (n1 += <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//最后让prev指向current，由此开始下一次循环</span></span><br><span class="line">        prev1 = current1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n2 &lt; <span class="number">70</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//分配空间，并给指针赋值</span></span><br><span class="line">        current2 = (PtrToNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">        <span class="keyword">if</span>(head2 == <span class="literal">NULL</span>)</span><br><span class="line">            head2 = current2;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev2-&gt;next = current2;</span><br><span class="line">        current2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        current2-&gt;i = (n2 += <span class="number">10</span>);</span><br><span class="line">        prev2 = current2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PrintLots(head1, head2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintLots</span><span class="params">(List head1, List head2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Counter = <span class="number">1</span>;</span><br><span class="line">    Position Ppos = head1, Lpos = head2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (Ppos-&gt;next != <span class="literal">NULL</span> &amp;&amp; Lpos-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Ppos-&gt;i == Counter++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Lpos-&gt;i);</span><br><span class="line">            Ppos = Ppos-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Lpos = Lpos-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制与字符串的转换</title>
      <link href="/2020/04/14/c/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/04/14/c/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>二进制是一个值01010101，而字符串是一些字符后面加上’\0’，”01010101”.<br>当我们要将这两种形式进行转换的时候，可以运用位运算符，和某两个算法解决。</p><h2 id="字符串——-数值"><a href="#字符串——-数值" class="headerlink" title="字符串——&gt;数值"></a>字符串——&gt;数值</h2><ul><li>先将数值变量向左移动，再用*取出字符串中的字符，-‘0’转换成数值，添加到变量中。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">btoi</span><span class="params">(<span class="type">char</span> * st)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*st)<span class="comment">//到空字符结束，8个数，循环8次</span></span><br><span class="line">    &#123;</span><br><span class="line">        num = (num &lt;&lt; <span class="number">1</span>);<span class="comment">//左移动</span></span><br><span class="line">        num += (*st++ - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//从左往右取字符，并转换成数值，添加到num</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数值——-字符串"><a href="#数值——-字符串" class="headerlink" title="数值——&gt;字符串"></a>数值——&gt;字符串</h2><ol><li>传递给函数，数值，和要准备存储的字符数组。</li><li>取最后一位数(运用8进制的掩码操作<code>01 &amp; num</code>)，并将其转换成字符，<code>+ &#39;0&#39;</code>添加到数组中。<br><strong>掩码：运用&amp;运算符，用0覆盖掉1，0也为0</strong></li><li>然后，将num进行移位的同时，赋值给num。<code>num &gt;&gt;= 1</code></li><li>for循环遍历数组中的元素<strong>除最后一个</strong>。</li><li>最后在数组中最后一个元素赋值’\0’</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">itobs</span><span class="params">(<span class="type">int</span> num, <span class="type">char</span> *st)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> size = CHAR_BIT * <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, num &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        st[i] = (<span class="number">01</span> &amp; num) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    st[size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bstoi</span><span class="params">(<span class="type">char</span> *)</span>;<span class="comment">//二进制字符串转化为整数的函数</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">itobs</span><span class="params">(<span class="type">int</span> , <span class="type">char</span> *st)</span>;   <span class="comment">//整数转化为二进制字符串的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * st)</span>;  <span class="comment">//4位一组显示二进制字符串</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n1, n2;</span><br><span class="line">    <span class="comment">//分配一个int二进制形式的最大字符的字符串</span></span><br><span class="line">    <span class="type">char</span> bin_st[CHAR_BIT * <span class="title function_">sizeof</span><span class="params">(<span class="type">int</span>)</span> + 1];<span class="comment">//预备存储字符串的数组</span></span><br><span class="line"></span><br><span class="line">    n1 = bstoi(argv[<span class="number">1</span>]);</span><br><span class="line">    n2 = bstoi(argv[<span class="number">2</span>]);</span><br><span class="line">    show_bstr(itobs(~n1, bin_st));</span><br><span class="line">    show_bstr(itobs(~n2, bin_st));</span><br><span class="line">    show_bstr(itobs(n1 &amp; n2, bin_st));</span><br><span class="line">    show_bstr(itobs(n1 | n2, bin_st));</span><br><span class="line">    show_bstr(itobs(n1 ^ n2, bin_st));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bstoi</span><span class="params">(<span class="type">char</span> * str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*str)</span><br><span class="line">    &#123;</span><br><span class="line">        num = num &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        num += (*str++ - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">itobs</span><span class="params">(<span class="type">int</span> num, <span class="type">char</span> *st)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> size = CHAR_BIT * <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, num &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        st[i] = (<span class="number">01</span> &amp; num) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    st[size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * st)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (st[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(st[i]);</span><br><span class="line">        <span class="keyword">if</span> (++i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; st[i])</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>左旋转二进制</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE CHAR_BIT * sizeof(unsigned int)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">rotate</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> , <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * st)</span>;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">itobs</span><span class="params">(<span class="type">char</span> *, <span class="type">unsigned</span> <span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> st[SIZE + <span class="number">1</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x = <span class="number">-3</span>;</span><br><span class="line"><span class="type">int</span> s = <span class="number">10</span>;</span><br><span class="line">show_bstr(itobs(st, x));</span><br><span class="line">x = rotate(x, s);</span><br><span class="line">show_bstr(itobs(st, x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">rotate</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n, <span class="type">int</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i++)</span><br><span class="line">&#123;<span class="comment">//要被丢弃的数，回到开头</span></span><br><span class="line">n = (n &lt;&lt; <span class="number">1</span>) + ((n &gt;&gt; (SIZE - <span class="number">1</span>)) &amp; <span class="number">01</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">itobs</span><span class="params">(<span class="type">char</span> * st, <span class="type">unsigned</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = SIZE - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, n &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">st[i] = (<span class="number">01</span> &amp; n) + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">st[SIZE] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * st)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (st[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(st[i]);</span><br><span class="line">        <span class="keyword">if</span> (++i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; st[i])</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序崩溃的可能原因</title>
      <link href="/2020/04/14/c/%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/"/>
      <url>/2020/04/14/c/%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>程序的崩溃的可能由于：</p><ol><li><p>擦拭调程序的代码（把赋值给野指针）</p></li><li><p>内存越界<br>数组下标越界和指针移动越界</p></li><li><p>参数错误</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s&#x27;s grade is %lf %lf %lf and your average is %lf\n&quot;</span>, </span><br><span class="line">            p[i].grade[<span class="number">0</span>], p[i].grade[<span class="number">1</span>], p[i].grade[<span class="number">2</span>], p[i].average);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>函数栈溢出</p></li><li><p>读取未赋值的变量</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂的声明（指针）</title>
      <link href="/2020/04/13/c/%E5%A4%8D%E6%9D%82%E7%9A%84%E5%A3%B0%E6%98%8E/"/>
      <url>/2020/04/13/c/%E5%A4%8D%E6%9D%82%E7%9A%84%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p><code>int p; //这是一个普通的整型变量 int *p; //首先从P 处开始,先与*结合,所以说明P 是一个指针,然后再与int 结合,说明指针所指向的内容的类型为int 型.所以P是一个返回整型数据的指针 int p[3]; //首先从P 处开始,先与[]结合,说明P 是一个数组,然后与int 结合,说明数组里的元素是整型的,所以P 是一个由整型数据组成的数组 int *p[3]; //首先从P 处开始,先与[]结合,因为其优先级比*高,所以P 是一个数组,然后再与*结合,说明数组里的元素是指针类型,然后再与int 结合,说明指针所指向的内容的类型是整型的,所以P 是一个由返回整型数据的指针所组成的数组 int (*p)[3]; //首先从P 处开始,先与*结合,说明P 是一个指针然后再与[]结合(与&quot;()&quot;这步可以忽略,只是为了改变优先级),说明指针所指向的内容是一个数组,然后再与int 结合,说明数组里的元素是整型的.所以P 是一个指向由整型数据组成的数组的指针 int **p; //首先从P 开始,先与*结合,说是P 是一个指针,然后再与*结合,说明指针所指向的元素是指针,然后再与int 结合,说明该指针所指向的元素是整型数据.由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我们就不考虑多级指针了,最多只考虑一级指针. int p(int); //从P 处起,先与()结合,说明P 是一个函数,然后进入()里分析,说明该函数有一个整型变量的参数,然后再与外面的int 结合,说明函数的返回值是一个整型数据 Int (*p)(int); //从P 处开始,先与指针结合,说明P 是一个指针,然后与()结合,说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个int 型的参数,再与最外层的int 结合,说明函数的返回类型是整型,所以P 是一个指向有一个整型参数且返回类型为整型的函数的指针 int *(*p(int))[3]; //可以先跳过,不看这个类型,过于复杂从P 开始,先与()结合,说明P 是一个函数,然后进入()里面,与int 结合,说明函数有一个整型变量参数,然后再与外面的*结合,说明函数返回的是一个指针,,然后到最外面一层,先与[]结合,说明返回的指针指向的是一个数组,然后再与*结合,说明数组里的元素是指针,然后再与int 结合,说明指针指向的内容是整型数据.所以P 是一个参数为一个整数据且返回一个指向由整型指针变量组成的数组的指针变量的函数.</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排错方法</title>
      <link href="/2020/04/13/Q&amp;A/%E6%8E%92%E9%94%99%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/13/Q&amp;A/%E6%8E%92%E9%94%99%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>debug</p></li><li><p>注释部分代码</p></li><li><p>提取部分代码测试</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数和指针</title>
      <link href="/2020/04/11/c/%E5%87%BD%E6%95%B0%E5%92%8C%E6%8C%87%E9%92%88/"/>
      <url>/2020/04/11/c/%E5%87%BD%E6%95%B0%E5%92%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先，了解两个不同的概念。</p><ol><li>函数指针<br>这是个指针。它指向函数的地址。</li><li>指针函数<br>这是个函数。它用来返回指针。</li></ol><h1 id="声明函数指针"><a href="#声明函数指针" class="headerlink" title="声明函数指针"></a>声明函数指针</h1><p>指针有它所对应的类型，比如<code>int*</code>，int类型的指针。所以函数指针也有其类型。<br>我们又知道，要将一个地址赋给一个指针，它们对应的类型要相同。</p><ul><li><p>首先，函数的声明有<strong>两要素。（1）函数的返回值 （2）函数接收的参数的类型</strong></p></li><li><p>如果有一个函数指针和一个函数，它们各自的两要素一样，这就可以让这个函数的地址赋给这个函数指针。</p></li><li><p>例如**声明函数指针时只需把<code>(*pf)</code>这个指针和<code>ToUpper</code>这个函数名换掉</p></li></ul><p>函数声明：<code>void ToUpper(char *);</code><br>函数指针的声明：<code>void (*pf)(char *);</code></p><p>**这样一来，<code>(*pf)</code>当作<code>ToUpper</code></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>这里<strong>必须要将*pf用()括起来</strong>。如果不，就成了指针函数了。</li><li>在以后调用函数也要()括起来</li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li><p>首先，我们要知道函数的地址怎么表示。数组就把数组名作为它的首元素地址。函数代码就把函数名作为函数起始处的地址。</p></li><li><p>赋函数地址给指针<br><code>pf = ToUpper</code></p></li><li><p>怎么通过函数指针调用函数<br>pf指针存有函数的地址，(*pf)()这个就是相当与ToUpper()。另外，还有pf()这种调用函数的方法也被认同。</p></li></ul><h1 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h1><ul><li>将函数指针作为函数的参数传递给函数。<br><code>void show(void (* fp)(char *), char * str);</code>&#x2F;&#x2F;接受函数指针</li></ul><figure class="highlight c"><figcaption><span>俩要素要相同，char*才是返回值噢</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">fun</span><span class="params">(<span class="type">char</span> *, <span class="type">char</span>)</span>;<span class="comment">//指针函数，返回指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* (*pp)(<span class="type">char</span> *, <span class="type">char</span>);<span class="comment">//这是一个函数指针，别忘了，char*才是返回值噢</span></span><br><span class="line">    pp = fun;<span class="comment">//它指向（指针函数)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">fun</span><span class="params">(<span class="type">char</span> *p, <span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>函数指针数组</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">f1</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">f2</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">f3</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">f4</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">10.0</span>, y = <span class="number">2.5</span>;</span><br><span class="line">    <span class="type">double</span> (*pf[<span class="number">4</span>])(<span class="type">double</span>, <span class="type">double</span>) = &#123;f1, f2, f3, f4&#125;;<span class="comment">//声明一个函数指针数组</span></span><br><span class="line"></span><br><span class="line">    (*pf[<span class="number">1</span>])(x, y);/这里的*pf[<span class="number">1</span>]一定要加(),才能表示为函数/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">f1</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>&#123;&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">f2</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">f3</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>&#123;&#125;</span><br><span class="line"><span class="type">double</span> <span class="title function_">f4</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流</title>
      <link href="/2020/04/10/c/%E6%B5%81/"/>
      <url>/2020/04/10/c/%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>流，就类似于流水。从一个地方到另一个地方。<br>文件流，数据流。它们是文件&#x2F;数据源与内存之间的传递。</p><h1 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h1><p>当我们打开文件时，磁盘里的文件会复制到内存中。为什么，要传递给内存呢？因为它读写数据更快。而内存中有个FILE的结构体变量，它用来保存这些信息。当我们关闭文件时，这些信息就会从这个变量中释放。</p><ol><li>输入流<br>文件从磁盘中复制到内存的过程</li><li>输出流<br>从内存保存文件到磁盘的过程</li></ol><h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p>数据源就是包括文件，网络，键盘等。</p><ol><li>输入流<br>数据从数据源——&gt;内存</li><li>输出流<br>数据从内存——&gt;数据源</li></ol><h1 id="I-O"><a href="#I-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h1><p>input output<br>程序在内存中，通过程序与外部设备(磁盘，键盘，其他计算机)进行交互的操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组与结构</title>
      <link href="/2020/04/10/c/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%BB%93%E6%9E%84/"/>
      <url>/2020/04/10/c/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p><strong>结构与数组的初始化都要用 {}</strong><br>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> first_name[LEN];</span><br><span class="line">    <span class="type">char</span> last_name[LEN];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span><span class="comment">//结构</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">name</span> <span class="title">names</span>;</span><span class="comment">//结构</span></span><br><span class="line">    <span class="type">float</span> grade[NUM];<span class="comment">//数组</span></span><br><span class="line">    <span class="type">float</span> average;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">score</span>[<span class="title">CSIZE</span>] =</span> &#123;</span><br><span class="line">    &#123;&#123;<span class="string">&quot;Zha&quot;</span>, <span class="string">&quot;Yujie&quot;</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;&#123;<span class="string">&quot;Jiang&quot;</span>, <span class="string">&quot;Wenjie&quot;</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;&#123;<span class="string">&quot;Liu&quot;</span>, <span class="string">&quot;Chengming&quot;</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;&#123;<span class="string">&quot;Pan&quot;</span>, <span class="string">&quot;Xiangxiang&quot;</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="结构数组的传递"><a href="#结构数组的传递" class="headerlink" title="结构数组的传递"></a>结构数组的传递</h1><p>C能传递整个结构。<br><strong>但C不能传递整个数组</strong>，可以传递首元素地址，在函数中关联这个数组。</p><ul><li><strong>当遇到结构数组时，</strong><br>要在函数中用地址关联这个数组，<strong>也只能传递结构数组的首元素的地址。</strong><br>这个元素就是一个结构。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ol><li>数组名 &#x3D; 数组的首元素地址<br><code>jones = &amp;jones[0]</code></li></ol><figure class="highlight c"><figcaption><span>注意是array of structures</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* funds4.c -- passing an array of structures to a function */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNDLEN 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">funds</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>   bank[FUNDLEN];</span><br><span class="line">    <span class="type">double</span> bankfund;</span><br><span class="line">    <span class="type">char</span>   save[FUNDLEN];</span><br><span class="line">    <span class="type">double</span> savefund;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> funds money[], <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">funds</span> <span class="title">jones</span>[<span class="title">N</span>] =</span> &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Garlic-Melon Bank&quot;</span>,</span><br><span class="line">            <span class="number">4032.27</span>,</span><br><span class="line">            <span class="string">&quot;Lucky&#x27;s Savings and Loan&quot;</span>,</span><br><span class="line">            <span class="number">8543.94</span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;Honest Jack&#x27;s Bank&quot;</span>,</span><br><span class="line">            <span class="number">3620.88</span>,</span><br><span class="line">            <span class="string">&quot;Party Time Savings&quot;</span>,</span><br><span class="line">            <span class="number">3802.91</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The Joneses have a total of $%.2f.\n&quot;</span>,</span><br><span class="line">           sum(jones,N));           <span class="comment">//jones = &amp;jones[0]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> funds money[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> total;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, total = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        total += money[i].bankfund + money[i].savefund;<span class="comment">//money是地址</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>(total);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MON 12</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">year</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> * m_name;</span><br><span class="line">    <span class="type">int</span> days;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Days</span><span class="params">(<span class="type">int</span>, <span class="keyword">struct</span> year *, <span class="type">int</span> *sum)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">year</span> <span class="title">month</span>[<span class="title">MON</span>];</span><span class="comment">//结构数组</span></span><br><span class="line">    <span class="type">char</span> * name[<span class="number">12</span>] = &#123;<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;Feb&quot;</span>, <span class="string">&quot;Mar&quot;</span>, <span class="string">&quot;Ari&quot;</span>, <span class="string">&quot;May&quot;</span>,</span><br><span class="line">     <span class="string">&quot;Jun&quot;</span>, <span class="string">&quot;Jul&quot;</span>, <span class="string">&quot;Aug&quot;</span>, <span class="string">&quot;Set&quot;</span>, <span class="string">&quot;Oct&quot;</span>, <span class="string">&quot;Nov&quot;</span>, <span class="string">&quot;Dem&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> mon, sum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MON; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        month[i].m_name = name[i];</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            month[i].days = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            month[i].days = <span class="number">30</span>;</span><br><span class="line">        month[i].m = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    month[<span class="number">1</span>].days = <span class="number">28</span>;<span class="comment">//不是闰年</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the month(else to quit): &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mon))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mon &lt;= <span class="number">12</span> &amp;&amp; mon &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            sum = Days(mon, month, &amp;sum);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Enter the month again: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> (<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Days</span><span class="params">(<span class="type">int</span> mon, <span class="keyword">struct</span> year * month, <span class="type">int</span> *sum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mon; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *sum += month[i].days;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>打印班级平均分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CSIZE 4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">name</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> fname[LEN];</span><br><span class="line">    <span class="type">char</span> lname[LEN];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">name</span> <span class="title">n</span>;</span></span><br><span class="line">    <span class="type">double</span> grade[<span class="number">3</span>];</span><br><span class="line">    <span class="type">double</span> average;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_grade</span><span class="params">(<span class="keyword">struct</span> student *, <span class="type">char</span> **)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">get_average</span><span class="params">(<span class="keyword">struct</span> student *)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">person</span>[<span class="title">CSIZE</span>] =</span> </span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="number">0</span>] = &#123;<span class="string">&quot;ferry&quot;</span>, <span class="string">&quot;chan&quot;</span>&#125;,</span><br><span class="line">        [<span class="number">1</span>] = &#123;<span class="string">&quot;faye&quot;</span>, <span class="string">&quot;chan&quot;</span>&#125;,</span><br><span class="line">        [<span class="number">2</span>] = &#123;<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;sion&quot;</span>&#125;,</span><br><span class="line">        [<span class="number">3</span>] = &#123;<span class="string">&quot;jim&quot;</span>, <span class="string">&quot;sion&quot;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">char</span> *str[] = &#123;<span class="string">&quot;ferry chan&quot;</span>, <span class="string">&quot;faye chan&quot;</span>, <span class="string">&quot;tom sion&quot;</span>, <span class="string">&quot;jim sion&quot;</span>&#125;;</span><br><span class="line">    get_grade(person, str);</span><br><span class="line">    get_average(person);</span><br><span class="line">    print(person);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The average of class is %lf&quot;</span>,</span><br><span class="line">    (person[<span class="number">0</span>].average + person[<span class="number">1</span>].average + person[<span class="number">2</span>].average + person[<span class="number">3</span>].average) / <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_grade</span><span class="params">(<span class="keyword">struct</span> student *p, <span class="type">char</span> **str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> fullname[LEN];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Enter stduent&#x27;s fullname: &quot;</span>);</span><br><span class="line">        s_gets(fullname, LEN);<span class="comment">//读入的时候要是数组类型，如果用指针，会乱指</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fullname, str[i]) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Enter your the %dth grade: &quot;</span>, j + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;(p[i].grade[j]));</span><br><span class="line">                getchar();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %s&#x27;s grade is %lf %lf %lf and your average is %lf\n&quot;</span>, </span><br><span class="line">            p[i].n.fname, p[i].n.lname, p[i].grade[<span class="number">0</span>], p[i].grade[<span class="number">1</span>], p[i].grade[<span class="number">2</span>], p[i].average);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_average</span><span class="params">(<span class="keyword">struct</span> student * p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += p[i].grade[j];</span><br><span class="line">        &#125;</span><br><span class="line">        p[i].average = sum / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * find;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line"></span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        find = <span class="built_in">strchr</span>(st, <span class="string">&#x27;\n&#x27;</span>);<span class="comment">//查找换行符</span></span><br><span class="line">        <span class="keyword">if</span> (find)</span><br><span class="line">            *find = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//替换为空字符</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//处理多余输入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误collect2:ld returned 1 exit status</title>
      <link href="/2020/04/10/Q&amp;A/%E9%94%99%E8%AF%AFcollect2-ld-returned-1-exit-status/"/>
      <url>/2020/04/10/Q&amp;A/%E9%94%99%E8%AF%AFcollect2-ld-returned-1-exit-status/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们遇到这种错误的时候，大多是因为编译器的位数为32位，编译时使用double类型就会发生这样的错误，或者编译过慢。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>更换成64位的编译器就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指向结构的指针</title>
      <link href="/2020/04/09/c/%E6%8C%87%E5%90%91%E7%BB%93%E6%9E%84%E7%9A%84%E6%8C%87%E9%92%88/"/>
      <url>/2020/04/09/c/%E6%8C%87%E5%90%91%E7%BB%93%E6%9E%84%E7%9A%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>结构指针与结构数组，他们一起使用时会更加方便。就像指针和数组。</p><ol><li><p>结构指针的声明<br><code>struct guy * him</code></p></li><li><p>指向 <code>him = &amp;fellow[0]</code><br>但是有一点需要注意：<strong>单纯的结构数组名没有作用</strong><br>数组的变量名是数组的首元素地址。结构数组的变量名<strong>不是结构数组的首结构地址</strong>。<br>所以但要将首结构的地址赋给指针时，要加上&amp;和[0]</p></li><li><p>用指针访问<br><code>him-&gt;handle.first</code>&#x2F;&#x2F;意义：用him指针指向成员的成员<br>等价于<br><code>(*him).handle.first</code>&#x2F;&#x2F;意义：取值为结构struct guy fellow[0]这个结构<br>这里必须要用()，因为.比*的优先级高。</p></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* friends.c -- uses pointer to a structure */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 20</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> first[LEN];</span><br><span class="line">    <span class="type">char</span> last[LEN];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">guy</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">handle</span>;</span><span class="comment">//结构嵌套</span></span><br><span class="line">    <span class="type">char</span> favfood[LEN];</span><br><span class="line">    <span class="type">char</span> job[LEN];</span><br><span class="line">    <span class="type">float</span> income;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">guy</span> <span class="title">fellow</span>[2] =</span> &#123;<span class="comment">//结构数组</span></span><br><span class="line">        &#123;&#123; <span class="string">&quot;Ewen&quot;</span>, <span class="string">&quot;Villard&quot;</span>&#125;,</span><br><span class="line">            <span class="string">&quot;grilled salmon&quot;</span>,</span><br><span class="line">            <span class="string">&quot;personality coach&quot;</span>,</span><br><span class="line">            <span class="number">68112.00</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;&#123;<span class="string">&quot;Rodney&quot;</span>, <span class="string">&quot;Swillbelly&quot;</span>&#125;,</span><br><span class="line">            <span class="string">&quot;tripe&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tabloid editor&quot;</span>,</span><br><span class="line">            <span class="number">432400.00</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">guy</span> * <span class="title">him</span>;</span>    <span class="comment">/* here is a pointer to a structure */</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;address #1: %p #2: %p\n&quot;</span>, &amp;fellow[<span class="number">0</span>], &amp;fellow[<span class="number">1</span>]);</span><br><span class="line">    him = &amp;fellow[<span class="number">0</span>];    <span class="comment">/* tell the pointer where to point  */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pointer #1: %p #2: %p\n&quot;</span>, him, him + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;him-&gt;income is $%.2f: (*him).income is $%.2f\n&quot;</span>,</span><br><span class="line">           him-&gt;income, (*him).income);</span><br><span class="line">    him++;               <span class="comment">/* point to the next structure      */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;him-&gt;favfood is %s:  him-&gt;handle.last is %s\n&quot;</span>,</span><br><span class="line">           him-&gt;favfood, him-&gt;handle.last);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体声明和初始化</title>
      <link href="/2020/04/09/c/%E7%BB%93%E6%9E%84%E4%BD%93%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/04/09/c/%E7%BB%93%E6%9E%84%E4%BD%93%E5%A3%B0%E6%98%8E%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="声明结构类型"><a href="#声明结构类型" class="headerlink" title="声明结构类型"></a>声明结构类型</h2><p>声明<code>struct person&#123;...&#125;;</code></p><ul><li><p><strong>这个struct person起的作用就是一般声明中的int</strong></p><p>例如：定义struct person类型的变量。<code>struct person ferry, *pferry</code></p></li><li><p>声明过程与定义结构变量，可以组合成一个步骤。</p></li></ul>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> /*无结构标记*/</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;library;</span><br></pre></td></tr></table></figure><ul><li><p>但如果要多次使用模板，就要加上标记。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>* <span class="title">lchild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br></pre></td></tr></table></figure></li></ul><p><strong>这时编译器还没有在内存中分配空间</strong>。什么时候开始分配呢，当然是在初始化变量的时候。</p><h2 id="初始化结构变量"><a href="#初始化结构变量" class="headerlink" title="初始化结构变量"></a>初始化结构变量</h2><p><code>struct person ferry;</code>这样就初始化了ferry这个变量，同时为该变量分配空间。<br>当然，我们可以用这结构类型定义多个变量。这样就可以存储不同的信息。</p><h2 id="初始化成员"><a href="#初始化成员" class="headerlink" title="初始化成员"></a>初始化成员</h2><p>在刚开始声明结构中就有表明了要什么样的数据类型，再到初始化变量的时候分配空间。<br>而，这些数据类型，就是一个个成员。<br>有两种方式：</p><ul><li>顺序初始化</li><li>指定初始化</li></ul><h2 id="调用成员"><a href="#调用成员" class="headerlink" title="调用成员"></a>调用成员</h2><p>在变量名的后面加　.　然后加上成员变量</p><figure class="highlight c"><figcaption><span>顺序初始化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 40</span></span><br><span class="line"><span class="comment">//声明一个标记为Person的结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">40</span>];<span class="comment">//声明一个字符数组</span></span><br><span class="line">    <span class="type">int</span> since;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">ferry</span> =</span> <span class="comment">//声明变量</span></span><br><span class="line">    &#123;<span class="comment">//顺序初始化</span></span><br><span class="line">        <span class="string">&quot;ferry&quot;</span>, <span class="comment">//逗号分隔</span></span><br><span class="line">        <span class="number">2020</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ferry.title);<span class="comment">//对结构体成员的引用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ferry.since);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>指定初始化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 40</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">40</span>];/</span><br><span class="line">    <span class="type">int</span> since;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">ferry</span> =</span></span><br><span class="line">    &#123;</span><br><span class="line">        .since = <span class="number">2020</span>,<span class="comment">//指定初始化</span></span><br><span class="line">        .title = <span class="string">&quot;blog&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ferry.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ferry.since);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取别名"><a href="#取别名" class="headerlink" title="取别名"></a>取别名</h2><p>为结构体取别名，使用<code>typedef</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></span><br><span class="line">    <span class="type">float</span> real;</span><br><span class="line">    <span class="type">float</span> imag;</span><br><span class="line">&#125;COMPLEX;</span><br></pre></td></tr></table></figure><p>这样就给complex这个结构取个别名COMPLEX。</p><p><strong>例如有这样的声明和定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">double</span> y;</span><br><span class="line">&#125;rect;</span><br><span class="line"></span><br><span class="line">rect r1 = &#123; <span class="number">3.0</span>, <span class="number">6.0</span> &#125;;</span><br><span class="line">rect r2;</span><br></pre></td></tr></table></figure><p><strong>那么就等价于：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">double</span> y;</span><br><span class="line">&#125;r1 = &#123; <span class="number">3.0</span>,<span class="number">6.0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">double</span> y;</span><br><span class="line">&#125;r2;</span><br></pre></td></tr></table></figure><p><strong>因为r1和r2是同种类型，<code>r2=r1</code>是对的</strong>。没有用typedef就不可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">double</span> x;</span><br><span class="line"><span class="type">double</span> y;</span><br><span class="line">&#125;rect;</span><br><span class="line"></span><br><span class="line">rect r1 = &#123; <span class="number">3.0</span>,<span class="number">6.0</span> &#125;;</span><br><span class="line">rect r2;</span><br><span class="line"></span><br><span class="line">r2 = r1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>again再探字符串输入的分配空间</title>
      <link href="/2020/04/08/c/%E5%86%8D%E6%8E%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5%E7%9A%84%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2020/04/08/c/%E5%86%8D%E6%8E%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5%E7%9A%84%E5%88%86%E9%85%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们平时使用<br><code>char str[] = &quot;ferry&quot;;</code>可以。<br><code>char str[10]; str = &quot;ferry&quot;;</code>不可以。<br>然鹅，还有给<strong>结构中的成员赋值的时候</strong>，可以直接用字符串初始化。这些原因都是因为开辟空间的问题。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p><strong>在初始化变量时，分配空间。结构也是如此。</strong></p><h2 id="不能将指针赋值给常量"><a href="#不能将指针赋值给常量" class="headerlink" title="不能将指针赋值给常量"></a>不能将指针赋值给常量</h2><p><code>char str1[]</code>是array type<br><strong>str1是常量，不是指针啊~</strong><br><code>char *str2</code><br><strong>str2是个指针(是个变量)</strong></p><figure class="highlight c"><figcaption><span>错误，不能给数组的地址（常量）赋值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">30</span>];<span class="comment">//已经分配好空间。</span></span><br><span class="line">    <span class="type">char</span> * str2;</span><br><span class="line">    str2 = <span class="string">&quot;ferry&quot;</span>;</span><br><span class="line">    str1 = str2;<span class="comment">//错误，str1是个地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果我想要给str1数组添加字符咋办？那就用<code>strcpy()</code>复制进去</strong></p><h2 id="可以将数组的地址赋给指针"><a href="#可以将数组的地址赋给指针" class="headerlink" title="可以将数组的地址赋给指针"></a>可以将数组的地址赋给指针</h2><figure class="highlight c"><figcaption><span>正确</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">30</span>] = <span class="string">&quot;ferry&quot;</span>;</span><br><span class="line">    <span class="type">char</span> * str2;</span><br><span class="line"></span><br><span class="line">    str2 = str1;<span class="comment">//字符数组的地址给指针</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(str2 + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构的说明"><a href="#结构的说明" class="headerlink" title="结构的说明"></a>结构的说明</h2><p>*<em>字符串在静态存储区，str[0]只不过是个地址，它指向了字符串。<em>str[0]只是一个字符‘o’</em></em></p><figure class="highlight c"><figcaption><span>只能以"<...>"这种字符串形式初始化</...></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="comment">//注意这里还没分配空间。</span></span><br><span class="line"><span class="type">char</span> first[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> last[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> * str[<span class="number">2</span>] = &#123;<span class="string">&quot;ok&quot;</span>, <span class="string">&quot;ko&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">//初始化，分配空间</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">veep</span> =</span> &#123;str[<span class="number">0</span>], str[<span class="number">1</span>]&#125;;<span class="comment">//Warning!!这里的str[0]存储的是个地址，不是字符串</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">names</span> <span class="title">treas</span> =</span> &#123;<span class="string">&quot;ok&quot;</span>, <span class="string">&quot;ko&quot;</span>&#125;;<span class="comment">//正确!!这里才是真正的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lens</span> &#123;</span><span class="comment">//typedef定义一种结构，名为LENS</span></span><br><span class="line">    <span class="type">float</span> foclen;</span><br><span class="line">    <span class="type">float</span> fstop;</span><br><span class="line">    <span class="type">char</span> brand[<span class="number">30</span>];<span class="comment">//预留空间，还没分配</span></span><br><span class="line">&#125;LENS;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//对每个成员单独赋值</span></span><br><span class="line">    LENS bigeyes[<span class="number">10</span>];<span class="comment">//结构数组</span></span><br><span class="line">    bigeyes[<span class="number">2</span>].foclen = <span class="number">500</span>;</span><br><span class="line">    bigeyes[<span class="number">2</span>].fstop = <span class="number">2.0</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(bigeyes[<span class="number">2</span>].brand, <span class="string">&quot;Remarkata&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用待指定初始化器</span></span><br><span class="line">    LENS smalleyes[<span class="number">10</span>] = &#123;</span><br><span class="line">        [<span class="number">2</span>] = &#123;</span><br><span class="line">            <span class="number">500</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;Remarkatar&quot;</span><span class="comment">//这里是初始化，开始分配空间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩文件(交互式)</title>
      <link href="/2020/04/07/c/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6-%E4%BA%A4%E4%BA%92%E5%BC%8F/"/>
      <url>/2020/04/07/c/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6-%E4%BA%A4%E4%BA%92%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="strncpy"><a href="#strncpy" class="headerlink" title="strncpy()"></a>strncpy()</h2><ul><li>作用<br>限制最大字符复制字符串，要比strcpy()更安全</li></ul><ol><li>参数<br>(字符串指针，被复制的字符串指针，最大个数)</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span><span class="comment">//提供exit()原型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span><span class="comment">//提供strcpy(),strcat()原型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 40</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[LEN];</span><br><span class="line">    <span class="type">char</span> file[LEN];</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> ct = <span class="number">0</span>;</span><br><span class="line">    FILE *in;</span><br><span class="line">    FILE *out;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please enter file name:&quot;</span>);</span><br><span class="line">    s_gets(name, LEN);<span class="comment">//会将换行符替换为&#x27;\0&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>((in = fopen(name, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open %s file&quot;</span>, name);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strncpy</span>(file, name, LEN);<span class="comment">//限制字符串不超过40</span></span><br><span class="line">    file[LEN - <span class="number">4</span>] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//超过40就截断</span></span><br><span class="line">    <span class="built_in">strcat</span>(file, <span class="string">&quot;.io&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>((out = fopen(file, <span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not create output file&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((ch = getc(in)) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        ct++;</span><br><span class="line">        <span class="keyword">if</span>(ct % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            putc(ch, out);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fclose(out) != <span class="number">0</span> || fclose(in) != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error in closing file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * find;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line"></span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        find = <span class="built_in">strchr</span>(st, <span class="string">&#x27;\n&#x27;</span>);<span class="comment">//查找换行符</span></span><br><span class="line">        <span class="keyword">if</span> (find)</span><br><span class="line">            *find = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//替换为空字符</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//处理多余输入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fread()和fwrite()</title>
      <link href="/2020/04/07/c/fread-%E5%92%8Cfwrite/"/>
      <url>/2020/04/07/c/fread-%E5%92%8Cfwrite/</url>
      
        <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><p>这两个函数是以<strong>二进制形式</strong>处理数据中，不同于其他I&#x2F;O函数，是以文本形式处理。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h2><ul><li>作用：将文件中的内容拷贝到数组中</li></ul><ol><li><p>参数：<br>(地址，数据块，数据块个数，文件指针)</p></li><li><p>返回值：<br>两种情况：1.返回文件中<strong>成功读取项的数量</strong>。2.<strong>遇到文件结尾返回0</strong></p></li></ol><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite()"></a>fwrite()</h2><ul><li>作用：<strong>将n个数据块拷贝到文件中</strong></li></ul><ol><li>参数<br>(地址，数据块，数据块的个数，文件指针)</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 256</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *in, *out;</span><br><span class="line">    <span class="type">int</span> bytes;</span><br><span class="line">    <span class="type">char</span> temp[SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((in = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;I couldn&#x27;t open the file \&quot;%s\&quot;\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((out = fopen(argv[<span class="number">2</span>], <span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;I couldn&#x27;t open the file \&quot;%s\&quot;\n&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把argv[1]文件中的256个以下的字符，copy到数组temp中，到文件结尾返回0</span></span><br><span class="line">    <span class="keyword">while</span> ((bytes = fread(temp, <span class="keyword">sizeof</span>(<span class="type">char</span>), <span class="number">256</span>, in)) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;<span class="comment">//把数组中的字符copy到argv[2]文件</span></span><br><span class="line">        fwrite(temp, <span class="keyword">sizeof</span>(<span class="type">char</span>), bytes, out);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(in);</span><br><span class="line">    fclose(out);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>将结构保存到文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXTITL 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXAUTL 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXBKS 10</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> title[MAXTITL];</span><br><span class="line"><span class="type">char</span> author[MAXAUTL];</span><br><span class="line"><span class="type">float</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> <span class="title">library</span>[<span class="title">MAXBKS</span>];</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> index, filecount;</span><br><span class="line">FILE * pbooks;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> book);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((pbooks = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;a+b&quot;</span>)) == <span class="literal">NULL</span>)<span class="comment">//在文件末尾写入，且以二进制打开</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;Can&#x27;t open book.dat file\n&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">rewind(pbooks);<span class="comment">//定位到文件开始，准备读取已有的内容</span></span><br><span class="line"><span class="keyword">while</span> (count &lt; MAXBKS &amp;&amp; fread(&amp;library[count], size, <span class="number">1</span>, pbooks) == <span class="number">1</span>)<span class="comment">//判断能否读取1项</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Curren contents of book.dat:&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s by %s: $%.2f\n&quot;</span>,  library[count].title,</span><br><span class="line"> library[count].author, library[count].value);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">filecount = count;</span><br><span class="line"><span class="keyword">if</span> (count == MAXBKS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">&quot;The book.dat file is full.&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始从键盘上读入数据</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Plese add new book titles.&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Press [enter] at the start of a line to stop.&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (count &lt; MAXBKS &amp;&amp; s_gets(library[count].title, MAXTITL) != <span class="literal">NULL</span></span><br><span class="line">&amp;&amp; library[count].title[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Now enter the author.&quot;</span>);</span><br><span class="line">s_gets(library[count].author, MAXAUTL);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Now enter the value&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;library[count++].value);</span><br><span class="line"><span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">//清空输入行</span></span><br><span class="line"><span class="keyword">if</span> (count &lt; MAXBKS)</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Enter the next title.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Here is the list of your books:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(index = <span class="number">0</span>; index &lt; count; index++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s by %s: %.2f\n&quot;</span>, library[index].title, library[index].author</span><br><span class="line"> ,library[index].value);</span><br><span class="line">fwrite(&amp;library[filecount], size, count - filecount, pbooks);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No books? Too bad.\n&quot;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Bye.\n&quot;</span>);</span><br><span class="line">fclose(pbooks);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> * ret_val;</span><br><span class="line"><span class="type">char</span> * find;</span><br><span class="line">ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">if</span>(ret_val)</span><br><span class="line">&#123;</span><br><span class="line">find = <span class="built_in">strchr</span>(st, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (find)</span><br><span class="line">*find = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准文件(万物皆文件)</title>
      <link href="/2020/04/06/c/%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%9A%84%E6%8C%87%E9%92%88/"/>
      <url>/2020/04/06/c/%E6%A0%87%E5%87%86%E6%96%87%E4%BB%B6%E7%9A%84%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><blockquote><p>stdio.h头文件把<strong>3个文件指针(stdin,stdout,stderr)</strong>，与<strong>3个标准文件</strong>相关联。C程序会自动打开这3个标准文件</p></blockquote><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>唉？为什么跟我们平时所看到的文件（word文档，txt文件。。。）不一样？那么这些文件又是放在哪里，是在磁盘吗？</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>操作系统为了对各种硬件进行操作，简化接口。所以，把电脑的硬件设备也看成了文件。<br>如：scanf()函数的作用，就是从stdin（键盘）上面获取信息。<br>printf()函数的作用，就是从stdout（显示器）上输出信息。</p><h2 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h2><ol><li>指针：stdin</li><li>设备：键盘</li></ol><h2 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h2><ol><li>指针：stdout</li><li>设备：显示器</li></ol><h2 id="标准错误"><a href="#标准错误" class="headerlink" title="标准错误"></a>标准错误</h2><ol><li>指针：stderr</li><li>设备：显示器</li></ol><p>有了这个基础，可以暂时看作<strong>万物皆文件</strong></p><h1 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h1><ol><li>这两行代码本质上一样</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;%s&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>这行的区别也只不过是写在标准错误上</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(strerr, <span class="string">&quot;%s&quot;</span>, <span class="built_in">string</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向行fgets()和fputs()</title>
      <link href="/2020/04/06/c/fgets-%E5%92%8Cfputs/"/>
      <url>/2020/04/06/c/fgets-%E5%92%8Cfputs/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该函数是面向行操作。<br>不同于，getc()是处理字符</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h2><ul><li>作用<br>把读入的内容添加到字符串中。</li></ul><ol><li>参数<br>(字符串地址，字符个数，FILE指针)</li><li>返回值<br>如果读到文件结尾（EOF），返回NULL<br>如果还没有到EOF，返回之前传给它的字符串地址</li><li>范围<blockquote><p>1.读取到第一个换行符后面。<br>2.读到文件结尾<br>3.读到<code>字符个数-1</code><br>4.如果读到字符上限已经读完一行，则会把结尾的’\n’放在’\0’前面<br><strong>最后，在最后一个字符后面加’\0’</strong></p></blockquote></li></ol><p>Don’t forget ！<br>字符串的大小是：<strong>字符个数＋最后的空字符</strong></p><h2 id="fputs"><a href="#fputs" class="headerlink" title="fputs()"></a>fputs()</h2><ul><li>参数<br>(字符串地址，FILE指针)</li></ul><blockquote><p>fgets()保留了换行符，fputs()不会再添加换行符<br>不同于puts()函数会在末尾添加换行符</p></blockquote><h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h2><ul><li>作用<br><strong>查找字符串中要查找的字符串</strong></li></ul><ol><li><p>参数<br>(被查找的字符串str1，需要的字符串str2)</p></li><li><p>返回值<br>返回str1中str2的首位置</p></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>显示含有某个字符的一整行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 256</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">has_ch</span><span class="params">(<span class="type">char</span> ch, <span class="type">const</span> <span class="type">char</span> * line)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">char</span> line[SIZE];<span class="comment">//每一行的字符串</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: filename&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    ch = argv[<span class="number">1</span>][<span class="number">0</span>];<span class="comment">//获取第二个参数的第一个字符</span></span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(argv[<span class="number">2</span>], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//fgets()假设每一行不超过256个字符,或读到换行符，然后存储到字符串line[]中</span></span><br><span class="line">    <span class="keyword">while</span>(fgets(line, SIZE, fp) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (has_ch(ch, line))</span><br><span class="line">            <span class="built_in">fputs</span>(line, <span class="built_in">stdout</span>);<span class="comment">//输出本行字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">has_ch</span><span class="params">(<span class="type">char</span> ch, <span class="type">const</span> <span class="type">char</span> * line)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(*line)<span class="comment">//读到&#x27;\0&#x27;结束</span></span><br><span class="line">        <span class="keyword">if</span>(ch == *(line++))</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>交换地输出两个文件的每一行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 256</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name1[SIZE];</span><br><span class="line">    <span class="type">char</span> name2[SIZE];</span><br><span class="line">    FILE * f1, *f2;</span><br><span class="line">    <span class="type">char</span> *temp1;<span class="comment">//将被fgets()返回字符串地址，或者NULL</span></span><br><span class="line">    <span class="type">char</span> *temp2;</span><br><span class="line">    <span class="type">char</span> str[LEN];<span class="comment">//暂时存储每一行</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the first file: &quot;</span>);</span><br><span class="line">    s_gets(name1, SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter the second file: &quot;</span>);</span><br><span class="line">    s_gets(name2, SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((f1 = fopen(name1, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open the %s file&quot;</span>, name1);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((f2 = fopen(name2, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open the %s file&quot;</span>, name2);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这样做，只能但输出到最少行的文件，循环就结束了（不可取）</span></span><br><span class="line"><span class="comment">    如果我们用||运算符的话，一真全真，右侧语句就短路了，就不能给temp2字符数组赋值了（也不可取）</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    while ((fgets(str1, LEN, f1) != NULL) &amp;&amp; (fgets(str2, LEN, f2) != NULL))</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        fputs(str1, stdout);</span></span><br><span class="line"><span class="comment">        fputs(str2, stdout);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/*但我们可以</span></span><br><span class="line"><span class="comment">    先把 fgets()函数提取出来，另外用if语句判断</span></span><br><span class="line"><span class="comment">    再用 || 运算符</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((temp1 = fgets(str, LEN, f1)) != <span class="literal">NULL</span>)<span class="comment">//如果其中一个读到文件结尾，</span></span><br><span class="line">            <span class="built_in">fputs</span>(str, <span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">if</span>((temp2 = fgets(str, LEN, f2)) != <span class="literal">NULL</span>)<span class="comment">//则不输出。</span></span><br><span class="line">            <span class="built_in">fputs</span>(str, <span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> ((temp1 != <span class="literal">NULL</span>) || (temp2 != <span class="literal">NULL</span>));<span class="comment">//要两个文件都读到文件结尾才结束</span></span><br><span class="line">    </span><br><span class="line">    fclose(f1);</span><br><span class="line">    fclose(f2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>在文件中查找字符</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 256</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">char</span> str[LEN];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Usage: %s filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((fp = fopen(argv[<span class="number">2</span>], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open %s file&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(fgets(str, LEN, fp) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(str, argv[<span class="number">1</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fputs</span>(str, <span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fclose(fp) != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error for closing file.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fprintf()和fscanf()</title>
      <link href="/2020/04/06/c/fprintf-%E5%92%8Cfscanf/"/>
      <url>/2020/04/06/c/fprintf-%E5%92%8Cfscanf/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两个函数与printf()和scanf()函数类似。<br>scanf()printf()的返回值为<strong>成功输入的数据个数</strong><br>如<br>scanf（”%d%d%s”,&amp;a,&amp;b,s）;执行成功返回3.<br>scanf（”%d%d”,&amp;a,&amp;b）;执行成功返回2.</p><p>如果在输入的过程中scanf(“%d%d”,&amp;a,&amp;b);由于某种原因只有a输入成功了则返回1，a、b都没成功则返回0</p><p>如果遇到错误或遇到end of file，返回EOF（一般宏定义EOF为-1）。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>加多第一个参数(FILE指针)</p><h2 id="rewind"><a href="#rewind" class="headerlink" title="rewind();"></a>rewind();</h2><ol><li>参数：FILE指针</li><li>作用<br>回到文件开头</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>输入到文件中</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 41</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">char</span> words[MAX];<span class="comment">//临时存储每个字符串。</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;wordy&quot;</span>, <span class="string">&quot;a+&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;Can&#x27;t open \&quot;wordy\&quot; file.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter words to add to the file; press the #&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;key at the beginning of a line to terminate.&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((<span class="built_in">fscanf</span>(<span class="built_in">stdin</span>,<span class="string">&quot;%40s&quot;</span>, words) == <span class="number">1</span>)  &amp;&amp; (words[<span class="number">0</span>] != <span class="string">&#x27;#&#x27;</span>))</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\n&quot;</span>, words);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;File contents:&quot;</span>);</span><br><span class="line">    rewind(fp);           <span class="comment">/* go back to beginning of file */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s&quot;</span>,words) == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">puts</span>(words);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp) != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Error closing file\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((<span class="built_in">fscanf</span>(<span class="built_in">stdin</span>,<span class="string">&quot;%40s&quot;</span>, words) == <span class="number">1</span>)  &amp;&amp; (words[<span class="number">0</span>] != <span class="string">&#x27;#&#x27;</span>))</span><br><span class="line">     <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\n&quot;</span>, words);</span><br></pre></td></tr></table></figure><ol><li>fscanf()的文件指针是<code>stdin</code>是从键盘中进行标准输入，并且将输入的<strong>每个字符串</strong>用while循环存储到字符串<code>works[]</code><br><strong>即等于<code>scanf(&quot;%s&quot;, words);</code></strong></li><li>fprintf()的文件指针是fp，就是将words每个字符串，一个一个地输入到文件。</li><li><a href="https://ferrychan666.github.io/2020/03/20/c/scanf()%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/">scanf与%s</a></li></ol><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s&quot;</span>,words) == <span class="number">1</span>)</span><br><span class="line">     <span class="built_in">puts</span>(words);</span><br></pre></td></tr></table></figure><ol><li>fscanf()的文件指针是fp，将文件中的每个字符串（到空白字符结束）逐个读入words中，并逐个puts函数输出。</li></ol>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向字符getc()和putc()</title>
      <link href="/2020/04/06/c/getc()%E5%92%8Cputc()/"/>
      <url>/2020/04/06/c/getc()%E5%92%8Cputc()/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面向字符操作。</p><p>这两个函数类似于getchar()和puchar(‘ch’)。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><strong>在后面加多一个参数(FILE指针)</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen()"></a>fopen()</h2><ol><li>函数声明：在stdio.h中</li><li>参数<br>(文件名，读写等模式)</li><li>返回：文件指针<br><code>FILE * fp;</code><blockquote><p>文件指针并不指向实际的文件，它指向一个包含文件信息的数据对象，其中包含I&#x2F;O函数所用的缓冲区信息。</p></blockquote></li></ol><h2 id="getc"><a href="#getc" class="headerlink" title="getc()"></a>getc()</h2><p><strong>类似于getchar()</strong></p><ol><li>参数<br>(FILE指针)</li><li>返回：文件中的一个字符<blockquote><p>与getchar()函数类似，getchar()是从<code>标准输入</code>中获取字符。而，getc()是从指定文件中获取字符</p></blockquote></li></ol><h2 id="putc"><a href="#putc" class="headerlink" title="putc()"></a>putc()</h2><p><strong>类似于putchar()</strong></p><ol><li>参数<br>(一个字符，FILE指针)</li><li>作用<br>将这个字符放入指定的文件中</li></ol><h2 id="exit"><a href="#exit" class="headerlink" title="exit()"></a>exit()</h2><ol><li>函数声明：在stdlib.h头文件中</li><li>参数<br>正常结束传递0，非正常传递非0值.</li><li>作用<br>关闭所有打开文件，并结束程序<blockquote><p>与return 不同的是：在main()以外的函数中调用exit()也能结束整个程序</p></blockquote></li></ol><h2 id="fclose"><a href="#fclose" class="headerlink" title="fclose()"></a>fclose()</h2><ol><li>参数<br>FILE指针</li><li>作用<br>关闭指定文件</li><li>返回<br>成功关闭：0<br>不成功：EOF</li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><figcaption><span>将文件copy到其他文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span><span class="comment">//提供exit()的原型</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>*argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *in;<span class="comment">//要被复制的文件指针</span></span><br><span class="line">    FILE *out;<span class="comment">//要复制到的文件指针</span></span><br><span class="line">    <span class="type">int</span> ch;<span class="comment">//存储每个字符</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>)<span class="comment">//如果参数不是3就退出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((in = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)<span class="comment">//如果argv[1]是空指针，就退出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> ((out = fopen(argv[<span class="number">2</span>], <span class="string">&quot;w+&quot;</span>)) == <span class="literal">NULL</span>)<span class="comment">//如果argv[2]是空指针，就退出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t open %s&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((ch = getc(in)) != EOF)<span class="comment">//循环读入一个字符，直到文件结尾</span></span><br><span class="line">    &#123;</span><br><span class="line">        putc(ch, out);<span class="comment">//将这个字符放入FILE指针指定的文件中</span></span><br><span class="line">        count++;<span class="comment">//增加计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(in) != <span class="number">0</span>);<span class="comment">//关闭文件</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error in closing file %s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;File %s has %lu characters\n&quot;</span>, argv[<span class="number">1</span>], count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>转换为大写文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 40</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE * fs;<span class="comment">//原始文件指针</span></span><br><span class="line">    FILE * ft;<span class="comment">//目标文件指针</span></span><br><span class="line">    <span class="type">char</span> name_s[SIZE];</span><br><span class="line">    <span class="type">char</span> <span class="type">name_t</span>[SIZE];</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入原始文件和目标文件名</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Please enter the source file name:\n&quot;</span>);</span><br><span class="line">    s_gets(name_s, SIZE);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;Please enter the target file name:\n&quot;</span>);</span><br><span class="line">    s_gets(<span class="type">name_t</span>, SIZE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打开原始文件和目标文件</span></span><br><span class="line">    <span class="keyword">if</span> ((fs = fopen(name_s, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open the %s\n&quot;</span>, name_s);</span><br><span class="line">    <span class="keyword">if</span> ((ft = fopen(<span class="type">name_t</span>, <span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Could not open the %s\n&quot;</span>, <span class="type">name_t</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拷贝数据</span></span><br><span class="line">    <span class="keyword">while</span> ((ch = getc(fs)) != EOF)</span><br><span class="line">        putc(<span class="built_in">toupper</span>(ch), ft);</span><br><span class="line">    </span><br><span class="line">    fclose(fs);</span><br><span class="line">    fclose(ft);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//自定义读取文件名的函数</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * find;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line"></span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        find = <span class="built_in">strchr</span>(st, <span class="string">&#x27;\n&#x27;</span>);<span class="comment">//查找换行符</span></span><br><span class="line">        <span class="keyword">if</span> (find)</span><br><span class="line">            *find = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//替换为空字符</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//处理多余输入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>输出文件内容(命令行)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((fp = fopen(argv[i], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)<span class="comment">//判断文件存在，并赋值给文件指针</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Cound not open %s file&quot;</span>, argv[i]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ((ch = getc(fp)) != EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            putc(ch, <span class="built_in">stdout</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout(布局)</title>
      <link href="/2020/04/02/java/swing/%E5%B8%83%E5%B1%80/"/>
      <url>/2020/04/02/java/swing/%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">container.setLayout(<span class="keyword">new</span> <span class="title class_">Layout</span>的类())</span><br></pre></td></tr></table></figure><h1 id="null布局"><a href="#null布局" class="headerlink" title="null布局"></a>null布局</h1><p><strong>传给Layout()null参数</strong><br><strong>再setBounds(,,,,)按钮的坐标和大小</strong><br><img src="https://i.ibb.co/Nj0CPR2/104730054558f32934057c39f9f5841.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 绝对布局;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">c.setLayout(<span class="literal">null</span>);<span class="comment">//设置布局</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮1&quot;</span>);<span class="comment">//新建按钮对象</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮2&quot;</span>);</span><br><span class="line">b1.setBounds(<span class="number">20</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">30</span>);<span class="comment">//按钮坐标，大小</span></span><br><span class="line">b2.setBounds(<span class="number">100</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">40</span>);</span><br><span class="line">c.add(b1);  <span class="comment">//添加到容器中</span></span><br><span class="line">c.add(b2);</span><br><span class="line">setVisible(<span class="literal">true</span>);<span class="comment">//最后设置可见</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h1><ol><li>给<code>c.setLayout( )</code>new 一个FlowLayout类</li><li>FlowLayout类的构造方法参数<br><code>FlowLayout(Flowlayout.&lt;左右对齐&gt;, 左右间隔， 上下间隔)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> 流布局;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">setBounds(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane(); <span class="comment">//创建容器</span></span><br><span class="line"></span><br><span class="line">c.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT,<span class="number">50</span>, <span class="number">20</span>));<span class="comment">//设置容器布局</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//添加按钮</span></span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;按钮&quot;</span> + i + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">setVisible(<span class="literal">true</span>);<span class="comment">//最后设置可见</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h1><ol><li>给setLayout()new一个BorderLayout类</li><li>将按钮添加到容器中，需要指定位置<br>c.add(&lt;按钮&gt;, 位置参数)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 边界布局;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">setBounds(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line"></span><br><span class="line">c.setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line"><span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;东&quot;</span>),<span class="comment">//创建按钮</span></span><br><span class="line">b2 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;西&quot;</span>),</span><br><span class="line">b3 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;南&quot;</span>),</span><br><span class="line">b4 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;北&quot;</span>),</span><br><span class="line">b5 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;中&quot;</span>);</span><br><span class="line"><span class="comment">//添加到容器中,并将按钮指定布局位置</span></span><br><span class="line">c.add(b1, BorderLayout.EAST);</span><br><span class="line">c.add(b2, BorderLayout.WEST);</span><br><span class="line">c.add(b3, BorderLayout.SOUTH);</span><br><span class="line">c.add(b4, BorderLayout.NORTH);</span><br><span class="line">c.add(b5, BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">//再创建一个按钮，覆盖原来位置</span></span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;覆盖&quot;</span>), BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GridLayout-网格布局"><a href="#GridLayout-网格布局" class="headerlink" title="GridLayout(网格布局)"></a>GridLayout(网格布局)</h1><ol><li>给setlayout()new一个GridLayout类。<br>参数</li></ol><hr><p><img src="https://i.ibb.co/nDYzSzL/e92a95e4476d7bbd9e68522e3f987e2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">c.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">20</span>));<span class="comment">//创建网格布局，4行5列，元素间距</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;按钮&quot;</span> + (i+<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line">setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Label类（标签）</title>
      <link href="/2020/04/02/java/swing/Label%E7%B1%BB/"/>
      <url>/2020/04/02/java/swing/Label%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul><li>改变字体<br><code>setFont(，，，)</code></li><li>获取url<br>URL url &#x3D; Demo.class.getResource(“file.png”)</li><li>获取url路径的文件<br><code>Icon icon = new ImageIcon(url)</code></li><li>添加图片<br><code>setIcon()</code></li></ul><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 标签;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Container;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line"><span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;My name is ferry&quot;</span>);<span class="comment">//初始内容</span></span><br><span class="line">l.setText(<span class="string">&quot;ferry chan&quot;</span>);<span class="comment">//修改内容</span></span><br><span class="line">l.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, Font.BOLD, <span class="number">20</span>));<span class="comment">//字体，加粗，大小</span></span><br><span class="line"></span><br><span class="line">c.add(l);<span class="comment">//添加组件</span></span><br><span class="line">setVisible(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 展示图片;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Container;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.scene.image.Image;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">100</span>, <span class="number">700</span>, <span class="number">700</span>);</span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line"><span class="type">JLabel</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;展示图片&quot;</span>);</span><br><span class="line"><span class="comment">//URL url = Demo.class.getResource(&quot;kali.png&quot;);//获取url</span></span><br><span class="line"><span class="comment">//Icon icon = new ImageIcon(url);//获取路径下的图片文件</span></span><br><span class="line"><span class="type">Icon</span> <span class="variable">icon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(<span class="string">&quot;src/展示图片/kali.png&quot;</span>);<span class="comment">//第二种方法，直接将url作为参数</span></span><br><span class="line">l.setIcon(icon);<span class="comment">//添加图片</span></span><br><span class="line">c.add(l);</span><br><span class="line">setVisible(<span class="literal">true</span>);<span class="comment">//把设置可见函数放最后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDialog窗体</title>
      <link href="/2020/04/02/java/swing/JDialog%E7%AA%97%E4%BD%93/"/>
      <url>/2020/04/02/java/swing/JDialog%E7%AA%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>在父窗体中调用对话框</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span> &#123;</span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();<span class="comment">//创建容器</span></span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;我是对话框&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">JFrame</span> <span class="variable">jf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;父窗体&quot;</span>);<span class="comment">//创建父窗体</span></span><br><span class="line">jf.setVisible(<span class="literal">true</span>);<span class="comment">//可见</span></span><br><span class="line">jf.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line">jf.setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>);<span class="comment">//设置坐标，大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> jf.getContentPane();<span class="comment">//设置容器</span></span><br><span class="line">c.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());<span class="comment">//设置布局，使用流布局</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;弹出对话框&quot;</span>);<span class="comment">//添加组件，按钮</span></span><br><span class="line">c.add(btn);<span class="comment">//将组件添加到容器中</span></span><br><span class="line"></span><br><span class="line">btn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;<span class="comment">//匿名内部类</span></span><br><span class="line"><span class="type">Demo</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">d.setVisible(<span class="literal">true</span>);<span class="comment">//可见</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>将父窗体阻塞</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyJDialog</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyJDialog</span><span class="params">(MyFrame frame)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(frame, <span class="string">&quot;Hi&quot;</span>, <span class="literal">true</span>);<span class="comment">//初始化，进行阻塞</span></span><br><span class="line">setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;我是对话框&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">()</span> &#123;</span><br><span class="line">setVisible(<span class="literal">true</span>);</span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">c.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());<span class="comment">//设置布局，使用流布局</span></span><br><span class="line"><span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;弹出对话框&quot;</span>);</span><br><span class="line">c.add(btn);</span><br><span class="line"></span><br><span class="line">btn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyJDialog</span>(MyFrame.<span class="built_in">this</span>).setVisible(<span class="literal">true</span>);<span class="comment">//调用对话框，可见</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swing组件</title>
      <link href="/2020/04/02/java/swing/swing%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/04/02/java/swing/swing%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.ibb.co/k45KqmB/1151ba1d9ecd77a37a77beb213f4ae6.png"><br><img src="https://i.ibb.co/6Bsj4Cq/afb151f6363cc35d809796ae2d31cb7.png"><br><img src="https://i.ibb.co/fvkf7gh/04b1bc7a38f93f0cc607809b06e9049.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JFrame窗体</title>
      <link href="/2020/04/02/java/swing/swing%E4%B8%AD%E7%9A%84JFrame/"/>
      <url>/2020/04/02/java/swing/swing%E4%B8%AD%E7%9A%84JFrame/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 创建JFrame窗体;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">//继承JFrame，以下方法都来源于JFrame类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example1</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;<span class="comment">//让Example1成为一个窗体</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Example1</span><span class="params">()</span> &#123;<span class="comment">//构造方法，与类同名</span></span><br><span class="line">setVisible(<span class="literal">true</span>);<span class="comment">//让窗口可见</span></span><br><span class="line">setTitle(<span class="string">&quot;Hello&quot;</span>);<span class="comment">//窗口标题</span></span><br><span class="line">setDefaultCloseOperation(EXIT_ON_CLOSE);<span class="comment">//窗口关闭，并结束程序</span></span><br><span class="line">setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">200</span>);<span class="comment">//窗口大小,和坐标</span></span><br><span class="line"></span><br><span class="line"><span class="type">Container</span> <span class="variable">c</span>  <span class="operator">=</span> getContentPane();<span class="comment">//获取窗口容器</span></span><br><span class="line">c.setBackground(Color.white);<span class="comment">//背景颜色</span></span><br><span class="line"><span class="type">JLabel</span> <span class="variable">xxx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;I&#x27;m Ferry&quot;</span>);<span class="comment">//标签内容</span></span><br><span class="line">c.add(xxx);<span class="comment">//添加组件,把标签添加到容器中</span></span><br><span class="line"><span class="comment">// c.remove(xxx);//删除组件</span></span><br><span class="line">c.validate();<span class="comment">//刷新容器中的组件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Example1</span>();<span class="comment">//新建一个窗口对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> swing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态内存与指针</title>
      <link href="/2020/03/31/c/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>/2020/03/31/c/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p>malloc()<br>以字节为参数，<strong>以内存块的首字节地址为返回值</strong>。</p></li><li><p>free()<br>以指针为参数，<strong>它只释放指针指针向的内存块</strong><br>例如：free(p);这时，p指向的内存没有了，可是<strong>p这个指针还存在</strong></p></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 40</span></span><br><span class="line"><span class="type">char</span> * * <span class="title function_">mal_ar</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> words, i;</span><br><span class="line">    <span class="type">char</span> * * st;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;How many words do you wish to enter? &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;words);</span><br><span class="line">    getchar();<span class="comment">//滤掉回车</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter %d words now:\n&quot;</span>, words);</span><br><span class="line">    st = mal_ar(words);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Here are your words:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; words; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(st[i]);</span><br><span class="line">        <span class="built_in">free</span>(st[i]);<span class="comment">//释放每个指针指向的内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(st);<span class="comment">//释放指针数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * * <span class="title function_">mal_ar</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * * pt;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给n个指针分配动态内存空间，返回指针的指针</span></span><br><span class="line">    pt = (<span class="type">char</span> * *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给每个指针指向的地址分配内存空间</span></span><br><span class="line">        pt[i] = (<span class="type">char</span> *)<span class="built_in">malloc</span>(SIZE * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="comment">//可以仅用scanf(&quot;%s&quot;, pt[i]);</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isspace</span>(ch = getchar()))<span class="comment">//处理单词之前的空格符</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        pt[i][<span class="number">0</span>] = ch;<span class="comment">//单词首字符</span></span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isspace</span>(pt[i][j] = getchar()))</span><br><span class="line">            j++;</span><br><span class="line">        pt[i][j] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//将末尾的空格替换为\0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>当scanf()读入后，缓冲区还有<strong>回车</strong>，如果要再次scanf()应用**getchar()**删掉回车。</li></ul>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口</title>
      <link href="/2020/03/30/java/%E6%8E%A5%E5%8F%A3/"/>
      <url>/2020/03/30/java/%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道，java中，<br>一个类只能有一个父类。但是，如果，我们想要实现的方法在父类中没有，那怎么办呢？<br>这个时候就需要接口。<br><img src="https://i.ibb.co/b6t2VDy/0a0901ba569ee3955958705c8bec979.jpg"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>可以把接口看成纯粹的抽象类，因为里面都是抽象方法。</li><li>一个类可以同时实现多个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Do</span> implements 接口<span class="number">1</span>，接口<span class="number">2</span> ...</span><br></pre></td></tr></table></figure><h2 id="接口与类的区别"><a href="#接口与类的区别" class="headerlink" title="接口与类的区别"></a>接口与类的区别</h2><ol><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">drawTest</span> &#123; <span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>; <span class="comment">// 定义方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义平行四边形类，该类继承了四边形类，并实现了drawTest接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParallelogramgleUseInterface</span> <span class="keyword">extends</span> <span class="title class_">QuadrangleUseInterface</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">drawTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123; <span class="comment">// 由于该类实现了接口，所以需要覆盖draw()方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;平行四边形.draw()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doAnyThing</span><span class="params">()</span> &#123; <span class="comment">// 覆盖父类方法</span></span><br><span class="line"><span class="comment">// SomeSentence</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SquareUseInterface</span> <span class="keyword">extends</span> <span class="title class_">QuadrangleUseInterface</span> <span class="keyword">implements</span></span><br><span class="line"><span class="title class_">drawTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;正方形.draw()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doAnyThing</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// SomeSentence</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnyThingUseInterface</span> <span class="keyword">extends</span> <span class="title class_">QuadrangleUseInterface</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doAnyThing</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuadrangleUseInterface</span> &#123; <span class="comment">// 定义四边形类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAnyTthing</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// SomeSentence</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">drawTest[] d = &#123; <span class="comment">// 接口也可以进行向上转型操作</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SquareUseInterface</span>(), <span class="keyword">new</span> <span class="title class_">ParallelogramgleUseInterface</span>() &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; d.length; i++) &#123;</span><br><span class="line">d[i].draw(); <span class="comment">// 调用draw()方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类的继承（super)</title>
      <link href="/2020/03/29/java/%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%EF%BC%88super/"/>
      <url>/2020/03/29/java/%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%EF%BC%88super/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道子类能够改写父类的方法(例如叫:do)，然后覆盖.从此,用子类调用do方法只能调那个被改写的do，如果我想用子类调用那个被覆盖的do怎么办呢?<br>OK，就要用super关键字</p><h1 id="super"><a href="#super" class="headerlink" title="super"></a>super</h1><p>super关键字，能在子类中调用父类的属性，方法，和构造方法</p><ul><li>super调用父类的构造方法</li></ul><figure class="highlight java"><figcaption><span>父类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;<span class="comment">//构造方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>子类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> <span class="keyword">extends</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Test2</span><span class="params">()</span> &#123;<span class="comment">//构造方法</span></span><br><span class="line"><span class="built_in">super</span>();<span class="comment">//调用父类构造方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因为构造方法中没有参数,所以可以不写</strong>编译器会自动,调用父类的无参构造方法<br><strong>(如果有就要写构造方法,并在括号中加上参数)</strong></p><ul><li>super调用父类属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.name = <span class="built_in">super</span>.name;</span><br></pre></td></tr></table></figure><ul><li>调用父类的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.hello();</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>java中<br><strong>一个类只能有一个父类</strong></p><p><strong>子类不仅覆盖了父类的方法还会覆盖父类的属性</strong></p><p><strong>子类能使用父类的属性和方法,还能添加属性和方法,还能重写父类的属性和方法</strong></p>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2020/03/29/java/%E5%A4%9A%E6%80%81/"/>
      <url>/2020/03/29/java/%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>多态就是一种事物的多种形态。</p><h2 id="存在的条件"><a href="#存在的条件" class="headerlink" title="存在的条件"></a>存在的条件</h2><ul><li>继承</li><li>重写</li><li>向上转型（父类引用指向子类对象）</li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String kinds)</span> &#123;<span class="comment">//构造方法</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;创建一个&quot;</span> + kinds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;<span class="comment">//父类的方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Fish</span><span class="params">(String kinds)</span> &#123;<span class="comment">//子类的构造方法</span></span><br><span class="line"><span class="built_in">super</span>(kinds);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;<span class="comment">//改写父类的方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;swim&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String kinds)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(kinds);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Animal</span> <span class="variable">xx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;动物&quot;</span>);</span><br><span class="line"><span class="type">Animal</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fish</span>(<span class="string">&quot;fish&quot;</span>);<span class="comment">//这个动物变成了鱼（多态）</span></span><br><span class="line">jack.move();</span><br><span class="line">jack = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;狗&quot;</span>);<span class="comment">//鱼变成了狗（多态）</span></span><br><span class="line">jack.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上下转型</title>
      <link href="/2020/03/29/java/%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B/"/>
      <url>/2020/03/29/java/%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://i.ibb.co/bXxpLt6/bcaec43814b2875cee430a972fc877a.jpg"></p><h2 id="为什么要向上转型？"><a href="#为什么要向上转型？" class="headerlink" title="为什么要向上转型？"></a>为什么要向上转型？</h2><p>我们直接用继承父类的子类实例化子类对象不就好了吗？这不就可以既能访问子类的对象，也能访问父类对象了吗？如果我们要用被覆盖的父类的方法或者属性，那么用super调用不就好了吗？</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><ol><li>就是将<strong>子类对象赋值给父类类型的变量</strong>。</li><li>向上转型是为了用父类变量来接受不同的子类对象，调用方法的时候传参父类对象，可以调用子类里不同的重写方法，得到不同的结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight java"><figcaption><span>父类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小动物在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSleep</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        <span class="comment">// 此时的参数是父类对象，但是实际调用时传递的是子类对象，就是向上转型。</span></span><br><span class="line">        animal.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        animal.doSleep(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">        animal.doSleep(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>第一个子类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>第二个子类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">猫正在睡觉</span><br><span class="line">狗正在睡觉</span><br></pre></td></tr></table></figure><p>如果不用向上转型则必须写两个 doSleep 方法，一个传递 Cat 类对象，一个传递 Dog 类对象。这还是两个子类，如果有多个子类就要写很多相同的方法，造成重复。可以看出向上转型更好的体现了类的多态性，增强了程序的间接性以及提高了代码的可扩展性。当需要用到子类特有的方法时可以向下转型，这也就是为什么要向下转型。</p><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p><strong>必须强制转换</strong><br><strong>使用向下转型，必须先向上转型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Doctor</span>();<span class="comment">//向上转型</span></span><br><span class="line"><span class="type">Doctor</span> <span class="variable">dr</span> <span class="operator">=</span> (Doctor)jack;<span class="comment">//才能让jack向下转型当医生</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git ugage</title>
      <link href="/2020/03/27/git/git%20usage/"/>
      <url>/2020/03/27/git/git%20usage/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-Git"><a href="#What-is-Git" class="headerlink" title="What is Git?"></a>What is Git?</h1><p>Git is a popular version control system.</p><p>It is used for:</p><ul><li>Tracking code changes</li><li>Tracking who made changes</li><li>Coding collaboration</li></ul><h1 id="Git-Getting-Started"><a href="#Git-Getting-Started" class="headerlink" title="Git Getting Started"></a>Git Getting Started</h1><h2 id="Git-Install"><a href="#Git-Install" class="headerlink" title="Git Install"></a>Git Install</h2><p>You can download Git for free from the following website: <a href="https://git-scm.com/">https://www.git-scm.com/</a></p><h2 id="Configure-Git"><a href="#Configure-Git" class="headerlink" title="Configure Git"></a>Configure Git</h2><p>Now let Git know who you are. This is important for version control systems, as each Git commit uses this information:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&quot;</span><br><span class="line">git config --global user.email &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="Initialize-Git"><a href="#Initialize-Git" class="headerlink" title="Initialize Git"></a>Initialize Git</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">cd myproject</span><br><span class="line">git init </span><br></pre></td></tr></table></figure><p>Now create a file, index.html, and add it in this folder.</p><p>Then we check the Git <code>status</code> and see if it is a part of our repo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add ...&quot; to include in what will be committed)</span><br><span class="line">    index.html</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><p>Now Git is <strong>aware</strong> of the file, but has not <strong>added</strong> it to our repository!</p><p>Files in your Git repository folder can be in one of 2 states:</p><ul><li>Tracked - files that Git knows about and are added to the repository</li><li>Untracked - files that are in your working directory, but not added to the repository</li></ul><h1 id="Git-Staging-Environment"><a href="#Git-Staging-Environment" class="headerlink" title="Git Staging Environment"></a>Git Staging Environment</h1><p>As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or <strong>finish a part of the work</strong>, you should add the files to a Staging Environment.</p><p>For now, we are done working with <code>index.html</code>. So we can add it to the Staging Environment:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add index.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached ...&quot; to unstage)</span><br><span class="line">    new file: index.html</span><br></pre></td></tr></table></figure><p>Now the file has been added to the Staging Environment. </p><p>Using <code>--all</code> instead of individual filenames will <code>stage</code> all changes (new, modified, and deleted) files.</p><p>The shorthand command for <code>git add --all</code> is <code>git add -A</code></p><h1 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h1><p>Adding commits keep track of our progress and changes as we work. Git considers each <code>commit</code> change point or “save point”. It is a point in the project you can go back to if you find a bug, or want to make a change.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;First release of Hello World!&quot;</span><br><span class="line">[master (root-commit) 221ec6e] First release of Hello World!</span><br><span class="line"> 3 files changed, 26 insertions(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"> create mode 100644 bluestyle.css</span><br><span class="line"> create mode 100644 index.html</span><br></pre></td></tr></table></figure><h2 id="Git-Commit-without-Stage"><a href="#Git-Commit-without-Stage" class="headerlink" title="Git Commit without Stage"></a>Git Commit without Stage</h2><p>Sometimes, when you make small changes, using the staging environment seems like a waste of time. It is possible to commit changes directly, skipping the staging environment. The <code>-a</code> option will automatically stage every changed, already tracked file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m &quot;Updated index.html with a new line&quot;</span><br><span class="line">[master 09f4acd] Updated index.html with a new line</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><h2 id="Git-Commit-Log"><a href="#Git-Commit-Log" class="headerlink" title="Git Commit Log"></a>Git Commit Log</h2><p>To view the history of commits for a repository, you can use the <code>log</code> command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">commit 09f4acd3f8836b7f6fc44ad9e012f82faf861803 (HEAD -&gt; master)</span><br><span class="line">Author: w3schools-test </span><br><span class="line">Date:   Fri Mar 26 09:35:54 2021 +0100</span><br><span class="line"></span><br><span class="line">    Updated index.html with a new line</span><br><span class="line"></span><br><span class="line">commit 221ec6e10aeedbfd02b85264087cd9adc18e4b26</span><br><span class="line">Author: w3schools-test </span><br><span class="line">Date:   Fri Mar 26 09:13:07 2021 +0100</span><br><span class="line"></span><br><span class="line">    First release of Hello World!</span><br></pre></td></tr></table></figure><h1 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h1><p>In Git, a <code>branch</code> is a new&#x2F;separate version of the main repository.</p><p><strong>Branches allow you to work on different parts of a project without impacting the main branch.</strong></p><p>When the work is complete, a branch can be merged with the main project.</p><h2 id="New-Git-Branch"><a href="#New-Git-Branch" class="headerlink" title="New Git Branch"></a>New Git Branch</h2><p>We are working in our local repository, and we do not want to disturb or possibly wreck the main project.</p><p>So we create a new <code>branch</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch hello-world-images</span><br></pre></td></tr></table></figure><p>Now we created a new <code>branch</code> called “<code>hello-world-images</code>“</p><p>Let’s confirm that we have created a new <code>branch</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">  hello-world-images</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p><code>checkout</code> is the command used to check out a <code>branch</code>. Moving us <strong>from</strong> the current <code>branch</code>, <strong>to</strong> the one specified at the end of the command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout hello-world-images</span><br><span class="line">Switched to branch &#x27;hello-world-images&#x27;</span><br></pre></td></tr></table></figure><p>We are currently on the branch <code>hello-world-images</code>. We added an image to this branch, so let’s list the files in the current directory:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">README.md  bluestyle.css  img_hello_world.jpg  index.html</span><br></pre></td></tr></table></figure><p>Now, let’s see what happens when we change branch to <code>master</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">ls</span><br><span class="line">README.md  bluestyle.css  index.html</span><br></pre></td></tr></table></figure><p>The new image is not a part of this branch. </p><h2 id="Emergency-Branch"><a href="#Emergency-Branch" class="headerlink" title="Emergency Branch"></a>Emergency Branch</h2><p>Now imagine that we are not yet done with hello-world-images, but we need to fix an error on master.</p><p>I don’t want to mess with master directly, and I do not want to mess with hello-world-images, since it is not done yet. So we create a new branch to deal with the emergency:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b emergency-fix</span><br><span class="line">Switched to a new branch &#x27;emergency-fix&#x27;</span><br></pre></td></tr></table></figure><p>Now we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.</p><p>We have made changes in this file, and we need to get those changes to the master branch.</p><p>stage the file, and commit:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add index.html</span><br><span class="line">git commit -m &quot;updated index.html with emergency fix&quot;</span><br><span class="line">[emergency-fix dfa79db] updated index.html with emergency fix</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><h1 id="Git-Branch-Merge"><a href="#Git-Branch-Merge" class="headerlink" title="Git Branch Merge"></a>Git Branch Merge</h1><p>We have the emergency fix ready, and so let’s merge the master and emergency-fix branches.</p><p>First, we need to change to the master branch. Now we merge the current branch (master) with emergency-fix:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">git merge emergency-fix</span><br><span class="line">Updating 09f4acd..dfa79db</span><br><span class="line">Fast-forward</span><br><span class="line"> index.html | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>As master and emergency-fix are essentially the same now, we can delete emergency-fix, as it is no longer needed:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d emergency-fix</span><br><span class="line">Deleted branch emergency-fix (was dfa79db).</span><br></pre></td></tr></table></figure><h2 id="Merge-Conflict"><a href="#Merge-Conflict" class="headerlink" title="Merge Conflict"></a>Merge Conflict</h2><p>Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html.</p><p>Now, we are done with our work here and can stage and commit for this branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit -m &quot;added new image&quot;</span><br><span class="line">[hello-world-images 1f1584e] added new image</span><br><span class="line"> 2 files changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 img_hello_git.jpg</span><br></pre></td></tr></table></figure><p>We see that index.html has been changed in both branches. Now we are ready to merge hello-world-images into master. But what will happen to the changes we recently made in master?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge hello-world-images</span><br><span class="line">Auto-merging index.html</span><br><span class="line">CONFLICT (content): Merge conflict in index.html</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>The merge failed, as there is conflict between the versions for index.html. Let us check the status:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">        new file:   img_hello_git.jpg</span><br><span class="line">        new file:   img_hello_world.jpg</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add ...&quot; to mark resolution)</span><br><span class="line">        both modified:   index.html</span><br></pre></td></tr></table></figure><p><strong>This confirms there is a conflict in index.html, but the image files are ready and staged to be committed.</strong></p><p>So we need to fix that conflict.</p><p>The conflict has been fixed, and we can use commit to conclude the merge:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;merged with hello-world-images after fixing conflicts&quot;</span><br><span class="line">[master e0b6038] merged with hello-world-images after fixing conflicts</span><br></pre></td></tr></table></figure><p>And delete the hello-world-images branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d hello-world-images</span><br><span class="line">Deleted branch hello-world-images (was 1f1584e).</span><br></pre></td></tr></table></figure><h1 id="Git-Reset"><a href="#Git-Reset" class="headerlink" title="Git Reset"></a>Git Reset</h1><p><code>reset</code> is the command we use when we want to move the repository back to a previous <code>commit</code>, discarding any changes made after that <code>commit</code>.</p><p>First thing, we need to find the point we want to return to. To do that, we need to go through the <code>log</code>.</p><p>To avoid the very long <code>log</code> list, we are going to use the <code>--oneline</code> option, which gives just one line per <code>commit</code> showing:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br><span class="line">e56ba1f (HEAD -&gt; master) Revert &quot;Just a regular update, definitely no accidents here...&quot;</span><br><span class="line">52418f7 Just a regular update, definitely no accidents here...</span><br><span class="line">9a9add8 (origin/master) Added .gitignore</span><br><span class="line">81912ba Corrected spelling error</span><br><span class="line">3fdaa5b Merge pull request #1 from w3schools-test/update-readme</span><br></pre></td></tr></table></figure><p>We want to return to the <code>commit</code>: <code>9a9add8 (origin/master) Added .gitignore</code>, the last one before we started to mess with things.</p><p>We <code>reset</code> our repository back to the specific commit using <code>git reset *commithash*</code> (<code>*commithash*</code> being the first 7 characters of the commit hash we found in the <code>log</code>):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 9a9add8</span><br></pre></td></tr></table></figure><p>Now let’s check the <code>log</code> again:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log --oneline</span><br><span class="line">9a9add8 (HEAD -&gt; master, origin/master) Added .gitignore</span><br><span class="line">81912ba Corrected spelling error</span><br><span class="line">3fdaa5b Merge pull request #1 from w3schools-test/update-readme</span><br></pre></td></tr></table></figure><h2 id="Git-Undo-Reset"><a href="#Git-Undo-Reset" class="headerlink" title="Git Undo Reset"></a>Git Undo Reset</h2><p>Even though the commits are no longer showing up in the <code>log</code>, it is not removed from Git.</p><p>If you know the commit hash you can <code>reset</code> to it:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset e56ba1f</span><br></pre></td></tr></table></figure><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="Git-push-into-GitHub"><a href="#Git-push-into-GitHub" class="headerlink" title="Git push into GitHub"></a>Git push into GitHub</h2><p>First, we create a remote repo in Github. Now we are going to <code>push</code> our local repo to Github. </p><p><code>git remote add origin *URL*</code> specifies that you are adding a remote repository, with the specified <code>URL</code>, as an <code>origin</code> to your local Git repo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/FerryChan666/Project.git</span><br></pre></td></tr></table></figure><p>Now we are going to push our master branch to the origin url, and set it as the default remote branch:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>Now, go back into GitHub and see that the repository has been updated.</p><h2 id="Git-Pull-from-GitHub"><a href="#Git-Pull-from-GitHub" class="headerlink" title="Git Pull from GitHub"></a>Git Pull from GitHub</h2><p>Any time you start working on a project, you should get the most recent changes to your local copy.</p><p>With Git, you can do that with <code>pull</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><h2 id="GitHub-Branch"><a href="#GitHub-Branch" class="headerlink" title="GitHub Branch"></a>GitHub Branch</h2><h3 id="Create-a-New-Branch-on-GitHub"><a href="#Create-a-New-Branch-on-GitHub" class="headerlink" title="Create a New Branch on GitHub"></a>Create a New Branch on GitHub</h3><p>On GitHub, access your repository and click the “master” branch button.</p><p>There you can create a new Branch. Type in a descriptive name, and click Create branch:</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象思想(this,return)</title>
      <link href="/2020/03/26/java/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/"/>
      <url>/2020/03/26/java/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>面向对象的思想在主方法中,主要实现:</p><ol><li>建对象</li><li>给参数</li><li>要什么方法就调用</li></ol><h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ul><li><p>类的成员变量：<br>定义在方法外可以被类方法访问的是成员变量。按照java的编码规范，成员变量一般被定义成private权限。</p></li><li><p>类的属性：<br>类的成员变量中，外界可以通过set方法和get方法对成员变量进行操作，那么这个成员变量就是类的属性。</p></li><li><p><code>this.</code>这个关键字主要用于引用本类中的成员变量或者方法<strong>将局部变量的值传递给成员变量</strong><br><strong>给成员变量是为了给本类中的方法使用</strong><br>由于有时类中的属性名和方法中的参数名有时相同,所以目的为了区分类的属性和参数两者.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Public Class Student &#123; </span><br><span class="line"> String name; <span class="comment">//定义一个成员变量name</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">SetName</span><span class="params">(String name)</span>&#123;  <span class="comment">//定义一个参数(局部变量)name</span></span><br><span class="line">  <span class="built_in">this</span>.name = name; <span class="comment">//将局部变量的值传递给成员变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 矩形面积;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ferry</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> width;  <span class="comment">//属性（成员变量）</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> height;</span><br><span class="line"><span class="comment">//构造函数,给参数,下定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Ferry</span><span class="params">(<span class="type">float</span> height, <span class="type">float</span> width)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.height = height;<span class="comment">//将参数（局部变量）给成员变量</span></span><br><span class="line"><span class="built_in">this</span>.width = width;  <span class="comment">//是为了让本类中的square方法使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">square</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> height * width;<span class="comment">//可以直接使用属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;<span class="comment">//这样，即可实现，</span></span><br><span class="line"><span class="type">Ferry</span> <span class="variable">area</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ferry</span>(<span class="number">2.5f</span>, <span class="number">4.0f</span>);<span class="comment">//1.创建对象2.直接给长和宽</span></span><br><span class="line">System.out.println(area.square());<span class="comment">//3.就能直接得出面积</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>局部，成员(实例)，静态变量</title>
      <link href="/2020/03/26/java/%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%B1%80%E9%83%A8%EF%BC%8C%E6%88%90%E5%91%98%EF%BC%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
      <url>/2020/03/26/java/%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%B1%80%E9%83%A8%EF%BC%8C%E6%88%90%E5%91%98%EF%BC%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h6 id="通过以下代码可以得知创建了两对象。不同对象的访问成员变量时，它们的值不会互相干预。"><a href="#通过以下代码可以得知创建了两对象。不同对象的访问成员变量时，它们的值不会互相干预。" class="headerlink" title="通过以下代码可以得知创建了两对象。不同对象的访问成员变量时，它们的值不会互相干预。"></a>通过以下代码可以得知创建了两对象。不同对象的访问成员变量时，它们的值不会互相干预。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransferProperty</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">47</span>; <span class="comment">// 定义成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; <span class="comment">// 定义成员方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;调用call()方法&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TransferProperty</span><span class="params">()</span> &#123; <span class="comment">// 定义构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TransferProperty</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransferProperty</span>(); <span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="type">TransferProperty</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransferProperty</span>(); <span class="comment">// 创建另一个对象</span></span><br><span class="line">t2.i = <span class="number">60</span>; <span class="comment">// 将类成员变量赋值为60</span></span><br><span class="line"><span class="comment">// 使用第一个对象调用类成员变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一个实例对象调用变量i的结果：&quot;</span> + t1.i++);</span><br><span class="line">t1.call(); <span class="comment">// 使用第一个对象调用类成员方法</span></span><br><span class="line"><span class="comment">// 使用第二个对象调用类成员变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;第二个实例对象调用变量i的结果：&quot;</span> + t2.i);</span><br><span class="line">t2.call(); <span class="comment">// 使用第二个对象调用类成员方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个实例对象调用变量i的结果：47</span><br><span class="line">调用call()方法</span><br><span class="line">0 1 2</span><br><span class="line"></span><br><span class="line">第二个实例对象调用变量i的结果：60</span><br><span class="line">调用call()方法</span><br><span class="line">0 1 2</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h6 id="如果将i成员变量-上static，变成静态变量。这样i的值就会被这两个对象同时干预。"><a href="#如果将i成员变量-上static，变成静态变量。这样i的值就会被这两个对象同时干预。" class="headerlink" title="如果将i成员变量+上static，变成静态变量。这样i的值就会被这两个对象同时干预。"></a>如果将<code>i</code>成员变量+上<code>static</code>，变成静态变量。这样<code>i</code>的值就会被这两个对象同时干预。</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessProperty</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">47</span>; <span class="comment">// 定义静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123; <span class="comment">// 定义成员方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;调用call()方法&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AccessProperty</span><span class="params">()</span> &#123; <span class="comment">// 定义构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// 定义主方法</span></span><br><span class="line"><span class="type">AccessProperty</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessProperty</span>(); <span class="comment">// 创建一个对象</span></span><br><span class="line"><span class="type">AccessProperty</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessProperty</span>(); <span class="comment">// 创建另一个对象</span></span><br><span class="line">t2.i = <span class="number">60</span>; <span class="comment">// 将类成员变量赋值为60</span></span><br><span class="line"><span class="comment">// 使用第一个对象调用类成员变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一个实例对象调用变量i的结果：&quot;</span> + t1.i++);</span><br><span class="line">t1.call(); <span class="comment">// 使用第一个对象调用类成员方法</span></span><br><span class="line"><span class="comment">// 使用第二个对象调用类成员变量</span></span><br><span class="line">System.out.println(<span class="string">&quot;第二个实例对象调用变量i的结果：&quot;</span> + t2.i);</span><br><span class="line">t2.call(); <span class="comment">// 使用第二个对象调用类成员方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个实例对象调用变量i的结果：60</span><br><span class="line">调用call()方法</span><br><span class="line">0 1 2</span><br><span class="line"></span><br><span class="line">第二个实例对象调用变量i的结果：3</span><br><span class="line">调用call()方法</span><br><span class="line">0 1 2</span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="关于内存的分配"><a href="#关于内存的分配" class="headerlink" title="关于内存的分配"></a>关于内存的分配</h2><ul><li>而这有什么根本原因呢?。<br><img src="https://i.ibb.co/JRC30SF/1462a5697bdea190b76cffd5c251955.png"><br>可以知道，<br>当对象被实例化之后，每个实例变量（成员变量）就被确定，可以又很多个副本。<br>但是，静态变量是存储在静态存储区，无论创建了多少个对象，静态变量只有一份拷贝。</li></ul><h2 id="区分实例变量和静态变量"><a href="#区分实例变量和静态变量" class="headerlink" title="区分实例变量和静态变量"></a>区分实例变量和静态变量</h2><p>通过<code>static</code>，因为他们都在类中，方法外。</p>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建</title>
      <link href="/2020/03/26/java/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/"/>
      <url>/2020/03/26/java/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java中的一起都可以看作对象，包括字符串也是一个对象。<br>一般我们用<code>new</code>操作符创建一个对象。而我们知道字符串对象有两种定义方法。</p><ol><li><code>String str = &quot;xxx&quot;;</code></li><li><code>String str = new String(&quot;xxx&quot;);</code></li></ol><ul><li>为什么第一种可以直接赋值呢？</li><li>new新建一个对象有什么含义呢？</li></ul><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><ul><li>构造方法，是一个<strong>与类同名的方法</strong>，<strong>用来创建对象</strong>。（有参数，或者没参数，有则是初始化）</li></ul><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="对象源于类"><a href="#对象源于类" class="headerlink" title="对象源于类"></a>对象源于类</h2><p>于下图，Test就表示一个类，类声明一个test对象。等于构造方法。<br>而也解释了字符串赋值的原因。<br><img src="https://i.ibb.co/VvWHLKz/8c9bcfe28c7f67fe70caaecf24f793b.jpg"></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">book</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构造方法中可以为成员变量赋值，这样可以在实例化对象时，初始化成员变量。、</li><li>如果没有明确构造方法，则编译器将自动创建无参数的构造方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转排序算法</title>
      <link href="/2020/03/25/java/%E5%8F%8D%E8%BD%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/25/java/%E5%8F%8D%E8%BD%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>将一个数组反向排序</p><h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><ul><li>将数组除以2，因为舍弃小数的缘故，所以适合将前面一半与后面一半调换。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 反转排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 反转排序 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= len / <span class="number">2</span>; i++) &#123;<span class="comment">//只需要除2</span></span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[len - i - <span class="number">1</span>];</span><br><span class="line">arr[len - i - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a : arr)</span><br><span class="line">System.out.print(a + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>数组的下标从0开始，到<code>length - 1</code>结束</li></ul>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接选择排序算法</title>
      <link href="/2020/03/25/algorithm/%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2020/03/25/algorithm/%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><p><strong>把数往后放</strong><br>从大到小的话，就把小的放后面<br>从小到大的话，就把大的放后面</p><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="https://i.ibb.co/tJfF4tC/0defcd61bcdd83f932458f67946308a.jpg"></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//为什么从1开始？</span></span><br><span class="line"><span class="comment">//因为我已经将 index = 0 了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//因为是最后一个数，要加 = 号噢</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到每轮最值的索引</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &lt; arr[index])</span><br><span class="line">index = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//与最后的数交换</span></span><br><span class="line">temp = arr[index];</span><br><span class="line">arr[index] = arr[<span class="number">10</span> - i];</span><br><span class="line">arr[<span class="number">10</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;从大到小：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 直接选择排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 直接选择排序 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">25</span>, <span class="number">22</span>, <span class="number">30</span>, <span class="number">04</span>, <span class="number">13</span>&#125;;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;<span class="comment">//表明找最大值多少次(第一个元素不用理会)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//最大值的索引</span></span><br><span class="line"><span class="comment">//找数组最大值索引的办法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= arr.length - i; j++) &#123;<span class="comment">//遍历（排除已经找到最大值的）数组，找最大</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[index]) &#123;<span class="comment">//查找数组中的每一个元素，是否比索引的值的大</span></span><br><span class="line">index = j;   <span class="comment">//大就让索引等于它的下标，</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把最大的数放在最后面（与最后的元素交换）</span></span><br><span class="line">temp = arr[index];</span><br><span class="line">arr[index] = arr[arr.length - i];</span><br><span class="line">arr[arr.length - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a : arr)</span><br><span class="line">System.out.print(a + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一样，要想从大到小只需改变if语句的符号</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序算法</title>
      <link href="/2020/03/25/algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/03/25/algorithm/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h1><h2 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h2><p>就是将每一轮将最大的数往挪到最后。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>逐一比较数组中相邻的值，将大的数往后放（将小数往后放）。</li></ul><ol><li>n个数</li><li>比较n-1躺</li><li>每趟n-i次（i为趟数）</li></ol><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="https://i.ibb.co/0J45xBW/a688ae57280e1d6cf367a99ed4256b5.jpg" alt="photo"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bubble</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">arr[i] = s.nextInt();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (flag &amp;&amp; m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; arr.length; n++) &#123;</span><br><span class="line">System.out.print(arr[n] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果需要将数组从大到小，只需改变，比较if语句的比较大小。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类型</title>
      <link href="/2020/03/20/c/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/03/20/c/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>enum Day<br>{mon, tue, wed, thu, fir, sat, sun};<br>枚举类型是为了减少繁多的整数定义。诸如mon（默认&#x3D;0）,tue这些是枚举符（int类型的常量）<strong>对应一个数字。</strong></p><ul><li>可以给枚举列表中的常量赋值</li><li>没有赋值的枚举符会根据前面被赋予的常量++</li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>mon, tue，把这些看作常量。</strong></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span>    //<span class="title">Day</span>是类型名，可不写</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   mon, tue, wed = <span class="number">1</span>, thu, fir, sat, sun</span><br><span class="line">&#125;day;       <span class="comment">//变量名</span></span><br></pre></td></tr></table></figure><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><ul><li>给枚举变量赋值，然后输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    mon, tue, wed, thu, fir, sat, sun</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Day</span> <span class="title">day</span>;</span><span class="comment">//定义变量</span></span><br><span class="line">    day = tue;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以用for循环遍历元素(要依赖连续的++值，中间不能有赋值)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(day = wed; day &lt;= sun; day++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,day);          <span class="comment">//输出1， 2， 3， 4，5</span></span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* enum.c -- uses enumerated values */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>    <span class="comment">// for strcmp(), strchr()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span>   <span class="comment">// C99 feature</span></span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="comment">//枚举类型（常量的数组）</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">spectrum</span> &#123;</span>red, orange, yellow, green, blue, violet&#125;;</span><br><span class="line"><span class="comment">//字符串数组</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> * colors[] = &#123;<span class="string">&quot;red&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;violet&quot;</span>&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 30</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> choice[LEN];</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">spectrum</span> <span class="title">color</span>;</span><span class="comment">//定义color变量表示枚举符（常量）</span></span><br><span class="line">    <span class="type">bool</span> color_is_found = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter a color (empty line to quit):&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (s_gets(choice, LEN) != <span class="literal">NULL</span> &amp;&amp; choice[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (color = red; color &lt;= violet; color++)<span class="comment">//常量的使用</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(choice, colors[color]) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                color_is_found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (color_is_found)</span><br><span class="line">            <span class="keyword">switch</span>(color)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> red    : <span class="built_in">puts</span>(<span class="string">&quot;Roses are red.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> orange : <span class="built_in">puts</span>(<span class="string">&quot;Poppies are orange.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> yellow : <span class="built_in">puts</span>(<span class="string">&quot;Sunflowers are yellow.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> green  : <span class="built_in">puts</span>(<span class="string">&quot;Grass is green.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> blue   : <span class="built_in">puts</span>(<span class="string">&quot;Bluebells are blue.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> violet : <span class="built_in">puts</span>(<span class="string">&quot;Violets are violet.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;I don&#x27;t know about the color %s.\n&quot;</span>, choice);</span><br><span class="line">        color_is_found = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Next color, please (empty line to quit):&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">s_gets</span><span class="params">(<span class="type">char</span> * st, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> * ret_val;</span><br><span class="line">    <span class="type">char</span> * find;</span><br><span class="line">    </span><br><span class="line">    ret_val = fgets(st, n, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret_val)</span><br><span class="line">    &#123;</span><br><span class="line">        find = <span class="built_in">strchr</span>(st, <span class="string">&#x27;\n&#x27;</span>);   <span class="comment">// look for newline</span></span><br><span class="line">        <span class="keyword">if</span> (find)                  <span class="comment">// if the address is not NULL,</span></span><br><span class="line">            *find = <span class="string">&#x27;\0&#x27;</span>;          <span class="comment">// place a null character there</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;          <span class="comment">// dispose of rest of line</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret_val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串输入&#39;char*和char[]&#39;</title>
      <link href="/2020/03/20/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5/"/>
      <url>/2020/03/20/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><ul><li>定义<br><code>char* a</code>这个a是变量, 可以修改<br><code>char b[]</code>这个b是常量， 不能改变</li></ul><h2 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h2><ul><li>一个指针，一个数组</li></ul><figure class="highlight c"><figcaption><span>没有开辟空间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* str;      <span class="comment">//没有开辟空间</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);<span class="comment">//虽然可以读入，但指针是乱指的，可能会擦拭本来的程序导致崩溃</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br></pre></td></tr></table></figure><blockquote><p>这里在C primer plus上看到，这里的参数是个未初始化的指针，str会指向任何地方。所以，有可能会scanf改写某个地址上的值，从而擦掉程序中的代码。导致程序异常结束。</p></blockquote><figure class="highlight c"><figcaption><span>开辟空间</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* st;</span><br><span class="line">st = <span class="string">&quot;hello&quot;</span>;        <span class="comment">//开辟空间</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, st);</span><br></pre></td></tr></table></figure><h1 id="字符串的几种输入"><a href="#字符串的几种输入" class="headerlink" title="字符串的几种输入"></a>字符串的几种输入</h1><ul><li>当以数据形式赋值时<br>这种形式可以</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char str[10] = <span class="string">&quot;ferry&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="这种形式不行（关键理解，数组的形式中str是常量）"><a href="#这种形式不行（关键理解，数组的形式中str是常量）" class="headerlink" title="这种形式不行（关键理解，数组的形式中str是常量）"></a>这种形式不行（关键理解，数组的形式中str是常量）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char str[10];</span><br><span class="line">str = <span class="string">&quot;ferry&quot;</span>;  </span><br><span class="line">// str被看作(数组的地址而且是个常量)（不同于char * str，str是个指针变量）</span><br></pre></td></tr></table></figure><ul><li>以改变数组的内容输入（1）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char s[10];</span><br><span class="line">scanf(<span class="string">&quot;%s&quot;</span>, s);     //可以读入</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br></pre></td></tr></table></figure><ul><li>以改变数组的内容输入（2）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    char str[10];</span><br><span class="line">    strcpy(str, <span class="string">&quot;ferry&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关联点输出问题"><a href="#关联点输出问题" class="headerlink" title="关联点输出问题"></a>关联点输出问题</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char str[10] = <span class="string">&quot;ferry&quot;</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);   //字符串的地址=首元素的地址(传地址才能打出整个字符串)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, *str);   //首元素的值</span><br></pre></td></tr></table></figure><h2 id="数组输入的本质"><a href="#数组输入的本质" class="headerlink" title="数组输入的本质"></a>数组输入的本质</h2><p>字符串是在静态存储区，而数组是独立分配，所以是把字符串copy到数组。</p><blockquote><p>此时的字符串有两个副本。一个在静态存储区的字符串字面量，另一个是存储在str数组中的字符串。</p></blockquote><h3 id="有关内存区域"><a href="#有关内存区域" class="headerlink" title="有关内存区域"></a>有关内存区域</h3><p><a href="https://ferrychan666.github.io/2020/03/15/c/%E5%AD%98%E5%82%A8%E7%B1%BB%E5%88%AB/">存储类别</a><br><a href="https://ferrychan666.github.io/2020/03/21/c/4%E5%A4%A7%E5%AD%98%E5%82%A8%E5%8C%BA%E5%9F%9F/">存储区域</a></p>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和字符串</title>
      <link href="/2020/03/19/c/%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/03/19/c/%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>赋予指针地址的时候要类型匹配。</p><ul><li><h1 id="For-instance-name-是char-类型内容"><a href="#For-instance-name-是char-类型内容" class="headerlink" title="For instance&quot;name&quot;是char*类型内容"></a>For instance<br><code>&quot;name&quot;</code>是<code>char*</code>类型<br>内容</h1></li><li>让两个指针指向同一个字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* name = <span class="string">&quot;faye&quot;</span>;   <span class="comment">//让name(指针)指向字符串，即name就是这个字符串的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * str;        <span class="comment">//重新定义一个指针</span></span><br><span class="line">    str = name;       <span class="comment">//让str（地址）被赋予name（地址）so,str也指向这个字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);    <span class="comment">//这时name和str的地址一样</span></span><br><span class="line">    str = <span class="string">&quot;hello&quot;</span>;      <span class="comment">//改变了指向的字符串内容</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个间接的"><a href="#一个间接的" class="headerlink" title="一个间接的"></a>一个间接的</h3><ul><li>给指针的指针赋值，让两个指针指向同一个字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>* name = <span class="string">&quot;faye&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, name);</span><br><span class="line">    <span class="type">char</span>** str;         <span class="comment">//char**也是一个类型，定义了指针的指针</span></span><br><span class="line">    str = &amp;name;        <span class="comment">//我让字符串地址的地址赋给了str（也就是name的地址）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重点啊，地址的地址是一一对应的，也就是地址上的值还是地址</span></span><br><span class="line">    <span class="comment">//自然而然</span></span><br><span class="line"></span><br><span class="line">    *str = <span class="string">&quot;ferry&quot;</span>;     <span class="comment">//让*str指向“ferry”，改掉 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *str);   <span class="comment">//ferry</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, name);   <span class="comment">//ferry</span></span><br><span class="line">    <span class="comment">//发现原来地址上的值被改掉</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><hr><ul><li>字符串类型的地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* origin = <span class="string">&quot;origin&quot;</span>;     <span class="comment">//开辟空间</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, origin + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// *origin *(origin + 1) *(origin + 2)是&quot;origin&quot; &quot;rigin&quot; &quot;igin&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串数组</title>
      <link href="/2020/03/19/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
      <url>/2020/03/19/c/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ol><li><code>char *</code>和<code>char **</code>和<code>char *arr[]</code>是指针类型。字节是8(64位操作系统)。(<code>int *</code>也一样)<br>而数组 <code>char arr[1][1]</code>字节是1。</li><li><code>char *arr[]</code>是定义了多个指针。<br>把数组写成指针时按顺序替换。</li></ol><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li><code>char* arr 和 char arr[x]</code>的区别。<br>为什么要给数组赋值，因为要给它开内存，等同于意义<code>char arr[] = &quot;string&quot;</code><br>而<br><code>char* arr</code>是定义指针变量。没赋地址的时候是乱指的，野指针。</li></ul><p>所以，<br><code>char* arr[]</code>是定义了多个地址变量。<br><code>char arr[x][y]</code>是需要开辟应有的内存的。<br>这就是scanf能直接读入<code>char arr[x][y]</code><br>而<br>不能读入<code>char* arr[]</code>的原因。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char* arr[3]; //因为 char* x;  x的地址为&amp;x</span><br><span class="line">//so</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p %p\n&quot;</span>, &amp;arr[0], &amp;arr[1], &amp;arr[2]);//指针的地址</span><br><span class="line">//自然而然</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p %p\n&quot;</span>, arr, arr + 1, arr + 2);  //指针的地址</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p %p\n&quot;</span>, arr[0], arr[1], arr[2]); //这些才是定义的地址变量（指针变量）还没赋地址</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char* arr;    //字符串</span><br><span class="line">arr = <span class="string">&quot;ferry&quot;</span>;     //试过scanf不行，因为还没开辟内存</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char arr[10];</span><br><span class="line">scanf(&quot;%s&quot;, arr);</span><br><span class="line">printf(&quot;%s&quot;, arr);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于linux install tar ./</title>
      <link href="/2020/03/18/linux/%E5%85%B3%E4%BA%8Elinux-install-tar/"/>
      <url>/2020/03/18/linux/%E5%85%B3%E4%BA%8Elinux-install-tar/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Linux的使用中，难免会使用下载，解压和安装。但它不会像windows系统那么直接了当。所以，需要用到一些命令。</p><h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ol><li><code>wget URL   //下载</code></li><li><code>tar -zxvf &lt;file.tar.gz&gt;   //解压</code></li><li><code>./&lt;file.pl&gt;      //执行</code></li></ol><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>当我们在<code>tar</code>时，遇到<br><img src="https://i.ibb.co/dfjqVd3/1297862-20190425144940854-205234289.png" alt="demo"><br>Not enought space to extract，我们可以将tar.gz（要解压的文件）复制到另外一个地方。<br>再进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>main()中的参数是什么</title>
      <link href="/2020/03/18/c/main%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2020/03/18/c/main%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在步入<code>命令行编译程序</code>和<code>C语言</code>的学习时，会涉及到我在编写主函数<code>int main()</code>中有关main参数的问题。</p><h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><ul><li>命令行输入中会有一个又一个以空格间隔的字符串。<br>例如：<code>./test</code>这是执行命令时的一个字符串。</li><li>在执行程序时，从命令行中穿给C程序的值，称为命令行参数。</li></ul><h3 id="main中的参数"><a href="#main中的参数" class="headerlink" title="main中的参数"></a>main中的参数</h3><ul><li><code>int main(int argc, char ** argv)</code><br>argc是argument count （参数的数量）<br>argv是argument vector (参数的向量)</li><li>char, char*, char**</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char    //字符类型</span><br><span class="line">char*   //字符串</span><br><span class="line">char**   //字符串数组</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>当我们用命令行编译的时候，执行c文件的时候。<br><code>./test x y z</code><br>如果我们在c文件中输出argc和argv，便会知道到<code>argc=4</code>，argv中分别是<code>./test</code> <code>x</code> <code>y</code> <code>z</code></p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><code>argc</code>是命令行的参数的个数<br><code>argv</code>是命令行中参数的字符串</p>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于随机函数</title>
      <link href="/2020/03/17/c/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/"/>
      <url>/2020/03/17/c/%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><code>srand()</code>   &#x2F;&#x2F;获得随机数<br><code>rand()</code>    &#x2F;&#x2F;返回随机值<br><code>time()</code>    &#x2F;&#x2F;返回系统时间</p><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;time.h&gt;</span></span><br><span class="line">srand(unsigned int <span class="keyword">time</span>(0));       //初始化随机数（种子）</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,rand());             //输出随机数</span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h3 id="上式中为什么能连续调用两个函数，而且都使用到了（随机数这个变量）？"><a href="#上式中为什么能连续调用两个函数，而且都使用到了（随机数这个变量）？" class="headerlink" title="上式中为什么能连续调用两个函数，而且都使用到了（随机数这个变量）？"></a>上式中为什么能连续调用两个函数，而且都使用到了（随机数这个变量）？</h3><p>因为，这个变量是<code>stdilib.h</code>文件中的静态，内部链接数据类型。（函数外的static)</p><h3 id="time-函数返回系统时间。"><a href="#time-函数返回系统时间。" class="headerlink" title="time()函数返回系统时间。"></a><code>time()</code>函数返回系统时间。</h3><p>可以使得每次编译得到的种子不一样。</p><h3 id="如果要想在一次的程序编译中获得多个种子，或者人为地获得种子"><a href="#如果要想在一次的程序编译中获得多个种子，或者人为地获得种子" class="headerlink" title="如果要想在一次的程序编译中获得多个种子，或者人为地获得种子?"></a>如果要想在一次的程序编译中获得多个种子，或者人为地获得种子?</h3><p>可以用循环更换<code>srand()</code>的参数。<br>但是，这样就无法在每次编译执行后，获得不同的种子了。（因为给予的是每次都相同的常数)</p><h3 id="关于函数rand"><a href="#关于函数rand" class="headerlink" title="关于函数rand()"></a>关于函数<code>rand()</code></h3><p>因为<code>srand()</code>给的这个数很大，所以要用取余和加的方式获取产生范围内的值。</p><ul><li><p>例如要取（0，100）<code>rand() % 101</code>     &#x2F;&#x2F;因为取余101的范围是（0-100）</p></li><li><p>要取（10， 20）<code>rand() % 11 + 10</code><br>&#x2F;&#x2F;只需要搞清（取余的范围和范围内有几个数）就可以了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于makefile脚本的多文件编译</title>
      <link href="/2020/03/17/c/%E5%85%B3%E4%BA%8Emakefile%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
      <url>/2020/03/17/c/%E5%85%B3%E4%BA%8Emakefile%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>当我们想要编译执行多个文件的时候，我们会由于<code>gcc a.c b.c c.c</code>的命令太长而厌烦，而makefile脚本就解决这些问题。（用IDE不需要理会一些这些内容，只需要按下小三角就可以了）</p><h1 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h1><p>makefile是由于这条gcc命令，而实现的。</p><ul><li>我们有ａ．ｃ　　ｂ．ｃ　　ｄ．ｃ　<br>（还有一些头文件。文件会有预处理指令<code>#include &quot;e.h&quot;</code>）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main: a.c b.o d.o　　　　　　　　　　　　　//main(exe)的生成需要依赖：a.c b.o d.o</span><br><span class="line">    gcc a.c b.o d.o -o main 　　　　//（加Tab）做生成main的操作 </span><br><span class="line">b.o: b.c         　　　　　//b.o的生成需要b.c</span><br><span class="line">    gcc -c b.c    　　　　// -c 是要生成 .o文件</span><br><span class="line">d.o: d.c</span><br><span class="line">    gcc -c d.c</span><br><span class="line">clean:</span><br><span class="line">    <span class="built_in">rm</span> *.o main　　　　　　//最后删除所有的.o文件，exe文件</span><br></pre></td></tr></table></figure><br><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ol><li>写makefile</li><li>在终端中，<code>make</code>就可以了生成c的可执行文件了</li><li><code>./main</code>执行文件</li><li><code>make clean</code></li></ol><br><ul><li>设置变量<br>在开头写<code>CC = gcc</code><br>即可以将下文的<code>gcc</code>替代成<code>$(CC)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和const修饰符</title>
      <link href="/2020/03/16/c/%E6%8C%87%E9%92%88%E5%92%8Cconst%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2020/03/16/c/%E6%8C%87%E9%92%88%E5%92%8Cconst%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>声明一个int类型的指针<br><code>int * p</code></p></li><li><p>一个变量<br><code>int x</code></p></li><li><p>随即，赋地址<br><code>p = &amp;x;</code></p></li><li><p>到了这里，p就是x变量的地址。<br><code>*p</code> 就是x的值。</p></li></ul><br><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ol><li><code>const float * p</code></li><li><code>float const * p</code>　　／／１．２．等价</li><li><code>float * const p</code></li><li><code>const float * const p</code><br>所以，就懂了。<br>const修饰值，就不能改变值。修饰地址，就不能改变地址。</li></ol><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数中参数（地址和变量）</title>
      <link href="/2020/03/16/c/%E5%87%BD%E6%95%B0%E4%B8%AD%E5%8F%82%E6%95%B0%EF%BC%88%E5%9C%B0%E5%9D%80%E5%92%8C%E5%8F%98%E9%87%8F%EF%BC%89/"/>
      <url>/2020/03/16/c/%E5%87%BD%E6%95%B0%E4%B8%AD%E5%8F%82%E6%95%B0%EF%BC%88%E5%9C%B0%E5%9D%80%E5%92%8C%E5%8F%98%E9%87%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="函数中使用参数是否会改变主调函数中的变量？全局变量在函数如何改变？示例"><a href="#函数中使用参数是否会改变主调函数中的变量？全局变量在函数如何改变？示例" class="headerlink" title="函数中使用参数是否会改变主调函数中的变量？全局变量在函数如何改变？示例"></a>函数中使用参数是否会改变主调函数中的变量？全局变量在函数如何改变？<br>示例</h1><h2 id="函数中的全局变量"><a href="#函数中的全局变量" class="headerlink" title="函数中的全局变量"></a>函数中的全局变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int x = 1;</span><br><span class="line">int <span class="function"><span class="title">function</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    x = 2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, x);　　　／／ｘ　＝　２；</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">printf(&quot;</span>%d<span class="string">&quot;, x);　　　　　　／／ｘ　＝　１；</span></span><br></pre></td></tr></table></figure><p>在块中，重新定义了局部变量ｘ，（因为同名）所以全局变量暂时被覆盖。当跳出块时ｘ变为全局变量。</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int x = 1;</span><br><span class="line">int <span class="function"><span class="title">function</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    x = 2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, x);  ／／ｘ　＝　２；</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">printf(&quot;</span>%d<span class="string">&quot;, x);      // x = 2;</span></span><br></pre></td></tr></table></figure><p>因为全局变量随处可用，所以可在块中修改x的值。<br><br><br>所以全局变量很容易被修改，一般将固定值设为全局变量，使用const修饰。</p><h2 id="函数中的参数。"><a href="#函数中的参数。" class="headerlink" title="函数中的参数。"></a>函数中的参数。</h2><p>一般由主调程序将变量传给函数。</p><ul><li>例如函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">const</span> <span class="type">int</span> arr[], <span class="type">int</span> x, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>此时函数中的<code>int x, int n</code>已经是原始数据的备份，所以无在函数中如何修改，都无法改变主调函数中相应的值。</li><li>而<code>const int arr[]</code>则是一个数组指针。const 的作用是防止修改数组中的值（能修改地址）。如果不加const，就可以在函数中修改它的值（也能修改地址）</li></ol>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针和多维数组</title>
      <link href="/2020/03/16/c/%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
      <url>/2020/03/16/c/%E6%8C%87%E9%92%88%E5%92%8C%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="指针和数组的关系，首先要知道一些人为的表示符号。"><a href="#指针和数组的关系，首先要知道一些人为的表示符号。" class="headerlink" title="指针和数组的关系，首先要知道一些人为的表示符号。"></a>指针和数组的关系，首先要知道一些人为的表示符号。</h3><ul><li>[]　和　*　–&gt;　取值　　　　　　／／所以，这两种写法可以替换</li><li>&amp;　　　　　–&gt;　取地址</li><li>&amp; * []　同时存在时可以互相抵消</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>　　地址　　|　　　　　　　　　　　　值　　　　　　　　　　　　　　　　　|<br>　　ａ　　　|　　　ａ［０］　　|　　ａ［１］　　　|　　　ａ［２］　　　　|<br><br></p><p>　ａ［０］　|　ａ［０］［０］　|　ａ［０］［１］　|　　ａ［０］［２］　　|<br>　　　　　　|　　　　１　　　　|　　　　２　　　　|　　　　　３　　　　　|<br>　ａ［１］　|　ａ［１］［０］　|　ａ［１］［１］　|　　ａ［１］［２］　　|<br>　　　　　　|　　　　４　　　　|　　　　５　　　　|　　　　　７　　　　　|<br>　ａ［２］　|　ａ［２］［０］　|　ａ［２］［１］　|　　ａ［２］［２］　　|<br>　　　　　　|　　　　　８　　　|　　　　９　　　　|　　　　　１０　　　　|</p><ul><li>往下取值，往上地址<br>|    a    |<br>|   a[0]    |<br>|   a[0][0]   |</li></ul><h2 id="重要切换，原来一维数组a-x-是值，而二维数组是地址。Anyway-最终的取值才是值。"><a href="#重要切换，原来一维数组a-x-是值，而二维数组是地址。Anyway-最终的取值才是值。" class="headerlink" title="重要切换，原来一维数组a[x]是值，而二维数组是地址。Anyway,最终的取值才是值。"></a>重要切换，原来一维数组a[x]是值，而二维数组是地址。Anyway,最终的取值才是值。</h2><h1 id="等价写法"><a href="#等价写法" class="headerlink" title="等价写法"></a>等价写法</h1><ol><li>a[2] &#x3D;&#x3D; * (a + 2) &#x2F;&#x2F;先在a的地址上 +2 ,然后取值</li><li>str &#x3D; &amp;str[0];<br>&#x2F;&#x2F;str是数组的地址，&amp;str[0]是首元素的地址<br>而规定他们两相等</li></ol><ul><li>例题a[2][1]</li></ul><ol><li>*(a + 2) &#x3D; a[2] &#x2F;&#x2F;在 a地址上 +2 ,然后取值</li><li>得＊(＊(a + 2) + 1)  &#x2F;&#x2F; Don’t forget  在二维数组中，<em>(a + 2)还是地址<br>&#x2F;&#x2F; 在地址上 +1 再取值</em></li></ol><h2 id="Keep-in-mind-2-还是地址上的-2，还没有取值。"><a href="#Keep-in-mind-2-还是地址上的-2，还没有取值。" class="headerlink" title="Keep in mind, +2 还是地址上的 +2，还没有取值。"></a>Keep in mind, +2 还是地址上的 +2，还没有取值。</h2>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储类别</title>
      <link href="/2020/03/15/c/%E5%AD%98%E5%82%A8%E7%B1%BB%E5%88%AB/"/>
      <url>/2020/03/15/c/%E5%AD%98%E5%82%A8%E7%B1%BB%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="5种存储类别"><a href="#5种存储类别" class="headerlink" title="5种存储类别"></a>5种存储类别</h2><p><img src="https://easycaptures.com/fs/uploaded/1300/7957902175.png"></p><h2 id="存储类别说明符"><a href="#存储类别说明符" class="headerlink" title="存储类别说明符"></a>存储类别说明符</h2><ul><li>auto extern static register<br>内容</li></ul><hr><ul><li>作用域</li><li>链接</li><li>存储期</li></ul><p><strong>存储类别可以是变量，还可以是函数</strong></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="作用域（变量的使用范围）"><a href="#作用域（变量的使用范围）" class="headerlink" title="作用域（变量的使用范围）"></a>作用域（变量的使用范围）</h2><blockquote><p>程序中可访问标识符的区域</p></blockquote><ul><li>块作用域<br>{}内的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有{}的块<br>for while if</p><ul><li>文件作用域<br>声明在块以外的区域</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(static)int x;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（又分为外部链接，和内部链接。区分它们看有没有static）</p><ul><li>函数作用域</li><li>函数原型作用域<br>int function(int x, int y);仅在此时有用</li></ul><h2 id="链接-访问范围"><a href="#链接-访问范围" class="headerlink" title="链接(访问范围)"></a>链接(访问范围)</h2><ul><li>外部链接<br>可以在不同文件中访问他（但访问时要加上extern)</li><li>内部链接<br>可以在一个翻译单元内访问<blockquote><p>编译器源代码文件和所有的头文件都看成一个包含信息的单独文件，而这个文件就是翻译单元。<br>每个翻译单元均对应一个源代码文件和它所包含的文件。</p></blockquote></li><li>无链接<br>具有块作用域，函数作用域，函数原型作用域的变量都是无链接变量</li></ul><h2 id="存储期-使用时间"><a href="#存储期-使用时间" class="headerlink" title="存储期(使用时间)"></a>存储期(使用时间)</h2><ul><li>静态存储期<br>在程序执行期间一直存在</li><li>动态存储期<br>可以主动控制</li><li>自动存储期（局部变量）<br>在块中，从进入块而产生，从退出块而结束</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul><li>文件作用域，外部链接，静态存储期<br>file_1.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>; <span class="comment">//声明定义</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>file_2.c<br><code>extern int x; //引用定义</code></p><ul><li>文件作用域，内部链接，静态存储期</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> x;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块作用域，无链接，静态存储期</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>块作用域，无链接，自由存储期</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>寄存器变量（与字典变量属性相同）<br>{<br>  register int x; &#x2F;&#x2F;特点快速<br>}</li></ul><ol><li>函数的存储类别也和变量类似<br>int function(int);     &#x2F;&#x2F;默认声明为外部函数<br>extern int function(int); &#x2F;&#x2F;引用声明使用外部函数<br>static int function(int); &#x2F;&#x2F;声明为内部函数</li></ol><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul><li><p>自动存储期的变量<br>在进入块中分配内存，<br>如果不初始化，则是垃圾值</p></li><li><p>静态存储期的变量<br>在开始程序时分配内存，到程序结束，<br>如果不初始化，则为0</p></li><li><p>静态存储期变量<strong>只能被常量赋值</strong></p></li></ul><figure class="highlight c"><figcaption><span>error: initializer element is not constant</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> b = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> programming languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客</title>
      <link href="/2020/03/10/git/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/03/10/git/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客搭建"><a href="#个人博客搭建" class="headerlink" title="个人博客搭建"></a>个人博客搭建</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><ol><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://nodejs.org/en/">nodejs</a></li><li>用npm安装hexo:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="2-初始化hexo"><a href="#2-初始化hexo" class="headerlink" title="2.初始化hexo"></a>2.初始化hexo</h2><ul><li>先建立一个hexo文件目录<br><code>mkdir blog</code>(名字为blog的hexo文件)</li><li>进入blog <code>cd blog</code></li><li>初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>测试你的博客<br>启动服务器<br><code>hexo serve(s)</code><br>复制URL 在浏览器中打开</p><h2 id="3-新建博客"><a href="#3-新建博客" class="headerlink" title="3.新建博客"></a>3.新建博客</h2><p><code>hexo new(n) &quot;name&quot;</code><br>编辑你的博客（blog&#x2F;source 中可找到)<br>到blog中生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="4-部署到github"><a href="#4-部署到github" class="headerlink" title="4.部署到github"></a>4.部署到github</h2><p>配置个人信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;your@email.com&quot;</span><br></pre></td></tr></table></figure><p>一直回车直到（中间存在passphrase，如果一直按enter，就表示无密码。）</p><ol><li><p>打开那个<code>id_rsa.pub</code>路径，复制里面内容</p></li><li><p>进入<a href="https://github.com/settings/keys">Github上</a>点击New shh Key 粘贴里面的内容到Key</p></li><li><p>验证：<code>ssh -T git@github.com</code> 看到<br>Hi ***! You’ve successfully authenticated, but GitHub does not provide shell access.<br>表示成功了！！</p></li><li><p>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>填写deploy信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:FerryChan666/ferrychan666.github.io.git</span><br><span class="line">  branch: master    </span><br></pre></td></tr></table></figure><p>最后在命令行中部署</p><p>&#96;&#96;&#96;hexo g -d&#96;</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
